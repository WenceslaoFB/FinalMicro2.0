
PROT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a10  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dbc  08006dbc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc4  08006dc4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000010  08006ddc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08006ddc  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010751  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210d  00000000  00000000  00030791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000328a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000336b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001748b  00000000  00000000  00034418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108a3  00000000  00000000  0004b8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009885b  00000000  00000000  0005c146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f49a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd8  00000000  00000000  000f49f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006b8c 	.word	0x08006b8c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08006b8c 	.word	0x08006b8c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_UART_RxCpltCallback>:
void calcPID(uint32_t pwmBase1,uint32_t pwmBase2);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

	indRX_W++;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	3301      	adds	r3, #1
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004ec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t *) &buf_rx[indRX_W], 1);
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_UART_RxCpltCallback+0x38>)
 80004f8:	4413      	add	r3, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_UART_RxCpltCallback+0x3c>)
 8000500:	f005 fbdf 	bl	8005cc2 <HAL_UART_Receive_IT>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200004fd 	.word	0x200004fd
 8000510:	200001ec 	.word	0x200001ec
 8000514:	20000164 	.word	0x20000164

08000518 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM4){//ENTRA CADA 10 MS
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a18      	ldr	r2, [pc, #96]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d127      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x62>
			//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADCData[indexADC],8);

			time100ms--;
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	3b01      	subs	r3, #1
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000536:	701a      	strb	r2, [r3, #0]
			if(!time100ms){
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d107      	bne.n	8000552 <HAL_TIM_PeriodElapsedCallback+0x3a>
				time100ms=10;
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000544:	220a      	movs	r2, #10
 8000546:	701a      	strb	r2, [r3, #0]
				ON100MS = 1;
 8000548:	4a11      	ldr	r2, [pc, #68]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800054a:	7813      	ldrb	r3, [r2, #0]
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	7013      	strb	r3, [r2, #0]
			}
			time10ms--;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	3b01      	subs	r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800055e:	701a      	strb	r2, [r3, #0]
			if(!time10ms){
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d107      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x62>
				time10ms=1;
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800056c:	2201      	movs	r2, #1
 800056e:	701a      	strb	r2, [r3, #0]
				ON10MS = 1;
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000572:	7813      	ldrb	r3, [r2, #0]
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	7013      	strb	r3, [r2, #0]
			}
		}
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40000800 	.word	0x40000800
 800058c:	200004fb 	.word	0x200004fb
 8000590:	20000554 	.word	0x20000554
 8000594:	200004fc 	.word	0x200004fc

08000598 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	indADC++;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_ADC_ConvCpltCallback+0x34>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	3301      	adds	r3, #1
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <HAL_ADC_ConvCpltCallback+0x34>)
 80005ac:	701a      	strb	r2, [r3, #0]
	if(indADC==32){
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <HAL_ADC_ConvCpltCallback+0x34>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b20      	cmp	r3, #32
 80005b6:	d102      	bne.n	80005be <HAL_ADC_ConvCpltCallback+0x26>
		indADC=0;
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <HAL_ADC_ConvCpltCallback+0x34>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
	}
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000501 	.word	0x20000501

080005d0 <uart>:

void uart(){
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	if((huart1.Instance->SR & UART_FLAG_TXE)==UART_FLAG_TXE){
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <uart+0x40>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	2b80      	cmp	r3, #128	; 0x80
 80005e0:	d110      	bne.n	8000604 <uart+0x34>
		huart1.Instance->DR=buf_tx[indTX_R];
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <uart+0x44>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <uart+0x48>)
 80005ec:	5c9b      	ldrb	r3, [r3, r2]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <uart+0x40>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
		indTX_R++;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <uart+0x44>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	3301      	adds	r3, #1
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <uart+0x44>)
 8000602:	701a      	strb	r2, [r3, #0]
	}
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000164 	.word	0x20000164
 8000614:	20000500 	.word	0x20000500
 8000618:	200002ec 	.word	0x200002ec

0800061c <initEsp>:

void initEsp(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

	if(readyToSend){
 8000620:	4b73      	ldr	r3, [pc, #460]	; (80007f0 <initEsp+0x1d4>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	f000 80dc 	beq.w	80007e8 <initEsp+0x1cc>
		switch(AT){
 8000630:	4b70      	ldr	r3, [pc, #448]	; (80007f4 <initEsp+0x1d8>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b07      	cmp	r3, #7
 8000636:	f200 80d8 	bhi.w	80007ea <initEsp+0x1ce>
 800063a:	a201      	add	r2, pc, #4	; (adr r2, 8000640 <initEsp+0x24>)
 800063c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000640:	08000661 	.word	0x08000661
 8000644:	08000697 	.word	0x08000697
 8000648:	080006cd 	.word	0x080006cd
 800064c:	08000703 	.word	0x08000703
 8000650:	08000739 	.word	0x08000739
 8000654:	0800076f 	.word	0x0800076f
 8000658:	080007a5 	.word	0x080007a5
 800065c:	080007db 	.word	0x080007db
			case 0:
				memcpy((uint8_t*)&buf_tx[indTX_W],AT_com,4);
 8000660:	4b65      	ldr	r3, [pc, #404]	; (80007f8 <initEsp+0x1dc>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	4b64      	ldr	r3, [pc, #400]	; (80007fc <initEsp+0x1e0>)
 800066a:	4413      	add	r3, r2
 800066c:	2204      	movs	r2, #4
 800066e:	4964      	ldr	r1, [pc, #400]	; (8000800 <initEsp+0x1e4>)
 8000670:	4618      	mov	r0, r3
 8000672:	f006 fa75 	bl	8006b60 <memcpy>
				indTX_W+=4;
 8000676:	4b60      	ldr	r3, [pc, #384]	; (80007f8 <initEsp+0x1dc>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	3304      	adds	r3, #4
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b5d      	ldr	r3, [pc, #372]	; (80007f8 <initEsp+0x1dc>)
 8000682:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 8000684:	4b5f      	ldr	r3, [pc, #380]	; (8000804 <initEsp+0x1e8>)
 8000686:	220a      	movs	r2, #10
 8000688:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 800068a:	4a59      	ldr	r2, [pc, #356]	; (80007f0 <initEsp+0x1d4>)
 800068c:	7813      	ldrb	r3, [r2, #0]
 800068e:	f36f 1304 	bfc	r3, #4, #1
 8000692:	7013      	strb	r3, [r2, #0]
			break;
 8000694:	e0a9      	b.n	80007ea <initEsp+0x1ce>
			case 1:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWQAP,10);
 8000696:	4b58      	ldr	r3, [pc, #352]	; (80007f8 <initEsp+0x1dc>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	4b57      	ldr	r3, [pc, #348]	; (80007fc <initEsp+0x1e0>)
 80006a0:	4413      	add	r3, r2
 80006a2:	220a      	movs	r2, #10
 80006a4:	4958      	ldr	r1, [pc, #352]	; (8000808 <initEsp+0x1ec>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fa5a 	bl	8006b60 <memcpy>
				indTX_W+=10;
 80006ac:	4b52      	ldr	r3, [pc, #328]	; (80007f8 <initEsp+0x1dc>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	330a      	adds	r3, #10
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b50      	ldr	r3, [pc, #320]	; (80007f8 <initEsp+0x1dc>)
 80006b8:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <initEsp+0x1e8>)
 80006bc:	220a      	movs	r2, #10
 80006be:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 80006c0:	4a4b      	ldr	r2, [pc, #300]	; (80007f0 <initEsp+0x1d4>)
 80006c2:	7813      	ldrb	r3, [r2, #0]
 80006c4:	f36f 1304 	bfc	r3, #4, #1
 80006c8:	7013      	strb	r3, [r2, #0]
			break;
 80006ca:	e08e      	b.n	80007ea <initEsp+0x1ce>
			case 2:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWMODE,13);
 80006cc:	4b4a      	ldr	r3, [pc, #296]	; (80007f8 <initEsp+0x1dc>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b49      	ldr	r3, [pc, #292]	; (80007fc <initEsp+0x1e0>)
 80006d6:	4413      	add	r3, r2
 80006d8:	220d      	movs	r2, #13
 80006da:	494c      	ldr	r1, [pc, #304]	; (800080c <initEsp+0x1f0>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f006 fa3f 	bl	8006b60 <memcpy>
				indTX_W+=13;
 80006e2:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <initEsp+0x1dc>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	330d      	adds	r3, #13
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <initEsp+0x1dc>)
 80006ee:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 80006f0:	4b44      	ldr	r3, [pc, #272]	; (8000804 <initEsp+0x1e8>)
 80006f2:	220a      	movs	r2, #10
 80006f4:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 80006f6:	4a3e      	ldr	r2, [pc, #248]	; (80007f0 <initEsp+0x1d4>)
 80006f8:	7813      	ldrb	r3, [r2, #0]
 80006fa:	f36f 1304 	bfc	r3, #4, #1
 80006fe:	7013      	strb	r3, [r2, #0]
			break;
 8000700:	e073      	b.n	80007ea <initEsp+0x1ce>
			case 3:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWJAP_casa,36);
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <initEsp+0x1dc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <initEsp+0x1e0>)
 800070c:	4413      	add	r3, r2
 800070e:	2224      	movs	r2, #36	; 0x24
 8000710:	493f      	ldr	r1, [pc, #252]	; (8000810 <initEsp+0x1f4>)
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fa24 	bl	8006b60 <memcpy>
				indTX_W+=36;
 8000718:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <initEsp+0x1dc>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3324      	adds	r3, #36	; 0x24
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <initEsp+0x1dc>)
 8000724:	701a      	strb	r2, [r3, #0]
				timeout2 = 50;
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <initEsp+0x1e8>)
 8000728:	2232      	movs	r2, #50	; 0x32
 800072a:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 800072c:	4a30      	ldr	r2, [pc, #192]	; (80007f0 <initEsp+0x1d4>)
 800072e:	7813      	ldrb	r3, [r2, #0]
 8000730:	f36f 1304 	bfc	r3, #4, #1
 8000734:	7013      	strb	r3, [r2, #0]
			break;
 8000736:	e058      	b.n	80007ea <initEsp+0x1ce>
			case 4:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIPMUX,13);
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <initEsp+0x1dc>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <initEsp+0x1e0>)
 8000742:	4413      	add	r3, r2
 8000744:	220d      	movs	r2, #13
 8000746:	4933      	ldr	r1, [pc, #204]	; (8000814 <initEsp+0x1f8>)
 8000748:	4618      	mov	r0, r3
 800074a:	f006 fa09 	bl	8006b60 <memcpy>
				indTX_W+=13;
 800074e:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <initEsp+0x1dc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	330d      	adds	r3, #13
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <initEsp+0x1dc>)
 800075a:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <initEsp+0x1e8>)
 800075e:	220a      	movs	r2, #10
 8000760:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000762:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <initEsp+0x1d4>)
 8000764:	7813      	ldrb	r3, [r2, #0]
 8000766:	f36f 1304 	bfc	r3, #4, #1
 800076a:	7013      	strb	r3, [r2, #0]
			break;
 800076c:	e03d      	b.n	80007ea <initEsp+0x1ce>
			case 5:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIFSR,10);
 800076e:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <initEsp+0x1dc>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <initEsp+0x1e0>)
 8000778:	4413      	add	r3, r2
 800077a:	220a      	movs	r2, #10
 800077c:	4926      	ldr	r1, [pc, #152]	; (8000818 <initEsp+0x1fc>)
 800077e:	4618      	mov	r0, r3
 8000780:	f006 f9ee 	bl	8006b60 <memcpy>
				indTX_W+=10;
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <initEsp+0x1dc>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	330a      	adds	r3, #10
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <initEsp+0x1dc>)
 8000790:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <initEsp+0x1e8>)
 8000794:	220a      	movs	r2, #10
 8000796:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000798:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <initEsp+0x1d4>)
 800079a:	7813      	ldrb	r3, [r2, #0]
 800079c:	f36f 1304 	bfc	r3, #4, #1
 80007a0:	7013      	strb	r3, [r2, #0]
			break;
 80007a2:	e022      	b.n	80007ea <initEsp+0x1ce>
			case 6:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIPSTART,46);
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <initEsp+0x1dc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <initEsp+0x1e0>)
 80007ae:	4413      	add	r3, r2
 80007b0:	222e      	movs	r2, #46	; 0x2e
 80007b2:	491a      	ldr	r1, [pc, #104]	; (800081c <initEsp+0x200>)
 80007b4:	4618      	mov	r0, r3
 80007b6:	f006 f9d3 	bl	8006b60 <memcpy>
				indTX_W+=46;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <initEsp+0x1dc>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	332e      	adds	r3, #46	; 0x2e
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <initEsp+0x1dc>)
 80007c6:	701a      	strb	r2, [r3, #0]
				timeout2 = 20;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <initEsp+0x1e8>)
 80007ca:	2214      	movs	r2, #20
 80007cc:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <initEsp+0x1d4>)
 80007d0:	7813      	ldrb	r3, [r2, #0]
 80007d2:	f36f 1304 	bfc	r3, #4, #1
 80007d6:	7013      	strb	r3, [r2, #0]
			break;
 80007d8:	e007      	b.n	80007ea <initEsp+0x1ce>
			case 7:
				duty++;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <initEsp+0x204>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <initEsp+0x204>)
 80007e4:	701a      	strb	r2, [r3, #0]
			break;
 80007e6:	e000      	b.n	80007ea <initEsp+0x1ce>
		}

	}
 80007e8:	bf00      	nop

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000554 	.word	0x20000554
 80007f4:	20000505 	.word	0x20000505
 80007f8:	200004ff 	.word	0x200004ff
 80007fc:	200002ec 	.word	0x200002ec
 8000800:	08006bac 	.word	0x08006bac
 8000804:	2000050a 	.word	0x2000050a
 8000808:	08006bc0 	.word	0x08006bc0
 800080c:	08006be0 	.word	0x08006be0
 8000810:	08006c04 	.word	0x08006c04
 8000814:	08006c90 	.word	0x08006c90
 8000818:	08006c74 	.word	0x08006c74
 800081c:	08006cb4 	.word	0x08006cb4
 8000820:	20000504 	.word	0x20000504

08000824 <recibirmensaje>:

void recibirmensaje(){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

	switch(AT){
 8000828:	4ba2      	ldr	r3, [pc, #648]	; (8000ab4 <recibirmensaje+0x290>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b08      	cmp	r3, #8
 800082e:	f200 861d 	bhi.w	800146c <recibirmensaje+0xc48>
 8000832:	a201      	add	r2, pc, #4	; (adr r2, 8000838 <recibirmensaje+0x14>)
 8000834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000838:	0800085d 	.word	0x0800085d
 800083c:	080008d7 	.word	0x080008d7
 8000840:	0800094b 	.word	0x0800094b
 8000844:	080009c5 	.word	0x080009c5
 8000848:	08000a19 	.word	0x08000a19
 800084c:	08000a93 	.word	0x08000a93
 8000850:	08000c57 	.word	0x08000c57
 8000854:	08000cdf 	.word	0x08000cdf
 8000858:	080011db 	.word	0x080011db
		case 0:
			if(buf_rx[indRX_R]==AT_ans[coincidencias]){
 800085c:	4b96      	ldr	r3, [pc, #600]	; (8000ab8 <recibirmensaje+0x294>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	4b95      	ldr	r3, [pc, #596]	; (8000abc <recibirmensaje+0x298>)
 8000866:	5c9b      	ldrb	r3, [r3, r2]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b95      	ldr	r3, [pc, #596]	; (8000ac0 <recibirmensaje+0x29c>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	4b94      	ldr	r3, [pc, #592]	; (8000ac4 <recibirmensaje+0x2a0>)
 8000872:	5c5b      	ldrb	r3, [r3, r1]
 8000874:	429a      	cmp	r2, r3
 8000876:	d11a      	bne.n	80008ae <recibirmensaje+0x8a>
				coincidencias++;
 8000878:	4b91      	ldr	r3, [pc, #580]	; (8000ac0 <recibirmensaje+0x29c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b8f      	ldr	r3, [pc, #572]	; (8000ac0 <recibirmensaje+0x29c>)
 8000882:	701a      	strb	r2, [r3, #0]

				if(coincidencias>6){
 8000884:	4b8e      	ldr	r3, [pc, #568]	; (8000ac0 <recibirmensaje+0x29c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b06      	cmp	r3, #6
 800088a:	f240 85f1 	bls.w	8001470 <recibirmensaje+0xc4c>
					//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
					coincidencias = 0;
 800088e:	4b8c      	ldr	r3, [pc, #560]	; (8000ac0 <recibirmensaje+0x29c>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
					AT++;
 8000894:	4b87      	ldr	r3, [pc, #540]	; (8000ab4 <recibirmensaje+0x290>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b85      	ldr	r3, [pc, #532]	; (8000ab4 <recibirmensaje+0x290>)
 800089e:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 80008a0:	4a89      	ldr	r2, [pc, #548]	; (8000ac8 <recibirmensaje+0x2a4>)
 80008a2:	7813      	ldrb	r3, [r2, #0]
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 80008aa:	f000 bde1 	b.w	8001470 <recibirmensaje+0xc4c>
				if(!timeout2){
 80008ae:	4b87      	ldr	r3, [pc, #540]	; (8000acc <recibirmensaje+0x2a8>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 85dc 	bne.w	8001470 <recibirmensaje+0xc4c>
					indRX_R=indRX_W;
 80008b8:	4b85      	ldr	r3, [pc, #532]	; (8000ad0 <recibirmensaje+0x2ac>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b7e      	ldr	r3, [pc, #504]	; (8000ab8 <recibirmensaje+0x294>)
 80008c0:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 80008c2:	4b7f      	ldr	r3, [pc, #508]	; (8000ac0 <recibirmensaje+0x29c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 80008c8:	4a7f      	ldr	r2, [pc, #508]	; (8000ac8 <recibirmensaje+0x2a4>)
 80008ca:	7813      	ldrb	r3, [r2, #0]
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	7013      	strb	r3, [r2, #0]
					break;
 80008d2:	f000 bddc 	b.w	800148e <recibirmensaje+0xc6a>
		case 1:
			if(buf_rx[indRX_R]==ANS_CWQAP[coincidencias]){
 80008d6:	4b78      	ldr	r3, [pc, #480]	; (8000ab8 <recibirmensaje+0x294>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	4b77      	ldr	r3, [pc, #476]	; (8000abc <recibirmensaje+0x298>)
 80008e0:	5c9b      	ldrb	r3, [r3, r2]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b76      	ldr	r3, [pc, #472]	; (8000ac0 <recibirmensaje+0x29c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	4b7a      	ldr	r3, [pc, #488]	; (8000ad4 <recibirmensaje+0x2b0>)
 80008ec:	5c5b      	ldrb	r3, [r3, r1]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d118      	bne.n	8000924 <recibirmensaje+0x100>
				coincidencias++;
 80008f2:	4b73      	ldr	r3, [pc, #460]	; (8000ac0 <recibirmensaje+0x29c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b71      	ldr	r3, [pc, #452]	; (8000ac0 <recibirmensaje+0x29c>)
 80008fc:	701a      	strb	r2, [r3, #0]

				if(coincidencias>14){
 80008fe:	4b70      	ldr	r3, [pc, #448]	; (8000ac0 <recibirmensaje+0x29c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b0e      	cmp	r3, #14
 8000904:	d921      	bls.n	800094a <recibirmensaje+0x126>
					//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
					coincidencias = 0;
 8000906:	4b6e      	ldr	r3, [pc, #440]	; (8000ac0 <recibirmensaje+0x29c>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
					AT++;
 800090c:	4b69      	ldr	r3, [pc, #420]	; (8000ab4 <recibirmensaje+0x290>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b67      	ldr	r3, [pc, #412]	; (8000ab4 <recibirmensaje+0x290>)
 8000916:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000918:	4a6b      	ldr	r2, [pc, #428]	; (8000ac8 <recibirmensaje+0x2a4>)
 800091a:	7813      	ldrb	r3, [r2, #0]
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	7013      	strb	r3, [r2, #0]
 8000922:	e012      	b.n	800094a <recibirmensaje+0x126>
				}
			}else{
				if(!timeout2){
 8000924:	4b69      	ldr	r3, [pc, #420]	; (8000acc <recibirmensaje+0x2a8>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10e      	bne.n	800094a <recibirmensaje+0x126>
					indRX_R=indRX_W;
 800092c:	4b68      	ldr	r3, [pc, #416]	; (8000ad0 <recibirmensaje+0x2ac>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <recibirmensaje+0x294>)
 8000934:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 8000936:	4b62      	ldr	r3, [pc, #392]	; (8000ac0 <recibirmensaje+0x29c>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 800093c:	4a62      	ldr	r2, [pc, #392]	; (8000ac8 <recibirmensaje+0x2a4>)
 800093e:	7813      	ldrb	r3, [r2, #0]
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	7013      	strb	r3, [r2, #0]
					break;
 8000946:	f000 bda2 	b.w	800148e <recibirmensaje+0xc6a>
					}
				}
			}
		break;*/
		case 2:
			if(buf_rx[indRX_R]==ANS_CWMODE[coincidencias]){
 800094a:	4b5b      	ldr	r3, [pc, #364]	; (8000ab8 <recibirmensaje+0x294>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	461a      	mov	r2, r3
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <recibirmensaje+0x298>)
 8000954:	5c9b      	ldrb	r3, [r3, r2]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <recibirmensaje+0x29c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	4b5e      	ldr	r3, [pc, #376]	; (8000ad8 <recibirmensaje+0x2b4>)
 8000960:	5c5b      	ldrb	r3, [r3, r1]
 8000962:	429a      	cmp	r2, r3
 8000964:	d11a      	bne.n	800099c <recibirmensaje+0x178>
				coincidencias++;
 8000966:	4b56      	ldr	r3, [pc, #344]	; (8000ac0 <recibirmensaje+0x29c>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b54      	ldr	r3, [pc, #336]	; (8000ac0 <recibirmensaje+0x29c>)
 8000970:	701a      	strb	r2, [r3, #0]

				if(coincidencias>17){
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <recibirmensaje+0x29c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b11      	cmp	r3, #17
 8000978:	f240 857c 	bls.w	8001474 <recibirmensaje+0xc50>
					coincidencias = 0;
 800097c:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <recibirmensaje+0x29c>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
					AT++;
 8000982:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <recibirmensaje+0x290>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <recibirmensaje+0x290>)
 800098c:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 800098e:	4a4e      	ldr	r2, [pc, #312]	; (8000ac8 <recibirmensaje+0x2a4>)
 8000990:	7813      	ldrb	r3, [r2, #0]
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 8000998:	f000 bd6c 	b.w	8001474 <recibirmensaje+0xc50>
				if(!timeout2){
 800099c:	4b4b      	ldr	r3, [pc, #300]	; (8000acc <recibirmensaje+0x2a8>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f040 8567 	bne.w	8001474 <recibirmensaje+0xc50>
					indRX_R=indRX_W;
 80009a6:	4b4a      	ldr	r3, [pc, #296]	; (8000ad0 <recibirmensaje+0x2ac>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <recibirmensaje+0x294>)
 80009ae:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 80009b0:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <recibirmensaje+0x29c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 80009b6:	4a44      	ldr	r2, [pc, #272]	; (8000ac8 <recibirmensaje+0x2a4>)
 80009b8:	7813      	ldrb	r3, [r2, #0]
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	7013      	strb	r3, [r2, #0]
					break;
 80009c0:	f000 bd65 	b.w	800148e <recibirmensaje+0xc6a>
		case 3:
			if(buf_rx[indRX_R]==ANS_CWJAP_casa[coincidencias]){
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <recibirmensaje+0x294>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <recibirmensaje+0x298>)
 80009ce:	5c9b      	ldrb	r3, [r3, r2]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <recibirmensaje+0x29c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4b40      	ldr	r3, [pc, #256]	; (8000adc <recibirmensaje+0x2b8>)
 80009da:	5c5b      	ldrb	r3, [r3, r1]
 80009dc:	429a      	cmp	r2, r3
 80009de:	f040 854b 	bne.w	8001478 <recibirmensaje+0xc54>
				coincidencias++;
 80009e2:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <recibirmensaje+0x29c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <recibirmensaje+0x29c>)
 80009ec:	701a      	strb	r2, [r3, #0]

				if(coincidencias>68){
 80009ee:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <recibirmensaje+0x29c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b44      	cmp	r3, #68	; 0x44
 80009f4:	f240 8540 	bls.w	8001478 <recibirmensaje+0xc54>
					coincidencias = 0;
 80009f8:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <recibirmensaje+0x29c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
					AT++;
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <recibirmensaje+0x290>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <recibirmensaje+0x290>)
 8000a08:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000a0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ac8 <recibirmensaje+0x2a4>)
 8000a0c:	7813      	ldrb	r3, [r2, #0]
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	7013      	strb	r3, [r2, #0]
				}
			}
		break;
 8000a14:	f000 bd30 	b.w	8001478 <recibirmensaje+0xc54>
		case 4:
			if(buf_rx[indRX_R]==ANS_CIPMUX[coincidencias]){
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <recibirmensaje+0x294>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <recibirmensaje+0x298>)
 8000a22:	5c9b      	ldrb	r3, [r3, r2]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <recibirmensaje+0x29c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <recibirmensaje+0x2bc>)
 8000a2e:	5c5b      	ldrb	r3, [r3, r1]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d11a      	bne.n	8000a6a <recibirmensaje+0x246>
				coincidencias++;
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <recibirmensaje+0x29c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <recibirmensaje+0x29c>)
 8000a3e:	701a      	strb	r2, [r3, #0]

				if(coincidencias>17){
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <recibirmensaje+0x29c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b11      	cmp	r3, #17
 8000a46:	f240 8519 	bls.w	800147c <recibirmensaje+0xc58>
					coincidencias = 0;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <recibirmensaje+0x29c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
					AT+=2;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <recibirmensaje+0x290>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	3302      	adds	r3, #2
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <recibirmensaje+0x290>)
 8000a5a:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <recibirmensaje+0x2a4>)
 8000a5e:	7813      	ldrb	r3, [r2, #0]
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 8000a66:	f000 bd09 	b.w	800147c <recibirmensaje+0xc58>
				if(!timeout2){
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <recibirmensaje+0x2a8>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f040 8504 	bne.w	800147c <recibirmensaje+0xc58>
					indRX_R=indRX_W;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <recibirmensaje+0x2ac>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <recibirmensaje+0x294>)
 8000a7c:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <recibirmensaje+0x29c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000a84:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <recibirmensaje+0x2a4>)
 8000a86:	7813      	ldrb	r3, [r2, #0]
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	7013      	strb	r3, [r2, #0]
					break;
 8000a8e:	f000 bcfe 	b.w	800148e <recibirmensaje+0xc6a>
		case 5:
			switch(decodeCIF){
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <recibirmensaje+0x2c0>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	f200 84f2 	bhi.w	8001480 <recibirmensaje+0xc5c>
 8000a9c:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <recibirmensaje+0x280>)
 8000a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa2:	bf00      	nop
 8000aa4:	08000ae9 	.word	0x08000ae9
 8000aa8:	08000b55 	.word	0x08000b55
 8000aac:	08000b99 	.word	0x08000b99
 8000ab0:	08000beb 	.word	0x08000beb
 8000ab4:	20000505 	.word	0x20000505
 8000ab8:	200004fe 	.word	0x200004fe
 8000abc:	200001ec 	.word	0x200001ec
 8000ac0:	20000502 	.word	0x20000502
 8000ac4:	08006bb4 	.word	0x08006bb4
 8000ac8:	20000554 	.word	0x20000554
 8000acc:	2000050a 	.word	0x2000050a
 8000ad0:	200004fd 	.word	0x200004fd
 8000ad4:	08006bcc 	.word	0x08006bcc
 8000ad8:	08006bf0 	.word	0x08006bf0
 8000adc:	08006c2c 	.word	0x08006c2c
 8000ae0:	08006ca0 	.word	0x08006ca0
 8000ae4:	20000507 	.word	0x20000507
			case 0:
				if(buf_rx[indRX_R]==CIFSR[coincidencias]){
 8000ae8:	4b9b      	ldr	r3, [pc, #620]	; (8000d58 <recibirmensaje+0x534>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b9a      	ldr	r3, [pc, #616]	; (8000d5c <recibirmensaje+0x538>)
 8000af2:	5c9b      	ldrb	r3, [r3, r2]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b9a      	ldr	r3, [pc, #616]	; (8000d60 <recibirmensaje+0x53c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4b99      	ldr	r3, [pc, #612]	; (8000d64 <recibirmensaje+0x540>)
 8000afe:	5c5b      	ldrb	r3, [r3, r1]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d114      	bne.n	8000b2e <recibirmensaje+0x30a>
					coincidencias++;
 8000b04:	4b96      	ldr	r3, [pc, #600]	; (8000d60 <recibirmensaje+0x53c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b94      	ldr	r3, [pc, #592]	; (8000d60 <recibirmensaje+0x53c>)
 8000b0e:	701a      	strb	r2, [r3, #0]

					if(coincidencias>8){
 8000b10:	4b93      	ldr	r3, [pc, #588]	; (8000d60 <recibirmensaje+0x53c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b08      	cmp	r3, #8
 8000b16:	f240 8092 	bls.w	8000c3e <recibirmensaje+0x41a>
						coincidencias = 0;
 8000b1a:	4b91      	ldr	r3, [pc, #580]	; (8000d60 <recibirmensaje+0x53c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
						decodeCIF++;
 8000b20:	4b91      	ldr	r3, [pc, #580]	; (8000d68 <recibirmensaje+0x544>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b8f      	ldr	r3, [pc, #572]	; (8000d68 <recibirmensaje+0x544>)
 8000b2a:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
						readyToSend=1;
						break;
					}
				}
			break;
 8000b2c:	e087      	b.n	8000c3e <recibirmensaje+0x41a>
					if(!timeout2){
 8000b2e:	4b8f      	ldr	r3, [pc, #572]	; (8000d6c <recibirmensaje+0x548>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f040 8083 	bne.w	8000c3e <recibirmensaje+0x41a>
						indRX_R=indRX_W;
 8000b38:	4b8d      	ldr	r3, [pc, #564]	; (8000d70 <recibirmensaje+0x54c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b86      	ldr	r3, [pc, #536]	; (8000d58 <recibirmensaje+0x534>)
 8000b40:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
 8000b42:	4b87      	ldr	r3, [pc, #540]	; (8000d60 <recibirmensaje+0x53c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
						readyToSend=1;
 8000b48:	4a8a      	ldr	r2, [pc, #552]	; (8000d74 <recibirmensaje+0x550>)
 8000b4a:	7813      	ldrb	r3, [r2, #0]
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	7013      	strb	r3, [r2, #0]
						break;
 8000b52:	e07e      	b.n	8000c52 <recibirmensaje+0x42e>
			case 1:
				if(buf_rx[indRX_R]==CIFSR_STAIP[coincidencias]){
 8000b54:	4b80      	ldr	r3, [pc, #512]	; (8000d58 <recibirmensaje+0x534>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b7f      	ldr	r3, [pc, #508]	; (8000d5c <recibirmensaje+0x538>)
 8000b5e:	5c9b      	ldrb	r3, [r3, r2]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b7f      	ldr	r3, [pc, #508]	; (8000d60 <recibirmensaje+0x53c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4619      	mov	r1, r3
 8000b68:	4b83      	ldr	r3, [pc, #524]	; (8000d78 <recibirmensaje+0x554>)
 8000b6a:	5c5b      	ldrb	r3, [r3, r1]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d169      	bne.n	8000c44 <recibirmensaje+0x420>
					coincidencias++;
 8000b70:	4b7b      	ldr	r3, [pc, #492]	; (8000d60 <recibirmensaje+0x53c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b79      	ldr	r3, [pc, #484]	; (8000d60 <recibirmensaje+0x53c>)
 8000b7a:	701a      	strb	r2, [r3, #0]

					if(coincidencias>10){
 8000b7c:	4b78      	ldr	r3, [pc, #480]	; (8000d60 <recibirmensaje+0x53c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b0a      	cmp	r3, #10
 8000b82:	d95f      	bls.n	8000c44 <recibirmensaje+0x420>
						coincidencias = 0;
 8000b84:	4b76      	ldr	r3, [pc, #472]	; (8000d60 <recibirmensaje+0x53c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
						decodeCIF++;
 8000b8a:	4b77      	ldr	r3, [pc, #476]	; (8000d68 <recibirmensaje+0x544>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b75      	ldr	r3, [pc, #468]	; (8000d68 <recibirmensaje+0x544>)
 8000b94:	701a      	strb	r2, [r3, #0]
						//AT++;
						//readyToSend = 1;
					}
				}
			break;
 8000b96:	e055      	b.n	8000c44 <recibirmensaje+0x420>
			case 2:
				espIP[coincidencias]=buf_rx[indRX_R];
 8000b98:	4b6f      	ldr	r3, [pc, #444]	; (8000d58 <recibirmensaje+0x534>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4b6f      	ldr	r3, [pc, #444]	; (8000d60 <recibirmensaje+0x53c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b6d      	ldr	r3, [pc, #436]	; (8000d5c <recibirmensaje+0x538>)
 8000ba8:	5c5b      	ldrb	r3, [r3, r1]
 8000baa:	b2d9      	uxtb	r1, r3
 8000bac:	4b73      	ldr	r3, [pc, #460]	; (8000d7c <recibirmensaje+0x558>)
 8000bae:	5499      	strb	r1, [r3, r2]
				coincidencias++;
 8000bb0:	4b6b      	ldr	r3, [pc, #428]	; (8000d60 <recibirmensaje+0x53c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <recibirmensaje+0x53c>)
 8000bba:	701a      	strb	r2, [r3, #0]
				if((buf_rx[indRX_R]=='"')&&(largoIP>1)){
 8000bbc:	4b66      	ldr	r3, [pc, #408]	; (8000d58 <recibirmensaje+0x534>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b65      	ldr	r3, [pc, #404]	; (8000d5c <recibirmensaje+0x538>)
 8000bc6:	5c9b      	ldrb	r3, [r3, r2]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b22      	cmp	r3, #34	; 0x22
 8000bcc:	d13d      	bne.n	8000c4a <recibirmensaje+0x426>
 8000bce:	4b6c      	ldr	r3, [pc, #432]	; (8000d80 <recibirmensaje+0x55c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d939      	bls.n	8000c4a <recibirmensaje+0x426>
					coincidencias=0;
 8000bd6:	4b62      	ldr	r3, [pc, #392]	; (8000d60 <recibirmensaje+0x53c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
					decodeCIF++;
 8000bdc:	4b62      	ldr	r3, [pc, #392]	; (8000d68 <recibirmensaje+0x544>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b60      	ldr	r3, [pc, #384]	; (8000d68 <recibirmensaje+0x544>)
 8000be6:	701a      	strb	r2, [r3, #0]
				}
			break;
 8000be8:	e02f      	b.n	8000c4a <recibirmensaje+0x426>
			case 3:
				if(buf_rx[indRX_R]==OK[coincidencias]){
 8000bea:	4b5b      	ldr	r3, [pc, #364]	; (8000d58 <recibirmensaje+0x534>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b5a      	ldr	r3, [pc, #360]	; (8000d5c <recibirmensaje+0x538>)
 8000bf4:	5c9b      	ldrb	r3, [r3, r2]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b59      	ldr	r3, [pc, #356]	; (8000d60 <recibirmensaje+0x53c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4b61      	ldr	r3, [pc, #388]	; (8000d84 <recibirmensaje+0x560>)
 8000c00:	5c5b      	ldrb	r3, [r3, r1]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d124      	bne.n	8000c50 <recibirmensaje+0x42c>
					coincidencias++;
 8000c06:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <recibirmensaje+0x53c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b54      	ldr	r3, [pc, #336]	; (8000d60 <recibirmensaje+0x53c>)
 8000c10:	701a      	strb	r2, [r3, #0]

					if(coincidencias>4){
 8000c12:	4b53      	ldr	r3, [pc, #332]	; (8000d60 <recibirmensaje+0x53c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d91a      	bls.n	8000c50 <recibirmensaje+0x42c>
						coincidencias = 0;
 8000c1a:	4b51      	ldr	r3, [pc, #324]	; (8000d60 <recibirmensaje+0x53c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
						decodeCIF=0;
 8000c20:	4b51      	ldr	r3, [pc, #324]	; (8000d68 <recibirmensaje+0x544>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
						AT++;
 8000c26:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <recibirmensaje+0x564>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <recibirmensaje+0x564>)
 8000c30:	701a      	strb	r2, [r3, #0]
						readyToSend = 1;
 8000c32:	4a50      	ldr	r2, [pc, #320]	; (8000d74 <recibirmensaje+0x550>)
 8000c34:	7813      	ldrb	r3, [r2, #0]
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	7013      	strb	r3, [r2, #0]
					}
				}
			break;
 8000c3c:	e008      	b.n	8000c50 <recibirmensaje+0x42c>
			break;
 8000c3e:	bf00      	nop
 8000c40:	f000 bc1e 	b.w	8001480 <recibirmensaje+0xc5c>
			break;
 8000c44:	bf00      	nop
 8000c46:	f000 bc1b 	b.w	8001480 <recibirmensaje+0xc5c>
			break;
 8000c4a:	bf00      	nop
 8000c4c:	f000 bc18 	b.w	8001480 <recibirmensaje+0xc5c>
			break;
 8000c50:	bf00      	nop
			}
		break;
 8000c52:	f000 bc15 	b.w	8001480 <recibirmensaje+0xc5c>
		case 6:
			if(buf_rx[indRX_R]==ANS_CIPSTART[coincidencias]){
 8000c56:	4b40      	ldr	r3, [pc, #256]	; (8000d58 <recibirmensaje+0x534>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <recibirmensaje+0x538>)
 8000c60:	5c9b      	ldrb	r3, [r3, r2]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <recibirmensaje+0x53c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4b48      	ldr	r3, [pc, #288]	; (8000d8c <recibirmensaje+0x568>)
 8000c6c:	5c5b      	ldrb	r3, [r3, r1]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d122      	bne.n	8000cb8 <recibirmensaje+0x494>
				coincidencias++;
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <recibirmensaje+0x53c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <recibirmensaje+0x53c>)
 8000c7c:	701a      	strb	r2, [r3, #0]

				if(coincidencias>44){
 8000c7e:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <recibirmensaje+0x53c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b2c      	cmp	r3, #44	; 0x2c
 8000c84:	f240 83fe 	bls.w	8001484 <recibirmensaje+0xc60>
					coincidencias = 0;
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <recibirmensaje+0x53c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
					coincidencias2 = 0;
 8000c8e:	4b40      	ldr	r3, [pc, #256]	; (8000d90 <recibirmensaje+0x56c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
					AT=8;
 8000c94:	4b3c      	ldr	r3, [pc, #240]	; (8000d88 <recibirmensaje+0x564>)
 8000c96:	2208      	movs	r2, #8
 8000c98:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000c9a:	4a36      	ldr	r2, [pc, #216]	; (8000d74 <recibirmensaje+0x550>)
 8000c9c:	7813      	ldrb	r3, [r2, #0]
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	7013      	strb	r3, [r2, #0]
					espConnected=1;
 8000ca4:	4a3b      	ldr	r2, [pc, #236]	; (8000d94 <recibirmensaje+0x570>)
 8000ca6:	7813      	ldrb	r3, [r2, #0]
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cae:	2120      	movs	r1, #32
 8000cb0:	4839      	ldr	r0, [pc, #228]	; (8000d98 <recibirmensaje+0x574>)
 8000cb2:	f003 fae8 	bl	8004286 <HAL_GPIO_TogglePin>
						readyToSend=1;
						break;
					}
				}

		break;
 8000cb6:	e3e5      	b.n	8001484 <recibirmensaje+0xc60>
					if(!timeout2){
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <recibirmensaje+0x548>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 83e1 	bne.w	8001484 <recibirmensaje+0xc60>
						indRX_R=indRX_W;
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <recibirmensaje+0x54c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <recibirmensaje+0x534>)
 8000cca:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <recibirmensaje+0x53c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
						readyToSend=1;
 8000cd2:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <recibirmensaje+0x550>)
 8000cd4:	7813      	ldrb	r3, [r2, #0]
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	7013      	strb	r3, [r2, #0]
						break;
 8000cdc:	e3d7      	b.n	800148e <recibirmensaje+0xc6a>
		case 7:
			switch(decoCIPSEND){
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <recibirmensaje+0x578>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b07      	cmp	r3, #7
 8000ce4:	f200 83d0 	bhi.w	8001488 <recibirmensaje+0xc64>
 8000ce8:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <recibirmensaje+0x4cc>)
 8000cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cee:	bf00      	nop
 8000cf0:	08000d11 	.word	0x08000d11
 8000cf4:	08000de5 	.word	0x08000de5
 8000cf8:	08000e6d 	.word	0x08000e6d
 8000cfc:	08000e9f 	.word	0x08000e9f
 8000d00:	08000f3f 	.word	0x08000f3f
 8000d04:	08000fcb 	.word	0x08000fcb
 8000d08:	080010ab 	.word	0x080010ab
 8000d0c:	0800111f 	.word	0x0800111f
				case 0:
					if(buf_rx[indRX_R]==CIPSEND[coincidencias]){
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <recibirmensaje+0x534>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <recibirmensaje+0x538>)
 8000d1a:	5c9b      	ldrb	r3, [r3, r2]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <recibirmensaje+0x53c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <recibirmensaje+0x57c>)
 8000d26:	5c5b      	ldrb	r3, [r3, r1]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d13b      	bne.n	8000da4 <recibirmensaje+0x580>
						coincidencias++;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <recibirmensaje+0x53c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <recibirmensaje+0x53c>)
 8000d36:	701a      	strb	r2, [r3, #0]

						if(coincidencias>9){
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <recibirmensaje+0x53c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b09      	cmp	r3, #9
 8000d3e:	f240 823c 	bls.w	80011ba <recibirmensaje+0x996>
							coincidencias = 0;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <recibirmensaje+0x53c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <recibirmensaje+0x578>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <recibirmensaje+0x578>)
 8000d52:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8000d54:	e231      	b.n	80011ba <recibirmensaje+0x996>
 8000d56:	bf00      	nop
 8000d58:	200004fe 	.word	0x200004fe
 8000d5c:	200001ec 	.word	0x200001ec
 8000d60:	20000502 	.word	0x20000502
 8000d64:	08006c74 	.word	0x08006c74
 8000d68:	20000507 	.word	0x20000507
 8000d6c:	2000050a 	.word	0x2000050a
 8000d70:	200004fd 	.word	0x200004fd
 8000d74:	20000554 	.word	0x20000554
 8000d78:	08006c80 	.word	0x08006c80
 8000d7c:	200004ec 	.word	0x200004ec
 8000d80:	2000050d 	.word	0x2000050d
 8000d84:	08006d48 	.word	0x08006d48
 8000d88:	20000505 	.word	0x20000505
 8000d8c:	08006ce4 	.word	0x08006ce4
 8000d90:	20000503 	.word	0x20000503
 8000d94:	20000558 	.word	0x20000558
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	20000506 	.word	0x20000506
 8000da0:	08006d14 	.word	0x08006d14
						if(!timeout2){
 8000da4:	4ba1      	ldr	r3, [pc, #644]	; (800102c <recibirmensaje+0x808>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f040 8206 	bne.w	80011ba <recibirmensaje+0x996>
							indRX_R=indRX_W;
 8000dae:	4ba0      	ldr	r3, [pc, #640]	; (8001030 <recibirmensaje+0x80c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b9f      	ldr	r3, [pc, #636]	; (8001034 <recibirmensaje+0x810>)
 8000db6:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8000db8:	4b9f      	ldr	r3, [pc, #636]	; (8001038 <recibirmensaje+0x814>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000dbe:	4a9f      	ldr	r2, [pc, #636]	; (800103c <recibirmensaje+0x818>)
 8000dc0:	7813      	ldrb	r3, [r2, #0]
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8000dc8:	4a9c      	ldr	r2, [pc, #624]	; (800103c <recibirmensaje+0x818>)
 8000dca:	7813      	ldrb	r3, [r2, #0]
 8000dcc:	f36f 1345 	bfc	r3, #5, #1
 8000dd0:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8000dd2:	4a9b      	ldr	r2, [pc, #620]	; (8001040 <recibirmensaje+0x81c>)
 8000dd4:	7813      	ldrb	r3, [r2, #0]
 8000dd6:	f36f 0341 	bfc	r3, #1, #1
 8000dda:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8000ddc:	4b99      	ldr	r3, [pc, #612]	; (8001044 <recibirmensaje+0x820>)
 8000dde:	221e      	movs	r2, #30
 8000de0:	701a      	strb	r2, [r3, #0]
							break;
 8000de2:	e1f9      	b.n	80011d8 <recibirmensaje+0x9b4>
				case 1:
					if((buf_rx[indRX_R]==bytesToSend+'0')&&((bytesToSend<10))){//reviso q sean menos de 10 bytes
 8000de4:	4b93      	ldr	r3, [pc, #588]	; (8001034 <recibirmensaje+0x810>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b96      	ldr	r3, [pc, #600]	; (8001048 <recibirmensaje+0x824>)
 8000dee:	5c9b      	ldrb	r3, [r3, r2]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b95      	ldr	r3, [pc, #596]	; (800104c <recibirmensaje+0x828>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3330      	adds	r3, #48	; 0x30
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d10a      	bne.n	8000e14 <recibirmensaje+0x5f0>
 8000dfe:	4b93      	ldr	r3, [pc, #588]	; (800104c <recibirmensaje+0x828>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b09      	cmp	r3, #9
 8000e04:	d806      	bhi.n	8000e14 <recibirmensaje+0x5f0>
						decoCIPSEND+=2;
 8000e06:	4b92      	ldr	r3, [pc, #584]	; (8001050 <recibirmensaje+0x82c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b90      	ldr	r3, [pc, #576]	; (8001050 <recibirmensaje+0x82c>)
 8000e10:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
							bytesToSend_aux=bytesToSend/10;
							bytesToSend_aux*=10;
						}
					}
				break;
 8000e12:	e1d4      	b.n	80011be <recibirmensaje+0x99a>
						if(buf_rx[indRX_R]==bytesToSend/10+'0'){
 8000e14:	4b87      	ldr	r3, [pc, #540]	; (8001034 <recibirmensaje+0x810>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b8a      	ldr	r3, [pc, #552]	; (8001048 <recibirmensaje+0x824>)
 8000e1e:	5c9b      	ldrb	r3, [r3, r2]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	4b89      	ldr	r3, [pc, #548]	; (800104c <recibirmensaje+0x828>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4a8a      	ldr	r2, [pc, #552]	; (8001054 <recibirmensaje+0x830>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	3330      	adds	r3, #48	; 0x30
 8000e34:	4299      	cmp	r1, r3
 8000e36:	f040 81c2 	bne.w	80011be <recibirmensaje+0x99a>
							decoCIPSEND++;
 8000e3a:	4b85      	ldr	r3, [pc, #532]	; (8001050 <recibirmensaje+0x82c>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b83      	ldr	r3, [pc, #524]	; (8001050 <recibirmensaje+0x82c>)
 8000e44:	701a      	strb	r2, [r3, #0]
							bytesToSend_aux=bytesToSend/10;
 8000e46:	4b81      	ldr	r3, [pc, #516]	; (800104c <recibirmensaje+0x828>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4a82      	ldr	r2, [pc, #520]	; (8001054 <recibirmensaje+0x830>)
 8000e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b80      	ldr	r3, [pc, #512]	; (8001058 <recibirmensaje+0x834>)
 8000e56:	701a      	strb	r2, [r3, #0]
							bytesToSend_aux*=10;
 8000e58:	4b7f      	ldr	r3, [pc, #508]	; (8001058 <recibirmensaje+0x834>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b7c      	ldr	r3, [pc, #496]	; (8001058 <recibirmensaje+0x834>)
 8000e68:	701a      	strb	r2, [r3, #0]
				break;
 8000e6a:	e1a8      	b.n	80011be <recibirmensaje+0x99a>
				case 2:
					if(buf_rx[indRX_R]==bytesToSend-bytesToSend_aux+'0'){
 8000e6c:	4b71      	ldr	r3, [pc, #452]	; (8001034 <recibirmensaje+0x810>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b74      	ldr	r3, [pc, #464]	; (8001048 <recibirmensaje+0x824>)
 8000e76:	5c9b      	ldrb	r3, [r3, r2]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b73      	ldr	r3, [pc, #460]	; (800104c <recibirmensaje+0x828>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	4b75      	ldr	r3, [pc, #468]	; (8001058 <recibirmensaje+0x834>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	1acb      	subs	r3, r1, r3
 8000e88:	3330      	adds	r3, #48	; 0x30
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f040 8199 	bne.w	80011c2 <recibirmensaje+0x99e>
						decoCIPSEND++;
 8000e90:	4b6f      	ldr	r3, [pc, #444]	; (8001050 <recibirmensaje+0x82c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b6d      	ldr	r3, [pc, #436]	; (8001050 <recibirmensaje+0x82c>)
 8000e9a:	701a      	strb	r2, [r3, #0]
					}
				break;
 8000e9c:	e191      	b.n	80011c2 <recibirmensaje+0x99e>
				case 3:
					if(buf_rx[indRX_R]==CIPSEND2[coincidencias]){
 8000e9e:	4b65      	ldr	r3, [pc, #404]	; (8001034 <recibirmensaje+0x810>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b68      	ldr	r3, [pc, #416]	; (8001048 <recibirmensaje+0x824>)
 8000ea8:	5c9b      	ldrb	r3, [r3, r2]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b62      	ldr	r3, [pc, #392]	; (8001038 <recibirmensaje+0x814>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4b6a      	ldr	r3, [pc, #424]	; (800105c <recibirmensaje+0x838>)
 8000eb4:	5c5b      	ldrb	r3, [r3, r1]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d11e      	bne.n	8000ef8 <recibirmensaje+0x6d4>
						coincidencias++;
 8000eba:	4b5f      	ldr	r3, [pc, #380]	; (8001038 <recibirmensaje+0x814>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b5d      	ldr	r3, [pc, #372]	; (8001038 <recibirmensaje+0x814>)
 8000ec4:	701a      	strb	r2, [r3, #0]

						if(coincidencias>7){
 8000ec6:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <recibirmensaje+0x814>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b07      	cmp	r3, #7
 8000ecc:	f240 817b 	bls.w	80011c6 <recibirmensaje+0x9a2>
							coincidencias = 0;
 8000ed0:	4b59      	ldr	r3, [pc, #356]	; (8001038 <recibirmensaje+0x814>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8000ed6:	4b5e      	ldr	r3, [pc, #376]	; (8001050 <recibirmensaje+0x82c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b5c      	ldr	r3, [pc, #368]	; (8001050 <recibirmensaje+0x82c>)
 8000ee0:	701a      	strb	r2, [r3, #0]
							//AT++;
							readyToSend = 1;
 8000ee2:	4a56      	ldr	r2, [pc, #344]	; (800103c <recibirmensaje+0x818>)
 8000ee4:	7813      	ldrb	r3, [r2, #0]
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=1;
 8000eec:	4a53      	ldr	r2, [pc, #332]	; (800103c <recibirmensaje+0x818>)
 8000eee:	7813      	ldrb	r3, [r2, #0]
 8000ef0:	f043 0320 	orr.w	r3, r3, #32
 8000ef4:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8000ef6:	e166      	b.n	80011c6 <recibirmensaje+0x9a2>
						if(!timeout2){
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	; (800102c <recibirmensaje+0x808>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f040 8162 	bne.w	80011c6 <recibirmensaje+0x9a2>
							decoCIPSEND=0;
 8000f02:	4b53      	ldr	r3, [pc, #332]	; (8001050 <recibirmensaje+0x82c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8000f08:	4b49      	ldr	r3, [pc, #292]	; (8001030 <recibirmensaje+0x80c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b49      	ldr	r3, [pc, #292]	; (8001034 <recibirmensaje+0x810>)
 8000f10:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8000f12:	4b49      	ldr	r3, [pc, #292]	; (8001038 <recibirmensaje+0x814>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000f18:	4a48      	ldr	r2, [pc, #288]	; (800103c <recibirmensaje+0x818>)
 8000f1a:	7813      	ldrb	r3, [r2, #0]
 8000f1c:	f043 0310 	orr.w	r3, r3, #16
 8000f20:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8000f22:	4a46      	ldr	r2, [pc, #280]	; (800103c <recibirmensaje+0x818>)
 8000f24:	7813      	ldrb	r3, [r2, #0]
 8000f26:	f36f 1345 	bfc	r3, #5, #1
 8000f2a:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8000f2c:	4a44      	ldr	r2, [pc, #272]	; (8001040 <recibirmensaje+0x81c>)
 8000f2e:	7813      	ldrb	r3, [r2, #0]
 8000f30:	f36f 0341 	bfc	r3, #1, #1
 8000f34:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8000f36:	4b43      	ldr	r3, [pc, #268]	; (8001044 <recibirmensaje+0x820>)
 8000f38:	221e      	movs	r2, #30
 8000f3a:	701a      	strb	r2, [r3, #0]
							break;
 8000f3c:	e14c      	b.n	80011d8 <recibirmensaje+0x9b4>
				case 4:
					if(buf_rx[indRX_R]==CIPSEND3[coincidencias]){
 8000f3e:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <recibirmensaje+0x810>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b40      	ldr	r3, [pc, #256]	; (8001048 <recibirmensaje+0x824>)
 8000f48:	5c9b      	ldrb	r3, [r3, r2]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <recibirmensaje+0x814>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	4b43      	ldr	r3, [pc, #268]	; (8001060 <recibirmensaje+0x83c>)
 8000f54:	5c5b      	ldrb	r3, [r3, r1]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d114      	bne.n	8000f84 <recibirmensaje+0x760>
						coincidencias++;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <recibirmensaje+0x814>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b35      	ldr	r3, [pc, #212]	; (8001038 <recibirmensaje+0x814>)
 8000f64:	701a      	strb	r2, [r3, #0]

						if(coincidencias>3){
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <recibirmensaje+0x814>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	f240 812d 	bls.w	80011ca <recibirmensaje+0x9a6>
							coincidencias = 0;
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <recibirmensaje+0x814>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8000f76:	4b36      	ldr	r3, [pc, #216]	; (8001050 <recibirmensaje+0x82c>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b34      	ldr	r3, [pc, #208]	; (8001050 <recibirmensaje+0x82c>)
 8000f80:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8000f82:	e122      	b.n	80011ca <recibirmensaje+0x9a6>
						if(!timeout2){
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <recibirmensaje+0x808>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f040 811e 	bne.w	80011ca <recibirmensaje+0x9a6>
							decoCIPSEND=0;
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <recibirmensaje+0x82c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <recibirmensaje+0x80c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <recibirmensaje+0x810>)
 8000f9c:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <recibirmensaje+0x814>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000fa4:	4a25      	ldr	r2, [pc, #148]	; (800103c <recibirmensaje+0x818>)
 8000fa6:	7813      	ldrb	r3, [r2, #0]
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <recibirmensaje+0x818>)
 8000fb0:	7813      	ldrb	r3, [r2, #0]
 8000fb2:	f36f 1345 	bfc	r3, #5, #1
 8000fb6:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8000fb8:	4a21      	ldr	r2, [pc, #132]	; (8001040 <recibirmensaje+0x81c>)
 8000fba:	7813      	ldrb	r3, [r2, #0]
 8000fbc:	f36f 0341 	bfc	r3, #1, #1
 8000fc0:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <recibirmensaje+0x820>)
 8000fc4:	221e      	movs	r2, #30
 8000fc6:	701a      	strb	r2, [r3, #0]
							break;
 8000fc8:	e106      	b.n	80011d8 <recibirmensaje+0x9b4>
				case 5:
					if((buf_rx[indRX_R]==bytesToSend+'0')&&((bytesToSend<10))){//reviso q sean menos de 10 bytes
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <recibirmensaje+0x810>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <recibirmensaje+0x824>)
 8000fd4:	5c9b      	ldrb	r3, [r3, r2]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <recibirmensaje+0x828>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	3330      	adds	r3, #48	; 0x30
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d10a      	bne.n	8000ffa <recibirmensaje+0x7d6>
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <recibirmensaje+0x828>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	d806      	bhi.n	8000ffa <recibirmensaje+0x7d6>
						decoCIPSEND+=2;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <recibirmensaje+0x82c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <recibirmensaje+0x82c>)
 8000ff6:	701a      	strb	r2, [r3, #0]
								timeToSendAlive=30;
								break;
							}
						}
					}
				break;
 8000ff8:	e0e9      	b.n	80011ce <recibirmensaje+0x9aa>
						if(buf_rx[indRX_R]==bytesToSend/10+'0'){
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <recibirmensaje+0x810>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <recibirmensaje+0x824>)
 8001004:	5c9b      	ldrb	r3, [r3, r2]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <recibirmensaje+0x828>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4a11      	ldr	r2, [pc, #68]	; (8001054 <recibirmensaje+0x830>)
 8001010:	fba2 2303 	umull	r2, r3, r2, r3
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	3330      	adds	r3, #48	; 0x30
 800101a:	4299      	cmp	r1, r3
 800101c:	d122      	bne.n	8001064 <recibirmensaje+0x840>
							decoCIPSEND++;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <recibirmensaje+0x82c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <recibirmensaje+0x82c>)
 8001028:	701a      	strb	r2, [r3, #0]
				break;
 800102a:	e0d0      	b.n	80011ce <recibirmensaje+0x9aa>
 800102c:	2000050a 	.word	0x2000050a
 8001030:	200004fd 	.word	0x200004fd
 8001034:	200004fe 	.word	0x200004fe
 8001038:	20000502 	.word	0x20000502
 800103c:	20000554 	.word	0x20000554
 8001040:	20000558 	.word	0x20000558
 8001044:	20000510 	.word	0x20000510
 8001048:	200001ec 	.word	0x200001ec
 800104c:	2000050e 	.word	0x2000050e
 8001050:	20000506 	.word	0x20000506
 8001054:	cccccccd 	.word	0xcccccccd
 8001058:	2000050f 	.word	0x2000050f
 800105c:	08006d20 	.word	0x08006d20
 8001060:	08006d2c 	.word	0x08006d2c
							if(!timeout2){
 8001064:	4ba4      	ldr	r3, [pc, #656]	; (80012f8 <recibirmensaje+0xad4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	f040 80b0 	bne.w	80011ce <recibirmensaje+0x9aa>
								decoCIPSEND=0;
 800106e:	4ba3      	ldr	r3, [pc, #652]	; (80012fc <recibirmensaje+0xad8>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
								indRX_R=indRX_W;
 8001074:	4ba2      	ldr	r3, [pc, #648]	; (8001300 <recibirmensaje+0xadc>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4ba2      	ldr	r3, [pc, #648]	; (8001304 <recibirmensaje+0xae0>)
 800107c:	701a      	strb	r2, [r3, #0]
								coincidencias = 0;
 800107e:	4ba2      	ldr	r3, [pc, #648]	; (8001308 <recibirmensaje+0xae4>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
								readyToSend=1;
 8001084:	4aa1      	ldr	r2, [pc, #644]	; (800130c <recibirmensaje+0xae8>)
 8001086:	7813      	ldrb	r3, [r2, #0]
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	7013      	strb	r3, [r2, #0]
								espReadyToRecieve=0;
 800108e:	4a9f      	ldr	r2, [pc, #636]	; (800130c <recibirmensaje+0xae8>)
 8001090:	7813      	ldrb	r3, [r2, #0]
 8001092:	f36f 1345 	bfc	r3, #5, #1
 8001096:	7013      	strb	r3, [r2, #0]
								sendALIVE=0;
 8001098:	4a9d      	ldr	r2, [pc, #628]	; (8001310 <recibirmensaje+0xaec>)
 800109a:	7813      	ldrb	r3, [r2, #0]
 800109c:	f36f 0341 	bfc	r3, #1, #1
 80010a0:	7013      	strb	r3, [r2, #0]
								timeToSendAlive=30;
 80010a2:	4b9c      	ldr	r3, [pc, #624]	; (8001314 <recibirmensaje+0xaf0>)
 80010a4:	221e      	movs	r2, #30
 80010a6:	701a      	strb	r2, [r3, #0]
								break;
 80010a8:	e096      	b.n	80011d8 <recibirmensaje+0x9b4>
				case 6:
					if(buf_rx[indRX_R]==bytesToSend-bytesToSend_aux+'0'){
 80010aa:	4b96      	ldr	r3, [pc, #600]	; (8001304 <recibirmensaje+0xae0>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b99      	ldr	r3, [pc, #612]	; (8001318 <recibirmensaje+0xaf4>)
 80010b4:	5c9b      	ldrb	r3, [r3, r2]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b98      	ldr	r3, [pc, #608]	; (800131c <recibirmensaje+0xaf8>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	4b97      	ldr	r3, [pc, #604]	; (8001320 <recibirmensaje+0xafc>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	1acb      	subs	r3, r1, r3
 80010c6:	3330      	adds	r3, #48	; 0x30
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d106      	bne.n	80010da <recibirmensaje+0x8b6>
						decoCIPSEND++;
 80010cc:	4b8b      	ldr	r3, [pc, #556]	; (80012fc <recibirmensaje+0xad8>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b89      	ldr	r3, [pc, #548]	; (80012fc <recibirmensaje+0xad8>)
 80010d6:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 80010d8:	e07b      	b.n	80011d2 <recibirmensaje+0x9ae>
						if(!timeout2){
 80010da:	4b87      	ldr	r3, [pc, #540]	; (80012f8 <recibirmensaje+0xad4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d177      	bne.n	80011d2 <recibirmensaje+0x9ae>
							decoCIPSEND=0;
 80010e2:	4b86      	ldr	r3, [pc, #536]	; (80012fc <recibirmensaje+0xad8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 80010e8:	4b85      	ldr	r3, [pc, #532]	; (8001300 <recibirmensaje+0xadc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b85      	ldr	r3, [pc, #532]	; (8001304 <recibirmensaje+0xae0>)
 80010f0:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 80010f2:	4b85      	ldr	r3, [pc, #532]	; (8001308 <recibirmensaje+0xae4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 80010f8:	4a84      	ldr	r2, [pc, #528]	; (800130c <recibirmensaje+0xae8>)
 80010fa:	7813      	ldrb	r3, [r2, #0]
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8001102:	4a82      	ldr	r2, [pc, #520]	; (800130c <recibirmensaje+0xae8>)
 8001104:	7813      	ldrb	r3, [r2, #0]
 8001106:	f36f 1345 	bfc	r3, #5, #1
 800110a:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 800110c:	4a80      	ldr	r2, [pc, #512]	; (8001310 <recibirmensaje+0xaec>)
 800110e:	7813      	ldrb	r3, [r2, #0]
 8001110:	f36f 0341 	bfc	r3, #1, #1
 8001114:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8001116:	4b7f      	ldr	r3, [pc, #508]	; (8001314 <recibirmensaje+0xaf0>)
 8001118:	221e      	movs	r2, #30
 800111a:	701a      	strb	r2, [r3, #0]
							break;
 800111c:	e05c      	b.n	80011d8 <recibirmensaje+0x9b4>
				case 7:
					if(buf_rx[indRX_R]==CIPSEND4[coincidencias]){
 800111e:	4b79      	ldr	r3, [pc, #484]	; (8001304 <recibirmensaje+0xae0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <recibirmensaje+0xaf4>)
 8001128:	5c9b      	ldrb	r3, [r3, r2]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b76      	ldr	r3, [pc, #472]	; (8001308 <recibirmensaje+0xae4>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	4b7c      	ldr	r3, [pc, #496]	; (8001324 <recibirmensaje+0xb00>)
 8001134:	5c5b      	ldrb	r3, [r3, r1]
 8001136:	429a      	cmp	r2, r3
 8001138:	d11d      	bne.n	8001176 <recibirmensaje+0x952>
						coincidencias++;
 800113a:	4b73      	ldr	r3, [pc, #460]	; (8001308 <recibirmensaje+0xae4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b71      	ldr	r3, [pc, #452]	; (8001308 <recibirmensaje+0xae4>)
 8001144:	701a      	strb	r2, [r3, #0]

						if(coincidencias>17){
 8001146:	4b70      	ldr	r3, [pc, #448]	; (8001308 <recibirmensaje+0xae4>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b11      	cmp	r3, #17
 800114c:	d943      	bls.n	80011d6 <recibirmensaje+0x9b2>
							coincidencias = 0;
 800114e:	4b6e      	ldr	r3, [pc, #440]	; (8001308 <recibirmensaje+0xae4>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
							decoCIPSEND=0;
 8001154:	4b69      	ldr	r3, [pc, #420]	; (80012fc <recibirmensaje+0xad8>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
							AT=8;
 800115a:	4b73      	ldr	r3, [pc, #460]	; (8001328 <recibirmensaje+0xb04>)
 800115c:	2208      	movs	r2, #8
 800115e:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8001160:	4a6a      	ldr	r2, [pc, #424]	; (800130c <recibirmensaje+0xae8>)
 8001162:	7813      	ldrb	r3, [r2, #0]
 8001164:	f043 0310 	orr.w	r3, r3, #16
 8001168:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 800116a:	4a68      	ldr	r2, [pc, #416]	; (800130c <recibirmensaje+0xae8>)
 800116c:	7813      	ldrb	r3, [r2, #0]
 800116e:	f36f 1345 	bfc	r3, #5, #1
 8001172:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8001174:	e02f      	b.n	80011d6 <recibirmensaje+0x9b2>
						if(!timeout2){
 8001176:	4b60      	ldr	r3, [pc, #384]	; (80012f8 <recibirmensaje+0xad4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d12b      	bne.n	80011d6 <recibirmensaje+0x9b2>
							decoCIPSEND=0;
 800117e:	4b5f      	ldr	r3, [pc, #380]	; (80012fc <recibirmensaje+0xad8>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8001184:	4b5e      	ldr	r3, [pc, #376]	; (8001300 <recibirmensaje+0xadc>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <recibirmensaje+0xae0>)
 800118c:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 800118e:	4b5e      	ldr	r3, [pc, #376]	; (8001308 <recibirmensaje+0xae4>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8001194:	4a5d      	ldr	r2, [pc, #372]	; (800130c <recibirmensaje+0xae8>)
 8001196:	7813      	ldrb	r3, [r2, #0]
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 800119e:	4a5b      	ldr	r2, [pc, #364]	; (800130c <recibirmensaje+0xae8>)
 80011a0:	7813      	ldrb	r3, [r2, #0]
 80011a2:	f36f 1345 	bfc	r3, #5, #1
 80011a6:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 80011a8:	4a59      	ldr	r2, [pc, #356]	; (8001310 <recibirmensaje+0xaec>)
 80011aa:	7813      	ldrb	r3, [r2, #0]
 80011ac:	f36f 0341 	bfc	r3, #1, #1
 80011b0:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 80011b2:	4b58      	ldr	r3, [pc, #352]	; (8001314 <recibirmensaje+0xaf0>)
 80011b4:	221e      	movs	r2, #30
 80011b6:	701a      	strb	r2, [r3, #0]
							break;
 80011b8:	e00e      	b.n	80011d8 <recibirmensaje+0x9b4>
				break;
 80011ba:	bf00      	nop
 80011bc:	e164      	b.n	8001488 <recibirmensaje+0xc64>
				break;
 80011be:	bf00      	nop
 80011c0:	e162      	b.n	8001488 <recibirmensaje+0xc64>
				break;
 80011c2:	bf00      	nop
 80011c4:	e160      	b.n	8001488 <recibirmensaje+0xc64>
				break;
 80011c6:	bf00      	nop
 80011c8:	e15e      	b.n	8001488 <recibirmensaje+0xc64>
				break;
 80011ca:	bf00      	nop
 80011cc:	e15c      	b.n	8001488 <recibirmensaje+0xc64>
				break;
 80011ce:	bf00      	nop
 80011d0:	e15a      	b.n	8001488 <recibirmensaje+0xc64>
				break;
 80011d2:	bf00      	nop
 80011d4:	e158      	b.n	8001488 <recibirmensaje+0xc64>
				break;
 80011d6:	bf00      	nop
			}
		break;
 80011d8:	e156      	b.n	8001488 <recibirmensaje+0xc64>
		case 8:
			switch(decoIPD){
 80011da:	4b54      	ldr	r3, [pc, #336]	; (800132c <recibirmensaje+0xb08>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b05      	cmp	r3, #5
 80011e0:	f200 8154 	bhi.w	800148c <recibirmensaje+0xc68>
 80011e4:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <recibirmensaje+0x9c8>)
 80011e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ea:	bf00      	nop
 80011ec:	08001205 	.word	0x08001205
 80011f0:	08001267 	.word	0x08001267
 80011f4:	08001289 	.word	0x08001289
 80011f8:	0800133d 	.word	0x0800133d
 80011fc:	08001377 	.word	0x08001377
 8001200:	080013c9 	.word	0x080013c9
				case 0:
					if(buf_rx[indRX_R]==IPD[coincidencias]){
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <recibirmensaje+0xae0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	4b42      	ldr	r3, [pc, #264]	; (8001318 <recibirmensaje+0xaf4>)
 800120e:	5c9b      	ldrb	r3, [r3, r2]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <recibirmensaje+0xae4>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	4b45      	ldr	r3, [pc, #276]	; (8001330 <recibirmensaje+0xb0c>)
 800121a:	5c5b      	ldrb	r3, [r3, r1]
 800121c:	429a      	cmp	r2, r3
 800121e:	d114      	bne.n	800124a <recibirmensaje+0xa26>
						coincidencias++;
 8001220:	4b39      	ldr	r3, [pc, #228]	; (8001308 <recibirmensaje+0xae4>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b37      	ldr	r3, [pc, #220]	; (8001308 <recibirmensaje+0xae4>)
 800122a:	701a      	strb	r2, [r3, #0]

						if(coincidencias>5){
 800122c:	4b36      	ldr	r3, [pc, #216]	; (8001308 <recibirmensaje+0xae4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b05      	cmp	r3, #5
 8001232:	f240 8115 	bls.w	8001460 <recibirmensaje+0xc3c>
							coincidencias = 0;
 8001236:	4b34      	ldr	r3, [pc, #208]	; (8001308 <recibirmensaje+0xae4>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
							decoIPD++;
 800123c:	4b3b      	ldr	r3, [pc, #236]	; (800132c <recibirmensaje+0xb08>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b39      	ldr	r3, [pc, #228]	; (800132c <recibirmensaje+0xb08>)
 8001246:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
							coincidencias=0;
							break;
						}
					}
				break;
 8001248:	e10a      	b.n	8001460 <recibirmensaje+0xc3c>
						if(coincidencias>0){
 800124a:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <recibirmensaje+0xae4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8106 	beq.w	8001460 <recibirmensaje+0xc3c>
							indRX_R=indRX_W;
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <recibirmensaje+0xadc>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <recibirmensaje+0xae0>)
 800125c:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <recibirmensaje+0xae4>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
							break;
 8001264:	e101      	b.n	800146a <recibirmensaje+0xc46>
				case 1:
					if(buf_rx[indRX_R]==':'){
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <recibirmensaje+0xae0>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <recibirmensaje+0xaf4>)
 8001270:	5c9b      	ldrb	r3, [r3, r2]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b3a      	cmp	r3, #58	; 0x3a
 8001276:	f040 80f5 	bne.w	8001464 <recibirmensaje+0xc40>
						decoIPD++;
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <recibirmensaje+0xb08>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <recibirmensaje+0xb08>)
 8001284:	701a      	strb	r2, [r3, #0]
					}
				break;
 8001286:	e0ed      	b.n	8001464 <recibirmensaje+0xc40>
				case 2:
					if(buf_rx[indRX_R]==UNER[coincidencias]){
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <recibirmensaje+0xae0>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	461a      	mov	r2, r3
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <recibirmensaje+0xaf4>)
 8001292:	5c9b      	ldrb	r3, [r3, r2]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <recibirmensaje+0xae4>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4619      	mov	r1, r3
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <recibirmensaje+0xb10>)
 800129e:	5c5b      	ldrb	r3, [r3, r1]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d117      	bne.n	80012d4 <recibirmensaje+0xab0>
						coincidencias++;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <recibirmensaje+0xae4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <recibirmensaje+0xae4>)
 80012ae:	701a      	strb	r2, [r3, #0]

						if(coincidencias>3){
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <recibirmensaje+0xae4>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	f240 80d7 	bls.w	8001468 <recibirmensaje+0xc44>
							coincidencias = 0;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <recibirmensaje+0xae4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
							decoIPD++;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <recibirmensaje+0xb08>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <recibirmensaje+0xb08>)
 80012ca:	701a      	strb	r2, [r3, #0]
							cks='U'^'N'^'E'^'R';
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <recibirmensaje+0xb14>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
							decoIPD=0;
							break;
						}
					}
				break;
 80012d2:	e0c9      	b.n	8001468 <recibirmensaje+0xc44>
						if(coincidencias>0){
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <recibirmensaje+0xae4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80c5 	beq.w	8001468 <recibirmensaje+0xc44>
							indRX_R=indRX_W;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <recibirmensaje+0xadc>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <recibirmensaje+0xae0>)
 80012e6:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <recibirmensaje+0xae4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <recibirmensaje+0xb08>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
							break;
 80012f4:	e0b9      	b.n	800146a <recibirmensaje+0xc46>
 80012f6:	bf00      	nop
 80012f8:	2000050a 	.word	0x2000050a
 80012fc:	20000506 	.word	0x20000506
 8001300:	200004fd 	.word	0x200004fd
 8001304:	200004fe 	.word	0x200004fe
 8001308:	20000502 	.word	0x20000502
 800130c:	20000554 	.word	0x20000554
 8001310:	20000558 	.word	0x20000558
 8001314:	20000510 	.word	0x20000510
 8001318:	200001ec 	.word	0x200001ec
 800131c:	2000050e 	.word	0x2000050e
 8001320:	2000050f 	.word	0x2000050f
 8001324:	08006d34 	.word	0x08006d34
 8001328:	20000505 	.word	0x20000505
 800132c:	20000508 	.word	0x20000508
 8001330:	08006d50 	.word	0x08006d50
 8001334:	08006d58 	.word	0x08006d58
 8001338:	20000511 	.word	0x20000511
				case 3:
					bytesUNERprotocol=buf_rx[indRX_R];
 800133c:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <recibirmensaje+0xc7c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	4b57      	ldr	r3, [pc, #348]	; (80014a4 <recibirmensaje+0xc80>)
 8001346:	5c9b      	ldrb	r3, [r3, r2]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b57      	ldr	r3, [pc, #348]	; (80014a8 <recibirmensaje+0xc84>)
 800134c:	701a      	strb	r2, [r3, #0]
					decoIPD++;
 800134e:	4b57      	ldr	r3, [pc, #348]	; (80014ac <recibirmensaje+0xc88>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b55      	ldr	r3, [pc, #340]	; (80014ac <recibirmensaje+0xc88>)
 8001358:	701a      	strb	r2, [r3, #0]
					cks^=buf_rx[indRX_R];
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <recibirmensaje+0xc7c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <recibirmensaje+0xc80>)
 8001364:	5c9b      	ldrb	r3, [r3, r2]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <recibirmensaje+0xc8c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4053      	eors	r3, r2
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <recibirmensaje+0xc8c>)
 8001372:	701a      	strb	r2, [r3, #0]
				break;
 8001374:	e079      	b.n	800146a <recibirmensaje+0xc46>
				case 4:
					if(buf_rx[indRX_R]==':'){
 8001376:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <recibirmensaje+0xc7c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <recibirmensaje+0xc80>)
 8001380:	5c9b      	ldrb	r3, [r3, r2]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b3a      	cmp	r3, #58	; 0x3a
 8001386:	d113      	bne.n	80013b0 <recibirmensaje+0xb8c>
						decoIPD++;
 8001388:	4b48      	ldr	r3, [pc, #288]	; (80014ac <recibirmensaje+0xc88>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b46      	ldr	r3, [pc, #280]	; (80014ac <recibirmensaje+0xc88>)
 8001392:	701a      	strb	r2, [r3, #0]
						cks^=buf_rx[indRX_R];
 8001394:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <recibirmensaje+0xc7c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <recibirmensaje+0xc80>)
 800139e:	5c9b      	ldrb	r3, [r3, r2]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <recibirmensaje+0xc8c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4053      	eors	r3, r2
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <recibirmensaje+0xc8c>)
 80013ac:	701a      	strb	r2, [r3, #0]
						indRX_R=indRX_W;
						coincidencias=0;
						decoIPD=0;
						break;
					}
				break;
 80013ae:	e05c      	b.n	800146a <recibirmensaje+0xc46>
						indRX_R=indRX_W;
 80013b0:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <recibirmensaje+0xc90>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <recibirmensaje+0xc7c>)
 80013b8:	701a      	strb	r2, [r3, #0]
						coincidencias=0;
 80013ba:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <recibirmensaje+0xc94>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
						decoIPD=0;
 80013c0:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <recibirmensaje+0xc88>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
						break;
 80013c6:	e050      	b.n	800146a <recibirmensaje+0xc46>
				case 5:
					if(contByte==1){
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <recibirmensaje+0xc98>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d108      	bne.n	80013e2 <recibirmensaje+0xbbe>
						cmdPosInBuf=buf_rx[indRX_R];
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <recibirmensaje+0xc7c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <recibirmensaje+0xc80>)
 80013da:	5c9b      	ldrb	r3, [r3, r2]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <recibirmensaje+0xc9c>)
 80013e0:	701a      	strb	r2, [r3, #0]
					}
					if(contByte<bytesUNERprotocol){
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <recibirmensaje+0xc98>)
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <recibirmensaje+0xc84>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d213      	bcs.n	8001416 <recibirmensaje+0xbf2>
						cks^=buf_rx[indRX_R];
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <recibirmensaje+0xc7c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <recibirmensaje+0xc80>)
 80013f8:	5c9b      	ldrb	r3, [r3, r2]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <recibirmensaje+0xc8c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4053      	eors	r3, r2
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <recibirmensaje+0xc8c>)
 8001406:	701a      	strb	r2, [r3, #0]
						contByte++;
 8001408:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <recibirmensaje+0xc98>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <recibirmensaje+0xc98>)
 8001412:	701a      	strb	r2, [r3, #0]
							contByte=1;
							coincidencias=0;
							decoIPD=0;
						}
					}
				break;
 8001414:	e029      	b.n	800146a <recibirmensaje+0xc46>
						if(cks==buf_rx[indRX_R]){
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <recibirmensaje+0xc7c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <recibirmensaje+0xc80>)
 8001420:	5c9b      	ldrb	r3, [r3, r2]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <recibirmensaje+0xc8c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d10f      	bne.n	800144c <recibirmensaje+0xc28>
							DecodeComands((uint8_t*)&buf_rx, cmdPosInBuf);
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <recibirmensaje+0xc9c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	481c      	ldr	r0, [pc, #112]	; (80014a4 <recibirmensaje+0xc80>)
 8001434:	f000 f94e 	bl	80016d4 <DecodeComands>
							contByte=1;
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <recibirmensaje+0xc98>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <recibirmensaje+0xc94>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <recibirmensaje+0xc88>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
				break;
 800144a:	e00e      	b.n	800146a <recibirmensaje+0xc46>
							contByte=1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <recibirmensaje+0xc98>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <recibirmensaje+0xc94>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <recibirmensaje+0xc88>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
				break;
 800145e:	e004      	b.n	800146a <recibirmensaje+0xc46>
				break;
 8001460:	bf00      	nop
 8001462:	e013      	b.n	800148c <recibirmensaje+0xc68>
				break;
 8001464:	bf00      	nop
 8001466:	e011      	b.n	800148c <recibirmensaje+0xc68>
				break;
 8001468:	bf00      	nop
			}
		break;
 800146a:	e00f      	b.n	800148c <recibirmensaje+0xc68>
		default:

		break;
 800146c:	bf00      	nop
 800146e:	e00e      	b.n	800148e <recibirmensaje+0xc6a>
		break;
 8001470:	bf00      	nop
 8001472:	e00c      	b.n	800148e <recibirmensaje+0xc6a>
		break;
 8001474:	bf00      	nop
 8001476:	e00a      	b.n	800148e <recibirmensaje+0xc6a>
		break;
 8001478:	bf00      	nop
 800147a:	e008      	b.n	800148e <recibirmensaje+0xc6a>
		break;
 800147c:	bf00      	nop
 800147e:	e006      	b.n	800148e <recibirmensaje+0xc6a>
		break;
 8001480:	bf00      	nop
 8001482:	e004      	b.n	800148e <recibirmensaje+0xc6a>
		break;
 8001484:	bf00      	nop
 8001486:	e002      	b.n	800148e <recibirmensaje+0xc6a>
		break;
 8001488:	bf00      	nop
 800148a:	e000      	b.n	800148e <recibirmensaje+0xc6a>
		break;
 800148c:	bf00      	nop
	}
	indRX_R++;
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <recibirmensaje+0xc7c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	3301      	adds	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b01      	ldr	r3, [pc, #4]	; (80014a0 <recibirmensaje+0xc7c>)
 800149a:	701a      	strb	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200004fe 	.word	0x200004fe
 80014a4:	200001ec 	.word	0x200001ec
 80014a8:	20000512 	.word	0x20000512
 80014ac:	20000508 	.word	0x20000508
 80014b0:	20000511 	.word	0x20000511
 80014b4:	200004fd 	.word	0x200004fd
 80014b8:	20000502 	.word	0x20000502
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000513 	.word	0x20000513

080014c4 <udpCom>:

void udpCom(uint8_t cmd){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]

	if(readyToSend){
 80014ce:	4b74      	ldr	r3, [pc, #464]	; (80016a0 <udpCom+0x1dc>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80db 	beq.w	8001694 <udpCom+0x1d0>
		switch(cmd){
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <udpCom+0x26>
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d06c      	beq.n	80015c2 <udpCom+0xfe>
					duty++;
				}
			break;
		}
	}
}
 80014e8:	e0d5      	b.n	8001696 <udpCom+0x1d2>
				if(!espReadyToRecieve){
 80014ea:	4b6d      	ldr	r3, [pc, #436]	; (80016a0 <udpCom+0x1dc>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d132      	bne.n	800155e <udpCom+0x9a>
					AT=7;
 80014f8:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <udpCom+0x1e0>)
 80014fa:	2207      	movs	r2, #7
 80014fc:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],CIPSEND,11);
 80014fe:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <udpCom+0x1e4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	4b69      	ldr	r3, [pc, #420]	; (80016ac <udpCom+0x1e8>)
 8001508:	4413      	add	r3, r2
 800150a:	220b      	movs	r2, #11
 800150c:	4968      	ldr	r1, [pc, #416]	; (80016b0 <udpCom+0x1ec>)
 800150e:	4618      	mov	r0, r3
 8001510:	f005 fb26 	bl	8006b60 <memcpy>
					indTX_W+=11;
 8001514:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <udpCom+0x1e4>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	330b      	adds	r3, #11
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <udpCom+0x1e4>)
 8001520:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],"8\r\n",3);
 8001522:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <udpCom+0x1e4>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4b60      	ldr	r3, [pc, #384]	; (80016ac <udpCom+0x1e8>)
 800152c:	4413      	add	r3, r2
 800152e:	2203      	movs	r2, #3
 8001530:	4960      	ldr	r1, [pc, #384]	; (80016b4 <udpCom+0x1f0>)
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fb14 	bl	8006b60 <memcpy>
					indTX_W+=3;
 8001538:	4b5b      	ldr	r3, [pc, #364]	; (80016a8 <udpCom+0x1e4>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	3303      	adds	r3, #3
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <udpCom+0x1e4>)
 8001544:	701a      	strb	r2, [r3, #0]
					bytesToSend=8;
 8001546:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <udpCom+0x1f4>)
 8001548:	2208      	movs	r2, #8
 800154a:	701a      	strb	r2, [r3, #0]
					timeout2 = 8;
 800154c:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <udpCom+0x1f8>)
 800154e:	2208      	movs	r2, #8
 8001550:	701a      	strb	r2, [r3, #0]
					readyToSend = 0;
 8001552:	4a53      	ldr	r2, [pc, #332]	; (80016a0 <udpCom+0x1dc>)
 8001554:	7813      	ldrb	r3, [r2, #0]
 8001556:	f36f 1304 	bfc	r3, #4, #1
 800155a:	7013      	strb	r3, [r2, #0]
			break;
 800155c:	e09b      	b.n	8001696 <udpCom+0x1d2>
					memcpy((uint8_t*)&buf_tx[indTX_W],ALIVE,7);
 800155e:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <udpCom+0x1e4>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	4b51      	ldr	r3, [pc, #324]	; (80016ac <udpCom+0x1e8>)
 8001568:	4413      	add	r3, r2
 800156a:	4a55      	ldr	r2, [pc, #340]	; (80016c0 <udpCom+0x1fc>)
 800156c:	6810      	ldr	r0, [r2, #0]
 800156e:	6018      	str	r0, [r3, #0]
 8001570:	8891      	ldrh	r1, [r2, #4]
 8001572:	7992      	ldrb	r2, [r2, #6]
 8001574:	8099      	strh	r1, [r3, #4]
 8001576:	719a      	strb	r2, [r3, #6]
					indTX_W+=7;
 8001578:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <udpCom+0x1e4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	3307      	adds	r3, #7
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <udpCom+0x1e4>)
 8001584:	701a      	strb	r2, [r3, #0]
					buf_tx[indTX_W]='U'^'N'^'E'^'R'^0x02^':'^0xF0;
 8001586:	4b48      	ldr	r3, [pc, #288]	; (80016a8 <udpCom+0x1e4>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <udpCom+0x1e8>)
 8001590:	21c4      	movs	r1, #196	; 0xc4
 8001592:	5499      	strb	r1, [r3, r2]
					indTX_W+=1;
 8001594:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <udpCom+0x1e4>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3301      	adds	r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <udpCom+0x1e4>)
 80015a0:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 80015a2:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <udpCom+0x1dc>)
 80015a4:	7813      	ldrb	r3, [r2, #0]
 80015a6:	f36f 1345 	bfc	r3, #5, #1
 80015aa:	7013      	strb	r3, [r2, #0]
					sendALIVE=0;
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <udpCom+0x200>)
 80015ae:	7813      	ldrb	r3, [r2, #0]
 80015b0:	f36f 0341 	bfc	r3, #1, #1
 80015b4:	7013      	strb	r3, [r2, #0]
					readyToSend = 0;
 80015b6:	4a3a      	ldr	r2, [pc, #232]	; (80016a0 <udpCom+0x1dc>)
 80015b8:	7813      	ldrb	r3, [r2, #0]
 80015ba:	f36f 1304 	bfc	r3, #4, #1
 80015be:	7013      	strb	r3, [r2, #0]
			break;
 80015c0:	e069      	b.n	8001696 <udpCom+0x1d2>
				if(!espReadyToRecieve){
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <udpCom+0x1dc>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d132      	bne.n	8001636 <udpCom+0x172>
					AT=7;
 80015d0:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <udpCom+0x1e0>)
 80015d2:	2207      	movs	r2, #7
 80015d4:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],CIPSEND,11);
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <udpCom+0x1e4>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <udpCom+0x1e8>)
 80015e0:	4413      	add	r3, r2
 80015e2:	220b      	movs	r2, #11
 80015e4:	4932      	ldr	r1, [pc, #200]	; (80016b0 <udpCom+0x1ec>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 faba 	bl	8006b60 <memcpy>
					indTX_W+=11;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <udpCom+0x1e4>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	330b      	adds	r3, #11
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <udpCom+0x1e4>)
 80015f8:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],"9\r\n",3);
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <udpCom+0x1e4>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <udpCom+0x1e8>)
 8001604:	4413      	add	r3, r2
 8001606:	2203      	movs	r2, #3
 8001608:	492f      	ldr	r1, [pc, #188]	; (80016c8 <udpCom+0x204>)
 800160a:	4618      	mov	r0, r3
 800160c:	f005 faa8 	bl	8006b60 <memcpy>
					indTX_W+=3;
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <udpCom+0x1e4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	3303      	adds	r3, #3
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <udpCom+0x1e4>)
 800161c:	701a      	strb	r2, [r3, #0]
					bytesToSend=9;
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <udpCom+0x1f4>)
 8001620:	2209      	movs	r2, #9
 8001622:	701a      	strb	r2, [r3, #0]
					timeout2 = 20;
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <udpCom+0x1f8>)
 8001626:	2214      	movs	r2, #20
 8001628:	701a      	strb	r2, [r3, #0]
					readyToSend = 0;
 800162a:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <udpCom+0x1dc>)
 800162c:	7813      	ldrb	r3, [r2, #0]
 800162e:	f36f 1304 	bfc	r3, #4, #1
 8001632:	7013      	strb	r3, [r2, #0]
			break;
 8001634:	e02f      	b.n	8001696 <udpCom+0x1d2>
					memcpy((uint8_t*)&buf_tx[indTX_W],ACK_D0,9);
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <udpCom+0x1e4>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <udpCom+0x1e8>)
 8001640:	4413      	add	r3, r2
 8001642:	4922      	ldr	r1, [pc, #136]	; (80016cc <udpCom+0x208>)
 8001644:	461a      	mov	r2, r3
 8001646:	460b      	mov	r3, r1
 8001648:	cb03      	ldmia	r3!, {r0, r1}
 800164a:	6010      	str	r0, [r2, #0]
 800164c:	6051      	str	r1, [r2, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	7213      	strb	r3, [r2, #8]
					indTX_W+=9;
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <udpCom+0x1e4>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	3309      	adds	r3, #9
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <udpCom+0x1e4>)
 800165e:	701a      	strb	r2, [r3, #0]
					buf_tx[indTX_W]='U'^'N'^'E'^'R'^0x03^':'^0xD0^0x0D;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <udpCom+0x1e4>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <udpCom+0x1e8>)
 800166a:	21e8      	movs	r1, #232	; 0xe8
 800166c:	5499      	strb	r1, [r3, r2]
					indTX_W+=1;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <udpCom+0x1e4>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <udpCom+0x1e4>)
 800167a:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 800167c:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <udpCom+0x1dc>)
 800167e:	7813      	ldrb	r3, [r2, #0]
 8001680:	f36f 1345 	bfc	r3, #5, #1
 8001684:	7013      	strb	r3, [r2, #0]
					duty++;
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <udpCom+0x20c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <udpCom+0x20c>)
 8001690:	701a      	strb	r2, [r3, #0]
			break;
 8001692:	e000      	b.n	8001696 <udpCom+0x1d2>
	}
 8001694:	bf00      	nop
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000554 	.word	0x20000554
 80016a4:	20000505 	.word	0x20000505
 80016a8:	200004ff 	.word	0x200004ff
 80016ac:	200002ec 	.word	0x200002ec
 80016b0:	08006d14 	.word	0x08006d14
 80016b4:	08006ba4 	.word	0x08006ba4
 80016b8:	2000050e 	.word	0x2000050e
 80016bc:	2000050a 	.word	0x2000050a
 80016c0:	08006d60 	.word	0x08006d60
 80016c4:	20000558 	.word	0x20000558
 80016c8:	08006ba8 	.word	0x08006ba8
 80016cc:	08006d68 	.word	0x08006d68
 80016d0:	20000504 	.word	0x20000504

080016d4 <DecodeComands>:

void DecodeComands(uint8_t *buffer,uint8_t indexCMD){
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]

	uint8_t i=1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]

		switch(buffer[indexCMD]){
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2bf1      	cmp	r3, #241	; 0xf1
 80016ee:	d01c      	beq.n	800172a <DecodeComands+0x56>
 80016f0:	2bf1      	cmp	r3, #241	; 0xf1
 80016f2:	f300 81c1 	bgt.w	8001a78 <DecodeComands+0x3a4>
 80016f6:	2bf0      	cmp	r3, #240	; 0xf0
 80016f8:	f000 80e5 	beq.w	80018c6 <DecodeComands+0x1f2>
 80016fc:	2bf0      	cmp	r3, #240	; 0xf0
 80016fe:	f300 81bb 	bgt.w	8001a78 <DecodeComands+0x3a4>
 8001702:	2bd0      	cmp	r3, #208	; 0xd0
 8001704:	f000 80f8 	beq.w	80018f8 <DecodeComands+0x224>
 8001708:	2bd0      	cmp	r3, #208	; 0xd0
 800170a:	f300 81b5 	bgt.w	8001a78 <DecodeComands+0x3a4>
 800170e:	2bb0      	cmp	r3, #176	; 0xb0
 8001710:	d002      	beq.n	8001718 <DecodeComands+0x44>
 8001712:	2bc0      	cmp	r3, #192	; 0xc0
 8001714:	d043      	beq.n	800179e <DecodeComands+0xca>
					comandoActual=0xD0;
					//comando=0xD0;
					readyToSend=1;
			break;
		}
}
 8001716:	e1af      	b.n	8001a78 <DecodeComands+0x3a4>
					comandoActual=0xB0;
 8001718:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <DecodeComands+0x204>)
 800171a:	22b0      	movs	r2, #176	; 0xb0
 800171c:	701a      	strb	r2, [r3, #0]
					stop=1;
 800171e:	4a6f      	ldr	r2, [pc, #444]	; (80018dc <DecodeComands+0x208>)
 8001720:	7813      	ldrb	r3, [r2, #0]
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	7013      	strb	r3, [r2, #0]
			break;
 8001728:	e1a6      	b.n	8001a78 <DecodeComands+0x3a4>
					PWM_motor1.u8[0]=buffer[indexCMD+i];
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	4413      	add	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	4b69      	ldr	r3, [pc, #420]	; (80018e0 <DecodeComands+0x20c>)
 800173a:	701a      	strb	r2, [r3, #0]
					i++;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	3301      	adds	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[1]=buffer[indexCMD+i];
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	4413      	add	r3, r2
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <DecodeComands+0x20c>)
 8001752:	705a      	strb	r2, [r3, #1]
					i++;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	3301      	adds	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[2]=buffer[indexCMD+i];
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	4413      	add	r3, r2
 8001760:	461a      	mov	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	4b5d      	ldr	r3, [pc, #372]	; (80018e0 <DecodeComands+0x20c>)
 800176a:	709a      	strb	r2, [r3, #2]
					i++;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	3301      	adds	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[3]=buffer[indexCMD+i];
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	4413      	add	r3, r2
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	4b57      	ldr	r3, [pc, #348]	; (80018e0 <DecodeComands+0x20c>)
 8001782:	70da      	strb	r2, [r3, #3]
					PWM_motor2.u32=PWM_motor1.u32;
 8001784:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <DecodeComands+0x20c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a56      	ldr	r2, [pc, #344]	; (80018e4 <DecodeComands+0x210>)
 800178a:	6013      	str	r3, [r2, #0]
					comandoActual=0xF1;
 800178c:	4b52      	ldr	r3, [pc, #328]	; (80018d8 <DecodeComands+0x204>)
 800178e:	22f1      	movs	r2, #241	; 0xf1
 8001790:	701a      	strb	r2, [r3, #0]
					race=1;
 8001792:	4a52      	ldr	r2, [pc, #328]	; (80018dc <DecodeComands+0x208>)
 8001794:	7813      	ldrb	r3, [r2, #0]
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	7013      	strb	r3, [r2, #0]
			break;
 800179c:	e16c      	b.n	8001a78 <DecodeComands+0x3a4>
					Kp.u8[0]=buffer[indexCMD+i];
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	4413      	add	r3, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	4b4e      	ldr	r3, [pc, #312]	; (80018e8 <DecodeComands+0x214>)
 80017ae:	701a      	strb	r2, [r3, #0]
					i++;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	3301      	adds	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
					Kp.u8[1]=buffer[indexCMD+i];
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	4413      	add	r3, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	4b48      	ldr	r3, [pc, #288]	; (80018e8 <DecodeComands+0x214>)
 80017c6:	705a      	strb	r2, [r3, #1]
					i++;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	3301      	adds	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
					Kp.u8[2]=buffer[indexCMD+i];
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	4413      	add	r3, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <DecodeComands+0x214>)
 80017de:	709a      	strb	r2, [r3, #2]
					i++;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	3301      	adds	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
					Kp.u8[3]=buffer[indexCMD+i];
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	4413      	add	r3, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <DecodeComands+0x214>)
 80017f6:	70da      	strb	r2, [r3, #3]
					i++;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	3301      	adds	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
					Kp.u8[0]=buffer[indexCMD+i];
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	4413      	add	r3, r2
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <DecodeComands+0x214>)
 800180e:	701a      	strb	r2, [r3, #0]
					i++;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	3301      	adds	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
					Kd.u8[1]=buffer[indexCMD+i];
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	4413      	add	r3, r2
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	4b31      	ldr	r3, [pc, #196]	; (80018ec <DecodeComands+0x218>)
 8001826:	705a      	strb	r2, [r3, #1]
					i++;
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	3301      	adds	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
					Kd.u8[2]=buffer[indexCMD+i];
 800182e:	78fa      	ldrb	r2, [r7, #3]
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	4413      	add	r3, r2
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <DecodeComands+0x218>)
 800183e:	709a      	strb	r2, [r3, #2]
					i++;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	3301      	adds	r3, #1
 8001844:	73fb      	strb	r3, [r7, #15]
					Kd.u8[3]=buffer[indexCMD+i];
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	4413      	add	r3, r2
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <DecodeComands+0x218>)
 8001856:	70da      	strb	r2, [r3, #3]
					i++;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	3301      	adds	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
					Ki.u8[0]=buffer[indexCMD+i];
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	4413      	add	r3, r2
 8001864:	461a      	mov	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <DecodeComands+0x21c>)
 800186e:	701a      	strb	r2, [r3, #0]
					i++;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	3301      	adds	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
					Ki.u8[1]=buffer[indexCMD+i];
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	4413      	add	r3, r2
 800187c:	461a      	mov	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <DecodeComands+0x21c>)
 8001886:	705a      	strb	r2, [r3, #1]
					i++;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	3301      	adds	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
					Ki.u8[2]=buffer[indexCMD+i];
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	4413      	add	r3, r2
 8001894:	461a      	mov	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <DecodeComands+0x21c>)
 800189e:	709a      	strb	r2, [r3, #2]
					i++;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	3301      	adds	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
					Ki.u8[3]=buffer[indexCMD+i];
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	4413      	add	r3, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <DecodeComands+0x21c>)
 80018b6:	70da      	strb	r2, [r3, #3]
					i++;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	3301      	adds	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
					comandoActual=0xC0;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <DecodeComands+0x204>)
 80018c0:	22c0      	movs	r2, #192	; 0xc0
 80018c2:	701a      	strb	r2, [r3, #0]
			break;
 80018c4:	e0d8      	b.n	8001a78 <DecodeComands+0x3a4>
					duty=2;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <DecodeComands+0x220>)
 80018c8:	2202      	movs	r2, #2
 80018ca:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <DecodeComands+0x208>)
 80018ce:	7813      	ldrb	r3, [r2, #0]
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	7013      	strb	r3, [r2, #0]
			break;
 80018d6:	e0cf      	b.n	8001a78 <DecodeComands+0x3a4>
 80018d8:	20000514 	.word	0x20000514
 80018dc:	20000554 	.word	0x20000554
 80018e0:	20000518 	.word	0x20000518
 80018e4:	2000051c 	.word	0x2000051c
 80018e8:	20000548 	.word	0x20000548
 80018ec:	2000054c 	.word	0x2000054c
 80018f0:	20000550 	.word	0x20000550
 80018f4:	20000504 	.word	0x20000504
					PWM_motor1.u8[0]=buffer[indexCMD+i];
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	4413      	add	r3, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <DecodeComands+0x3b0>)
 8001908:	701a      	strb	r2, [r3, #0]
					i++;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	3301      	adds	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[1]=buffer[indexCMD+i];
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	4413      	add	r3, r2
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	4b59      	ldr	r3, [pc, #356]	; (8001a84 <DecodeComands+0x3b0>)
 8001920:	705a      	strb	r2, [r3, #1]
					i++;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	3301      	adds	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[2]=buffer[indexCMD+i];
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	4413      	add	r3, r2
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <DecodeComands+0x3b0>)
 8001938:	709a      	strb	r2, [r3, #2]
					i++;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	3301      	adds	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[3]=buffer[indexCMD+i];
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	4413      	add	r3, r2
 8001946:	461a      	mov	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	4b4d      	ldr	r3, [pc, #308]	; (8001a84 <DecodeComands+0x3b0>)
 8001950:	70da      	strb	r2, [r3, #3]
					i++;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	3301      	adds	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[0]=buffer[indexCMD+i];
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	4413      	add	r3, r2
 800195e:	461a      	mov	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	781a      	ldrb	r2, [r3, #0]
 8001966:	4b48      	ldr	r3, [pc, #288]	; (8001a88 <DecodeComands+0x3b4>)
 8001968:	701a      	strb	r2, [r3, #0]
					i++;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	3301      	adds	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[1]=buffer[indexCMD+i];
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	4413      	add	r3, r2
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <DecodeComands+0x3b4>)
 8001980:	705a      	strb	r2, [r3, #1]
					i++;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	3301      	adds	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[2]=buffer[indexCMD+i];
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	4413      	add	r3, r2
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <DecodeComands+0x3b4>)
 8001998:	709a      	strb	r2, [r3, #2]
					i++;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	3301      	adds	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[3]=buffer[indexCMD+i];
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	4413      	add	r3, r2
 80019a6:	461a      	mov	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	781a      	ldrb	r2, [r3, #0]
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <DecodeComands+0x3b4>)
 80019b0:	70da      	strb	r2, [r3, #3]
					i++;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	3301      	adds	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[0]=buffer[indexCMD+i];
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	4413      	add	r3, r2
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	781a      	ldrb	r2, [r3, #0]
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <DecodeComands+0x3b8>)
 80019c8:	701a      	strb	r2, [r3, #0]
					i++;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	3301      	adds	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[1]=buffer[indexCMD+i];
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	4413      	add	r3, r2
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <DecodeComands+0x3b8>)
 80019e0:	705a      	strb	r2, [r3, #1]
					i++;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	3301      	adds	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[2]=buffer[indexCMD+i];
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4413      	add	r3, r2
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <DecodeComands+0x3b8>)
 80019f8:	709a      	strb	r2, [r3, #2]
					i++;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	3301      	adds	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[3]=buffer[indexCMD+i];
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	4413      	add	r3, r2
 8001a06:	461a      	mov	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <DecodeComands+0x3b8>)
 8001a10:	70da      	strb	r2, [r3, #3]
					i++;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	3301      	adds	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
					jobTime.u32=jobTime.u32/100;
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <DecodeComands+0x3b8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <DecodeComands+0x3bc>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	4a19      	ldr	r2, [pc, #100]	; (8001a8c <DecodeComands+0x3b8>)
 8001a26:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,PWM_motor1.u32);
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <DecodeComands+0x3c0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <DecodeComands+0x3b0>)
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <DecodeComands+0x3c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <DecodeComands+0x3c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,PWM_motor2.u32);
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <DecodeComands+0x3c0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <DecodeComands+0x3b4>)
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
					race=1;
 8001a4c:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <DecodeComands+0x3c4>)
 8001a4e:	7813      	ldrb	r3, [r2, #0]
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	7013      	strb	r3, [r2, #0]
					killRace=1;
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <DecodeComands+0x3c4>)
 8001a58:	7813      	ldrb	r3, [r2, #0]
 8001a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5e:	7013      	strb	r3, [r2, #0]
					duty=2;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <DecodeComands+0x3c8>)
 8001a62:	2202      	movs	r2, #2
 8001a64:	701a      	strb	r2, [r3, #0]
					comandoActual=0xD0;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <DecodeComands+0x3cc>)
 8001a68:	22d0      	movs	r2, #208	; 0xd0
 8001a6a:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <DecodeComands+0x3c4>)
 8001a6e:	7813      	ldrb	r3, [r2, #0]
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	7013      	strb	r3, [r2, #0]
			break;
 8001a76:	bf00      	nop
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	20000518 	.word	0x20000518
 8001a88:	2000051c 	.word	0x2000051c
 8001a8c:	20000520 	.word	0x20000520
 8001a90:	51eb851f 	.word	0x51eb851f
 8001a94:	200000d4 	.word	0x200000d4
 8001a98:	20000554 	.word	0x20000554
 8001a9c:	20000504 	.word	0x20000504
 8001aa0:	20000514 	.word	0x20000514

08001aa4 <leerADC>:

void leerADC(){
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0

	if(indADC>2){
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <leerADC+0x17c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d93a      	bls.n	8001b2a <leerADC+0x86>
		primLectADC=0;
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <leerADC+0x180>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
		for(uint8_t c=0;c<8;c++){
 8001aba:	2300      	movs	r3, #0
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	e030      	b.n	8001b22 <leerADC+0x7e>
			valueADC[c].u32=( ADCData[indADC-1][c]+ADCData[indADC-2][c]+ADCData[indADC-3][c] ) / 3 ;
 8001ac0:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <leerADC+0x17c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	1e5a      	subs	r2, r3, #1
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	4957      	ldr	r1, [pc, #348]	; (8001c28 <leerADC+0x184>)
 8001acc:	00d2      	lsls	r2, r2, #3
 8001ace:	440a      	add	r2, r1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4b51      	ldr	r3, [pc, #324]	; (8001c20 <leerADC+0x17c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	1e9a      	subs	r2, r3, #2
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	4951      	ldr	r1, [pc, #324]	; (8001c28 <leerADC+0x184>)
 8001ae4:	00d2      	lsls	r2, r2, #3
 8001ae6:	440a      	add	r2, r1
 8001ae8:	4413      	add	r3, r2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4403      	add	r3, r0
 8001af0:	4a4b      	ldr	r2, [pc, #300]	; (8001c20 <leerADC+0x17c>)
 8001af2:	7812      	ldrb	r2, [r2, #0]
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	1ed1      	subs	r1, r2, #3
 8001af8:	79fa      	ldrb	r2, [r7, #7]
 8001afa:	484b      	ldr	r0, [pc, #300]	; (8001c28 <leerADC+0x184>)
 8001afc:	00c9      	lsls	r1, r1, #3
 8001afe:	4401      	add	r1, r0
 8001b00:	440a      	add	r2, r1
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	4413      	add	r3, r2
 8001b08:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <leerADC+0x188>)
 8001b0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b0e:	17db      	asrs	r3, r3, #31
 8001b10:	1ad2      	subs	r2, r2, r3
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4611      	mov	r1, r2
 8001b16:	4a46      	ldr	r2, [pc, #280]	; (8001c30 <leerADC+0x18c>)
 8001b18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(uint8_t c=0;c<8;c++){
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	71fb      	strb	r3, [r7, #7]
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	d9cb      	bls.n	8001ac0 <leerADC+0x1c>
						break;
				}
			}
		}
	}
}
 8001b28:	e073      	b.n	8001c12 <leerADC+0x16e>
		if(!primLectADC){
 8001b2a:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <leerADC+0x180>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d16f      	bne.n	8001c12 <leerADC+0x16e>
			for(uint8_t c=0;c<8;c++){
 8001b32:	2300      	movs	r3, #0
 8001b34:	71bb      	strb	r3, [r7, #6]
 8001b36:	e069      	b.n	8001c0c <leerADC+0x168>
				switch(indADC){
 8001b38:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <leerADC+0x17c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d006      	beq.n	8001b50 <leerADC+0xac>
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	dc5f      	bgt.n	8001c06 <leerADC+0x162>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d03d      	beq.n	8001bc6 <leerADC+0x122>
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d01d      	beq.n	8001b8a <leerADC+0xe6>
 8001b4e:	e05a      	b.n	8001c06 <leerADC+0x162>
						valueADC[c].u32=(ADCData[1][c]+ADCData[0][c]+ADCData[31][c]) / 3;
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	4a35      	ldr	r2, [pc, #212]	; (8001c28 <leerADC+0x184>)
 8001b54:	4413      	add	r3, r2
 8001b56:	7a1b      	ldrb	r3, [r3, #8]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <leerADC+0x184>)
 8001b60:	5cd3      	ldrb	r3, [r2, r3]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	440b      	add	r3, r1
 8001b66:	79ba      	ldrb	r2, [r7, #6]
 8001b68:	492f      	ldr	r1, [pc, #188]	; (8001c28 <leerADC+0x184>)
 8001b6a:	440a      	add	r2, r1
 8001b6c:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	4413      	add	r3, r2
 8001b74:	4a2d      	ldr	r2, [pc, #180]	; (8001c2c <leerADC+0x188>)
 8001b76:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7a:	17db      	asrs	r3, r3, #31
 8001b7c:	1ad2      	subs	r2, r2, r3
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4a2b      	ldr	r2, [pc, #172]	; (8001c30 <leerADC+0x18c>)
 8001b84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 8001b88:	e03d      	b.n	8001c06 <leerADC+0x162>
						valueADC[c].u32=( ADCData[0][c]+ADCData[31][c]+ADCData[30][c] ) / 3 ;
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <leerADC+0x184>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4619      	mov	r1, r3
 8001b94:	79bb      	ldrb	r3, [r7, #6]
 8001b96:	4a24      	ldr	r2, [pc, #144]	; (8001c28 <leerADC+0x184>)
 8001b98:	4413      	add	r3, r2
 8001b9a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	79ba      	ldrb	r2, [r7, #6]
 8001ba4:	4920      	ldr	r1, [pc, #128]	; (8001c28 <leerADC+0x184>)
 8001ba6:	440a      	add	r2, r1
 8001ba8:	f892 20f0 	ldrb.w	r2, [r2, #240]	; 0xf0
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <leerADC+0x188>)
 8001bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb6:	17db      	asrs	r3, r3, #31
 8001bb8:	1ad2      	subs	r2, r2, r3
 8001bba:	79bb      	ldrb	r3, [r7, #6]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <leerADC+0x18c>)
 8001bc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 8001bc4:	e01f      	b.n	8001c06 <leerADC+0x162>
						valueADC[c].u32=( ADCData[31][c]+ADCData[30][c]+ADCData[29][c] ) / 3;
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <leerADC+0x184>)
 8001bca:	4413      	add	r3, r2
 8001bcc:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <leerADC+0x184>)
 8001bd8:	4413      	add	r3, r2
 8001bda:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	440b      	add	r3, r1
 8001be2:	79ba      	ldrb	r2, [r7, #6]
 8001be4:	4910      	ldr	r1, [pc, #64]	; (8001c28 <leerADC+0x184>)
 8001be6:	440a      	add	r2, r1
 8001be8:	f892 20e8 	ldrb.w	r2, [r2, #232]	; 0xe8
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <leerADC+0x188>)
 8001bf2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf6:	17db      	asrs	r3, r3, #31
 8001bf8:	1ad2      	subs	r2, r2, r3
 8001bfa:	79bb      	ldrb	r3, [r7, #6]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <leerADC+0x18c>)
 8001c00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 8001c04:	bf00      	nop
			for(uint8_t c=0;c<8;c++){
 8001c06:	79bb      	ldrb	r3, [r7, #6]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	71bb      	strb	r3, [r7, #6]
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	2b07      	cmp	r3, #7
 8001c10:	d992      	bls.n	8001b38 <leerADC+0x94>
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000501 	.word	0x20000501
 8001c24:	20000001 	.word	0x20000001
 8001c28:	200003ec 	.word	0x200003ec
 8001c2c:	55555556 	.word	0x55555556
 8001c30:	20000528 	.word	0x20000528

08001c34 <findLine>:
uint8_t posMINCenter=0,posMINRight=0,posMINLeft=0;
uint16_t sensorValue=0;
float xMin=0,fx2_fx3,fx2_fx1,x2_x1,x2_x3,x2_x1cuad,x2_x3cuad,denominador;
uint8_t f=0;

float findLine(){
 8001c34:	b480      	push	{r7}
 8001c36:	b08b      	sub	sp, #44	; 0x2c
 8001c38:	af00      	add	r7, sp, #0

	float aux[10];

		sensorValue = valueADC[0].u16[0];
 8001c3a:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <findLine+0x220>)
 8001c3c:	881a      	ldrh	r2, [r3, #0]
 8001c3e:	4b86      	ldr	r3, [pc, #536]	; (8001e58 <findLine+0x224>)
 8001c40:	801a      	strh	r2, [r3, #0]


		posMINCenter=0;
 8001c42:	4b86      	ldr	r3, [pc, #536]	; (8001e5c <findLine+0x228>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
		while(f<8){					//ENCUENTRO LA MENOR LECTURA
 8001c48:	e02e      	b.n	8001ca8 <findLine+0x74>
			if(sensorValue > valueADC[f].u16[0]){
 8001c4a:	4b85      	ldr	r3, [pc, #532]	; (8001e60 <findLine+0x22c>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <findLine+0x220>)
 8001c52:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8001c56:	4b80      	ldr	r3, [pc, #512]	; (8001e58 <findLine+0x224>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d20b      	bcs.n	8001c76 <findLine+0x42>
				sensorValue=valueADC[f].u16[0];
 8001c5e:	4b80      	ldr	r3, [pc, #512]	; (8001e60 <findLine+0x22c>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <findLine+0x220>)
 8001c66:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8001c6a:	4b7b      	ldr	r3, [pc, #492]	; (8001e58 <findLine+0x224>)
 8001c6c:	801a      	strh	r2, [r3, #0]
				posMINCenter=f;
 8001c6e:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <findLine+0x22c>)
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b7a      	ldr	r3, [pc, #488]	; (8001e5c <findLine+0x228>)
 8001c74:	701a      	strb	r2, [r3, #0]
			}
			aux[f+1]=valueADC[f].u16[0];
 8001c76:	4b7a      	ldr	r3, [pc, #488]	; (8001e60 <findLine+0x22c>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <findLine+0x220>)
 8001c7e:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8001c82:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <findLine+0x22c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	ee07 2a90 	vmov	s15, r2
 8001c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	3328      	adds	r3, #40	; 0x28
 8001c94:	443b      	add	r3, r7
 8001c96:	3b28      	subs	r3, #40	; 0x28
 8001c98:	edc3 7a00 	vstr	s15, [r3]
			f+=1;
 8001c9c:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <findLine+0x22c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	4b6e      	ldr	r3, [pc, #440]	; (8001e60 <findLine+0x22c>)
 8001ca6:	701a      	strb	r2, [r3, #0]
		while(f<8){					//ENCUENTRO LA MENOR LECTURA
 8001ca8:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <findLine+0x22c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b07      	cmp	r3, #7
 8001cae:	d9cc      	bls.n	8001c4a <findLine+0x16>
		}
		f=0;
 8001cb0:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <findLine+0x22c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
		posMINCenter+=1;
 8001cb6:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <findLine+0x228>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <findLine+0x228>)
 8001cc0:	701a      	strb	r2, [r3, #0]
		aux[0]=aux[2];
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	603b      	str	r3, [r7, #0]
		aux[9]=aux[7];
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24

		posMINRight=posMINCenter-1;
 8001cca:	4b64      	ldr	r3, [pc, #400]	; (8001e5c <findLine+0x228>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b64      	ldr	r3, [pc, #400]	; (8001e64 <findLine+0x230>)
 8001cd4:	701a      	strb	r2, [r3, #0]
		posMINLeft=posMINCenter+1;
 8001cd6:	4b61      	ldr	r3, [pc, #388]	; (8001e5c <findLine+0x228>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <findLine+0x234>)
 8001ce0:	701a      	strb	r2, [r3, #0]
		fx2_fx3=aux[posMINCenter]-aux[posMINRight];
 8001ce2:	4b5e      	ldr	r3, [pc, #376]	; (8001e5c <findLine+0x228>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	3328      	adds	r3, #40	; 0x28
 8001cea:	443b      	add	r3, r7
 8001cec:	3b28      	subs	r3, #40	; 0x28
 8001cee:	ed93 7a00 	vldr	s14, [r3]
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <findLine+0x230>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	3328      	adds	r3, #40	; 0x28
 8001cfa:	443b      	add	r3, r7
 8001cfc:	3b28      	subs	r3, #40	; 0x28
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d06:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <findLine+0x238>)
 8001d08:	edc3 7a00 	vstr	s15, [r3]
		fx2_fx1=aux[posMINCenter]-aux[posMINLeft];
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <findLine+0x228>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	3328      	adds	r3, #40	; 0x28
 8001d14:	443b      	add	r3, r7
 8001d16:	3b28      	subs	r3, #40	; 0x28
 8001d18:	ed93 7a00 	vldr	s14, [r3]
 8001d1c:	4b52      	ldr	r3, [pc, #328]	; (8001e68 <findLine+0x234>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	3328      	adds	r3, #40	; 0x28
 8001d24:	443b      	add	r3, r7
 8001d26:	3b28      	subs	r3, #40	; 0x28
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d30:	4b4f      	ldr	r3, [pc, #316]	; (8001e70 <findLine+0x23c>)
 8001d32:	edc3 7a00 	vstr	s15, [r3]
		x2_x1=COORD_SENSORES[posMINCenter]-COORD_SENSORES[posMINLeft];
 8001d36:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <findLine+0x228>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b4d      	ldr	r3, [pc, #308]	; (8001e74 <findLine+0x240>)
 8001d3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d42:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <findLine+0x234>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <findLine+0x240>)
 8001d4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d58:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <findLine+0x244>)
 8001d5a:	edc3 7a00 	vstr	s15, [r3]
		x2_x1cuad=(x2_x1*x2_x1);
 8001d5e:	4b46      	ldr	r3, [pc, #280]	; (8001e78 <findLine+0x244>)
 8001d60:	ed93 7a00 	vldr	s14, [r3]
 8001d64:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <findLine+0x244>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <findLine+0x248>)
 8001d70:	edc3 7a00 	vstr	s15, [r3]
		x2_x3=COORD_SENSORES[posMINCenter]-COORD_SENSORES[posMINRight];
 8001d74:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <findLine+0x228>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <findLine+0x240>)
 8001d7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <findLine+0x230>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <findLine+0x240>)
 8001d88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <findLine+0x24c>)
 8001d98:	edc3 7a00 	vstr	s15, [r3]
		x2_x3cuad=(x2_x3*x2_x3);
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <findLine+0x24c>)
 8001d9e:	ed93 7a00 	vldr	s14, [r3]
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <findLine+0x24c>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dac:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <findLine+0x250>)
 8001dae:	edc3 7a00 	vstr	s15, [r3]
		denominador=(2*(x2_x1*fx2_fx3-x2_x3*fx2_fx1));
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <findLine+0x244>)
 8001db4:	ed93 7a00 	vldr	s14, [r3]
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <findLine+0x238>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <findLine+0x24c>)
 8001dc4:	edd3 6a00 	vldr	s13, [r3]
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <findLine+0x23c>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dda:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <findLine+0x254>)
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
		if(denominador!=0){
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <findLine+0x254>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	d025      	beq.n	8001e3c <findLine+0x208>
			xMin=COORD_SENSORES[posMINCenter]-( x2_x1cuad*fx2_fx3 - x2_x3cuad*fx2_fx1 ) / denominador;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <findLine+0x228>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <findLine+0x240>)
 8001df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <findLine+0x248>)
 8001e06:	edd3 6a00 	vldr	s13, [r3]
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <findLine+0x238>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <findLine+0x250>)
 8001e16:	ed93 6a00 	vldr	s12, [r3]
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <findLine+0x23c>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e24:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <findLine+0x254>)
 8001e2a:	edd3 6a00 	vldr	s13, [r3]
 8001e2e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <findLine+0x258>)
 8001e38:	edc3 7a00 	vstr	s15, [r3]
		}
		return -xMin;
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <findLine+0x258>)
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	eef1 7a67 	vneg.f32	s15, s15

}
 8001e46:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4a:	372c      	adds	r7, #44	; 0x2c
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	20000528 	.word	0x20000528
 8001e58:	20000570 	.word	0x20000570
 8001e5c:	2000056c 	.word	0x2000056c
 8001e60:	20000594 	.word	0x20000594
 8001e64:	2000056d 	.word	0x2000056d
 8001e68:	2000056e 	.word	0x2000056e
 8001e6c:	20000578 	.word	0x20000578
 8001e70:	2000057c 	.word	0x2000057c
 8001e74:	08006d74 	.word	0x08006d74
 8001e78:	20000580 	.word	0x20000580
 8001e7c:	20000588 	.word	0x20000588
 8001e80:	20000584 	.word	0x20000584
 8001e84:	2000058c 	.word	0x2000058c
 8001e88:	20000590 	.word	0x20000590
 8001e8c:	20000574 	.word	0x20000574

08001e90 <calcPID>:

void calcPID(uint32_t pwmBase1,uint32_t pwmBase2){
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]

	float pwm1,pwm2;

		integral+=error.f;
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <calcPID+0x148>)
 8001e9c:	ed93 7a00 	vldr	s14, [r3]
 8001ea0:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <calcPID+0x14c>)
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eaa:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <calcPID+0x14c>)
 8001eac:	edc3 7a00 	vstr	s15, [r3]

		if(integral > 1000){
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <calcPID+0x14c>)
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001fe0 <calcPID+0x150>
 8001eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	dd03      	ble.n	8001ecc <calcPID+0x3c>
				integral = 0;
 8001ec4:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <calcPID+0x14c>)
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
		}

		derivativo=error.f-lastError;
 8001ecc:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <calcPID+0x148>)
 8001ece:	ed93 7a00 	vldr	s14, [r3]
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <calcPID+0x154>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <calcPID+0x158>)
 8001ede:	edc3 7a00 	vstr	s15, [r3]
		turn= (Kp.u32*error.f) + (Kd.u32*derivativo) + (Ki.u32*integral);
 8001ee2:	4b42      	ldr	r3, [pc, #264]	; (8001fec <calcPID+0x15c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eee:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <calcPID+0x148>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <calcPID+0x160>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f04:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <calcPID+0x158>)
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <calcPID+0x164>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <calcPID+0x14c>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2c:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <calcPID+0x168>)
 8001f2e:	edc3 7a00 	vstr	s15, [r3]
		pwm1=pwmBase1-turn;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <calcPID+0x168>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f46:	edc7 7a03 	vstr	s15, [r7, #12]
		pwm2=pwmBase2+turn;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f54:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <calcPID+0x168>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5e:	edc7 7a02 	vstr	s15, [r7, #8]



		if(pwm1>200){
 8001f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f66:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001ffc <calcPID+0x16c>
 8001f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	dd01      	ble.n	8001f78 <calcPID+0xe8>
			pwm1=200;
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <calcPID+0x170>)
 8001f76:	60fb      	str	r3, [r7, #12]
		}
		if(pwm2>200){
 8001f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f7c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001ffc <calcPID+0x16c>
 8001f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	dd01      	ble.n	8001f8e <calcPID+0xfe>
			pwm2=200;
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <calcPID+0x170>)
 8001f8c:	60bb      	str	r3, [r7, #8]
		}

		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pwm1);
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <calcPID+0x174>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9a:	ee17 2a90 	vmov	r2, s15
 8001f9e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <calcPID+0x174>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <calcPID+0x174>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,pwm2);
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <calcPID+0x174>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbc:	ee17 2a90 	vmov	r2, s15
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
		lastError=error.f;
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <calcPID+0x148>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <calcPID+0x154>)
 8001fc8:	6013      	str	r3, [r2, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000524 	.word	0x20000524
 8001fdc:	2000055c 	.word	0x2000055c
 8001fe0:	447a0000 	.word	0x447a0000
 8001fe4:	20000568 	.word	0x20000568
 8001fe8:	20000560 	.word	0x20000560
 8001fec:	20000548 	.word	0x20000548
 8001ff0:	2000054c 	.word	0x2000054c
 8001ff4:	20000550 	.word	0x20000550
 8001ff8:	20000564 	.word	0x20000564
 8001ffc:	43480000 	.word	0x43480000
 8002000:	43480000 	.word	0x43480000
 8002004:	200000d4 	.word	0x200000d4

08002008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800200c:	f000 ff0e 	bl	8002e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002010:	f000 f9a4 	bl	800235c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002014:	f000 fc1a 	bl	800284c <MX_GPIO_Init>
  MX_DMA_Init();
 8002018:	f000 fbf8 	bl	800280c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800201c:	f000 fbcc 	bl	80027b8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002020:	f000 fb52 	bl	80026c8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002024:	f000 fb9e 	bl	8002764 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002028:	f000 fab8 	bl	800259c <MX_TIM3_Init>
  MX_ADC1_Init();
 800202c:	f000 fa02 	bl	8002434 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8002030:	4876      	ldr	r0, [pc, #472]	; (800220c <main+0x204>)
 8002032:	f002 fe85 	bl	8004d40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8002036:	4876      	ldr	r0, [pc, #472]	; (8002210 <main+0x208>)
 8002038:	f002 fe28 	bl	8004c8c <HAL_TIM_Base_Start>
  //HAL_ADC_Start_IT(&hadc1);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800203c:	2100      	movs	r1, #0
 800203e:	4874      	ldr	r0, [pc, #464]	; (8002210 <main+0x208>)
 8002040:	f002 ff3a 	bl	8004eb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002044:	2104      	movs	r1, #4
 8002046:	4872      	ldr	r0, [pc, #456]	; (8002210 <main+0x208>)
 8002048:	f002 ff36 	bl	8004eb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800204c:	2108      	movs	r1, #8
 800204e:	4870      	ldr	r0, [pc, #448]	; (8002210 <main+0x208>)
 8002050:	f002 ff32 	bl	8004eb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002054:	210c      	movs	r1, #12
 8002056:	486e      	ldr	r0, [pc, #440]	; (8002210 <main+0x208>)
 8002058:	f002 ff2e 	bl	8004eb8 <HAL_TIM_PWM_Start>

  timeout2=30;
 800205c:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <main+0x20c>)
 800205e:	221e      	movs	r2, #30
 8002060:	701a      	strb	r2, [r3, #0]
  //timeOut3=10;
  timeToSendAlive=30;
 8002062:	4b6d      	ldr	r3, [pc, #436]	; (8002218 <main+0x210>)
 8002064:	221e      	movs	r2, #30
 8002066:	701a      	strb	r2, [r3, #0]
  timeout1=30;
 8002068:	4b6c      	ldr	r3, [pc, #432]	; (800221c <main+0x214>)
 800206a:	221e      	movs	r2, #30
 800206c:	701a      	strb	r2, [r3, #0]
  timeoutADC=0;
 800206e:	4b6c      	ldr	r3, [pc, #432]	; (8002220 <main+0x218>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
  readyToSend=1;
 8002074:	4a6b      	ldr	r2, [pc, #428]	; (8002224 <main+0x21c>)
 8002076:	7813      	ldrb	r3, [r2, #0]
 8002078:	f043 0310 	orr.w	r3, r3, #16
 800207c:	7013      	strb	r3, [r2, #0]
  race=0;
 800207e:	4a69      	ldr	r2, [pc, #420]	; (8002224 <main+0x21c>)
 8002080:	7813      	ldrb	r3, [r2, #0]
 8002082:	f36f 0300 	bfc	r3, #0, #1
 8002086:	7013      	strb	r3, [r2, #0]
  killRace=0;
 8002088:	4a66      	ldr	r2, [pc, #408]	; (8002224 <main+0x21c>)
 800208a:	7813      	ldrb	r3, [r2, #0]
 800208c:	f36f 1386 	bfc	r3, #6, #1
 8002090:	7013      	strb	r3, [r2, #0]
  stop=0;
 8002092:	4a64      	ldr	r2, [pc, #400]	; (8002224 <main+0x21c>)
 8002094:	7813      	ldrb	r3, [r2, #0]
 8002096:	f36f 03c3 	bfc	r3, #3, #1
 800209a:	7013      	strb	r3, [r2, #0]
  duty=0;
 800209c:	4b62      	ldr	r3, [pc, #392]	; (8002228 <main+0x220>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
  espConnected=0;
 80020a2:	4a62      	ldr	r2, [pc, #392]	; (800222c <main+0x224>)
 80020a4:	7813      	ldrb	r3, [r2, #0]
 80020a6:	f36f 0300 	bfc	r3, #0, #1
 80020aa:	7013      	strb	r3, [r2, #0]
  sendALIVE=0;
 80020ac:	4a5f      	ldr	r2, [pc, #380]	; (800222c <main+0x224>)
 80020ae:	7813      	ldrb	r3, [r2, #0]
 80020b0:	f36f 0341 	bfc	r3, #1, #1
 80020b4:	7013      	strb	r3, [r2, #0]

  PWM_motor1.u32=0;
 80020b6:	4b5e      	ldr	r3, [pc, #376]	; (8002230 <main+0x228>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
  PWM_motor2.u32=0;
 80020bc:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <main+0x22c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
  time100ms=10;
 80020c2:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <main+0x230>)
 80020c4:	220a      	movs	r2, #10
 80020c6:	701a      	strb	r2, [r3, #0]
  time10ms=1;
 80020c8:	4b5c      	ldr	r3, [pc, #368]	; (800223c <main+0x234>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(ON100MS){
 80020ce:	4b55      	ldr	r3, [pc, #340]	; (8002224 <main+0x21c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d032      	beq.n	8002142 <main+0x13a>
	  	 		ON100MS=0;
 80020dc:	4a51      	ldr	r2, [pc, #324]	; (8002224 <main+0x21c>)
 80020de:	7813      	ldrb	r3, [r2, #0]
 80020e0:	f36f 0341 	bfc	r3, #1, #1
 80020e4:	7013      	strb	r3, [r2, #0]
	  	 	  	if(timeout1>0)
 80020e6:	4b4d      	ldr	r3, [pc, #308]	; (800221c <main+0x214>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <main+0xf2>
	  	 	  		timeout1--;
 80020ee:	4b4b      	ldr	r3, [pc, #300]	; (800221c <main+0x214>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b49      	ldr	r3, [pc, #292]	; (800221c <main+0x214>)
 80020f8:	701a      	strb	r2, [r3, #0]
	  	 		if(timeout2>0)
 80020fa:	4b46      	ldr	r3, [pc, #280]	; (8002214 <main+0x20c>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <main+0x106>
	  	 			timeout2--;
 8002102:	4b44      	ldr	r3, [pc, #272]	; (8002214 <main+0x20c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	3b01      	subs	r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b42      	ldr	r3, [pc, #264]	; (8002214 <main+0x20c>)
 800210c:	701a      	strb	r2, [r3, #0]
	  	 		if(jobTime.u32>0)
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <main+0x238>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <main+0x118>
	  	 			jobTime.u32--;
 8002116:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <main+0x238>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3b01      	subs	r3, #1
 800211c:	4a48      	ldr	r2, [pc, #288]	; (8002240 <main+0x238>)
 800211e:	6013      	str	r3, [r2, #0]
	  	 		if((timeToSendAlive>0)&&(espConnected))
 8002120:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <main+0x210>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00c      	beq.n	8002142 <main+0x13a>
 8002128:	4b40      	ldr	r3, [pc, #256]	; (800222c <main+0x224>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <main+0x13a>
	  	 			timeToSendAlive--;
 8002136:	4b38      	ldr	r3, [pc, #224]	; (8002218 <main+0x210>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	3b01      	subs	r3, #1
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b36      	ldr	r3, [pc, #216]	; (8002218 <main+0x210>)
 8002140:	701a      	strb	r2, [r3, #0]
	  	  }

	  if(ON10MS){
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <main+0x21c>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00e      	beq.n	800216e <main+0x166>
		  ON10MS=0;
 8002150:	4a34      	ldr	r2, [pc, #208]	; (8002224 <main+0x21c>)
 8002152:	7813      	ldrb	r3, [r2, #0]
 8002154:	f36f 0382 	bfc	r3, #2, #1
 8002158:	7013      	strb	r3, [r2, #0]
		  if(timeoutADC>0){
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <main+0x218>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <main+0x166>
			  timeoutADC--;
 8002162:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <main+0x218>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	3b01      	subs	r3, #1
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <main+0x218>)
 800216c:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  	  if( (!timeToSendAlive) && (espConnected) ){
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <main+0x210>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <main+0x1a0>
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <main+0x224>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d011      	beq.n	80021a8 <main+0x1a0>
	  		  sendALIVE=1;
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <main+0x224>)
 8002186:	7813      	ldrb	r3, [r2, #0]
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	7013      	strb	r3, [r2, #0]
	  		  espReadyToRecieve=0;
 800218e:	4a25      	ldr	r2, [pc, #148]	; (8002224 <main+0x21c>)
 8002190:	7813      	ldrb	r3, [r2, #0]
 8002192:	f36f 1345 	bfc	r3, #5, #1
 8002196:	7013      	strb	r3, [r2, #0]
	  		  timeToSendAlive=30;
 8002198:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <main+0x210>)
 800219a:	221e      	movs	r2, #30
 800219c:	701a      	strb	r2, [r3, #0]
	  		  readyToSend=1;
 800219e:	4a21      	ldr	r2, [pc, #132]	; (8002224 <main+0x21c>)
 80021a0:	7813      	ldrb	r3, [r2, #0]
 80021a2:	f043 0310 	orr.w	r3, r3, #16
 80021a6:	7013      	strb	r3, [r2, #0]
	  	  }

	  	  if(sendALIVE){
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <main+0x224>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <main+0x1b4>
	  	  	udpCom(0);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7ff f984 	bl	80014c4 <udpCom>
	  	  }

	  	switch(duty){
 80021bc:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <main+0x220>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d021      	beq.n	8002208 <main+0x200>
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	dc44      	bgt.n	8002252 <main+0x24a>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <main+0x1ca>
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d018      	beq.n	8002202 <main+0x1fa>
 80021d0:	e03f      	b.n	8002252 <main+0x24a>
	  		case 0:
	  			if(!timeout1){
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <main+0x214>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d13a      	bne.n	8002250 <main+0x248>
	  				initEsp();
 80021da:	f7fe fa1f 	bl	800061c <initEsp>
	  				HAL_UART_Receive_IT(&huart1, (uint8_t *)&buf_rx[indRX_W], 1);
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <main+0x23c>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <main+0x240>)
 80021e8:	4413      	add	r3, r2
 80021ea:	2201      	movs	r2, #1
 80021ec:	4619      	mov	r1, r3
 80021ee:	4817      	ldr	r0, [pc, #92]	; (800224c <main+0x244>)
 80021f0:	f003 fd67 	bl	8005cc2 <HAL_UART_Receive_IT>
	  				duty++;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <main+0x220>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <main+0x220>)
 80021fe:	701a      	strb	r2, [r3, #0]
	  			}
	  		break;
 8002200:	e026      	b.n	8002250 <main+0x248>
	  		case 1:
	  			initEsp();
 8002202:	f7fe fa0b 	bl	800061c <initEsp>
	  		break;
 8002206:	e024      	b.n	8002252 <main+0x24a>
	  		case 2:
	  			//udpCom(0);
	  			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  		break;
 8002208:	bf00      	nop
 800220a:	e022      	b.n	8002252 <main+0x24a>
 800220c:	2000011c 	.word	0x2000011c
 8002210:	200000d4 	.word	0x200000d4
 8002214:	2000050a 	.word	0x2000050a
 8002218:	20000510 	.word	0x20000510
 800221c:	20000509 	.word	0x20000509
 8002220:	2000050b 	.word	0x2000050b
 8002224:	20000554 	.word	0x20000554
 8002228:	20000504 	.word	0x20000504
 800222c:	20000558 	.word	0x20000558
 8002230:	20000518 	.word	0x20000518
 8002234:	2000051c 	.word	0x2000051c
 8002238:	200004fb 	.word	0x200004fb
 800223c:	200004fc 	.word	0x200004fc
 8002240:	20000520 	.word	0x20000520
 8002244:	200004fd 	.word	0x200004fd
 8002248:	200001ec 	.word	0x200001ec
 800224c:	20000164 	.word	0x20000164
	  		break;
 8002250:	bf00      	nop
	  	}

	  	if(!timeoutADC){
 8002252:	4b36      	ldr	r3, [pc, #216]	; (800232c <main+0x324>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10b      	bne.n	8002272 <main+0x26a>
	  		  	leerADC();
 800225a:	f7ff fc23 	bl	8001aa4 <leerADC>
	  		  	error.f=findLine();
 800225e:	f7ff fce9 	bl	8001c34 <findLine>
 8002262:	eef0 7a40 	vmov.f32	s15, s0
 8002266:	4b32      	ldr	r3, [pc, #200]	; (8002330 <main+0x328>)
 8002268:	edc3 7a00 	vstr	s15, [r3]
	  		  	timeoutADC=2;
 800226c:	4b2f      	ldr	r3, [pc, #188]	; (800232c <main+0x324>)
 800226e:	2202      	movs	r2, #2
 8002270:	701a      	strb	r2, [r3, #0]
	  	}

	  	if((race)&&(!timeoutADC)){
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <main+0x32c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00e      	beq.n	800229e <main+0x296>
 8002280:	4b2a      	ldr	r3, [pc, #168]	; (800232c <main+0x324>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <main+0x296>
	  		  	calcPID(PWM_motor1.u32,PWM_motor2.u32);
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <main+0x330>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2b      	ldr	r2, [pc, #172]	; (800233c <main+0x334>)
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fdfc 	bl	8001e90 <calcPID>
	  		  	timeoutPID=2;
 8002298:	4b29      	ldr	r3, [pc, #164]	; (8002340 <main+0x338>)
 800229a:	2202      	movs	r2, #2
 800229c:	701a      	strb	r2, [r3, #0]
	  	}


	  		if( ( ( (!jobTime.u32) && (killRace) ) ) || (stop) ) {
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <main+0x33c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <main+0x2ac>
 80022a6:	4b23      	ldr	r3, [pc, #140]	; (8002334 <main+0x32c>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <main+0x2ba>
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <main+0x32c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01e      	beq.n	8002300 <main+0x2f8>
	  				  stop=0;
 80022c2:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <main+0x32c>)
 80022c4:	7813      	ldrb	r3, [r2, #0]
 80022c6:	f36f 03c3 	bfc	r3, #3, #1
 80022ca:	7013      	strb	r3, [r2, #0]
	  				  race=0;
 80022cc:	4a19      	ldr	r2, [pc, #100]	; (8002334 <main+0x32c>)
 80022ce:	7813      	ldrb	r3, [r2, #0]
 80022d0:	f36f 0300 	bfc	r3, #0, #1
 80022d4:	7013      	strb	r3, [r2, #0]
	  				  killRace=0;
 80022d6:	4a17      	ldr	r2, [pc, #92]	; (8002334 <main+0x32c>)
 80022d8:	7813      	ldrb	r3, [r2, #0]
 80022da:	f36f 1386 	bfc	r3, #6, #1
 80022de:	7013      	strb	r3, [r2, #0]
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <main+0x340>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2200      	movs	r2, #0
 80022e6:	635a      	str	r2, [r3, #52]	; 0x34
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <main+0x340>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2200      	movs	r2, #0
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <main+0x340>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2200      	movs	r2, #0
 80022f6:	63da      	str	r2, [r3, #60]	; 0x3c
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <main+0x340>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2200      	movs	r2, #0
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
	  		}

	  		if(indTX_R!=indTX_W){
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <main+0x344>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <main+0x348>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <main+0x30c>
	  			uart();
 8002310:	f7fe f95e 	bl	80005d0 <uart>
	  		}

	  		if(indRX_R!=indRX_W){
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <main+0x34c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <main+0x350>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	429a      	cmp	r2, r3
 8002322:	f43f aed4 	beq.w	80020ce <main+0xc6>
	  			recibirmensaje();
 8002326:	f7fe fa7d 	bl	8000824 <recibirmensaje>
	  if(ON100MS){
 800232a:	e6d0      	b.n	80020ce <main+0xc6>
 800232c:	2000050b 	.word	0x2000050b
 8002330:	20000524 	.word	0x20000524
 8002334:	20000554 	.word	0x20000554
 8002338:	20000518 	.word	0x20000518
 800233c:	2000051c 	.word	0x2000051c
 8002340:	2000050c 	.word	0x2000050c
 8002344:	20000520 	.word	0x20000520
 8002348:	200000d4 	.word	0x200000d4
 800234c:	20000500 	.word	0x20000500
 8002350:	200004ff 	.word	0x200004ff
 8002354:	200004fe 	.word	0x200004fe
 8002358:	200004fd 	.word	0x200004fd

0800235c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b094      	sub	sp, #80	; 0x50
 8002360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002362:	f107 0320 	add.w	r3, r7, #32
 8002366:	2230      	movs	r2, #48	; 0x30
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f004 fc06 	bl	8006b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <SystemClock_Config+0xd0>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	4a28      	ldr	r2, [pc, #160]	; (800242c <SystemClock_Config+0xd0>)
 800238a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238e:	6413      	str	r3, [r2, #64]	; 0x40
 8002390:	4b26      	ldr	r3, [pc, #152]	; (800242c <SystemClock_Config+0xd0>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800239c:	2300      	movs	r3, #0
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	4b23      	ldr	r3, [pc, #140]	; (8002430 <SystemClock_Config+0xd4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023a8:	4a21      	ldr	r2, [pc, #132]	; (8002430 <SystemClock_Config+0xd4>)
 80023aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <SystemClock_Config+0xd4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023bc:	2302      	movs	r3, #2
 80023be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023c0:	2301      	movs	r3, #1
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023c4:	2310      	movs	r3, #16
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c8:	2302      	movs	r3, #2
 80023ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023cc:	2300      	movs	r3, #0
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80023d0:	2310      	movs	r3, #16
 80023d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80023d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80023da:	2304      	movs	r3, #4
 80023dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023de:	2307      	movs	r3, #7
 80023e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e2:	f107 0320 	add.w	r3, r7, #32
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 ff68 	bl	80042bc <HAL_RCC_OscConfig>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80023f2:	f000 fa99 	bl	8002928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f6:	230f      	movs	r3, #15
 80023f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023fa:	2302      	movs	r3, #2
 80023fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002406:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	2102      	movs	r1, #2
 8002412:	4618      	mov	r0, r3
 8002414:	f002 f9ca 	bl	80047ac <HAL_RCC_ClockConfig>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800241e:	f000 fa83 	bl	8002928 <Error_Handler>
  }
}
 8002422:	bf00      	nop
 8002424:	3750      	adds	r7, #80	; 0x50
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40007000 	.word	0x40007000

08002434 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800243a:	463b      	mov	r3, r7
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002446:	4b52      	ldr	r3, [pc, #328]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <MX_ADC1_Init+0x160>)
 800244a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800244c:	4b50      	ldr	r3, [pc, #320]	; (8002590 <MX_ADC1_Init+0x15c>)
 800244e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002452:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002454:	4b4e      	ldr	r3, [pc, #312]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800245a:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <MX_ADC1_Init+0x15c>)
 800245c:	2201      	movs	r2, #1
 800245e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002460:	4b4b      	ldr	r3, [pc, #300]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002462:	2200      	movs	r2, #0
 8002464:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002466:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800246e:	4b48      	ldr	r3, [pc, #288]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002470:	2200      	movs	r2, #0
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002476:	4a48      	ldr	r2, [pc, #288]	; (8002598 <MX_ADC1_Init+0x164>)
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800247a:	4b45      	ldr	r3, [pc, #276]	; (8002590 <MX_ADC1_Init+0x15c>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8002480:	4b43      	ldr	r3, [pc, #268]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002482:	2208      	movs	r2, #8
 8002484:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002486:	4b42      	ldr	r3, [pc, #264]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800248e:	4b40      	ldr	r3, [pc, #256]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002490:	2201      	movs	r2, #1
 8002492:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002494:	483e      	ldr	r0, [pc, #248]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002496:	f000 fd3b 	bl	8002f10 <HAL_ADC_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80024a0:	f000 fa42 	bl	8002928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80024ac:	2301      	movs	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	4619      	mov	r1, r3
 80024b4:	4836      	ldr	r0, [pc, #216]	; (8002590 <MX_ADC1_Init+0x15c>)
 80024b6:	f000 fe93 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80024c0:	f000 fa32 	bl	8002928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80024c8:	2302      	movs	r3, #2
 80024ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024cc:	463b      	mov	r3, r7
 80024ce:	4619      	mov	r1, r3
 80024d0:	482f      	ldr	r0, [pc, #188]	; (8002590 <MX_ADC1_Init+0x15c>)
 80024d2:	f000 fe85 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80024dc:	f000 fa24 	bl	8002928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80024e0:	2304      	movs	r3, #4
 80024e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80024e4:	2303      	movs	r3, #3
 80024e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024e8:	463b      	mov	r3, r7
 80024ea:	4619      	mov	r1, r3
 80024ec:	4828      	ldr	r0, [pc, #160]	; (8002590 <MX_ADC1_Init+0x15c>)
 80024ee:	f000 fe77 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80024f8:	f000 fa16 	bl	8002928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80024fc:	2308      	movs	r3, #8
 80024fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002500:	2304      	movs	r3, #4
 8002502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	4821      	ldr	r0, [pc, #132]	; (8002590 <MX_ADC1_Init+0x15c>)
 800250a:	f000 fe69 	bl	80031e0 <HAL_ADC_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002514:	f000 fa08 	bl	8002928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002518:	230a      	movs	r3, #10
 800251a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800251c:	2305      	movs	r3, #5
 800251e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	4619      	mov	r1, r3
 8002524:	481a      	ldr	r0, [pc, #104]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002526:	f000 fe5b 	bl	80031e0 <HAL_ADC_ConfigChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002530:	f000 f9fa 	bl	8002928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002534:	230b      	movs	r3, #11
 8002536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002538:	2306      	movs	r3, #6
 800253a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4619      	mov	r1, r3
 8002540:	4813      	ldr	r0, [pc, #76]	; (8002590 <MX_ADC1_Init+0x15c>)
 8002542:	f000 fe4d 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800254c:	f000 f9ec 	bl	8002928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002550:	230c      	movs	r3, #12
 8002552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002554:	2307      	movs	r3, #7
 8002556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002558:	463b      	mov	r3, r7
 800255a:	4619      	mov	r1, r3
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <MX_ADC1_Init+0x15c>)
 800255e:	f000 fe3f 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002568:	f000 f9de 	bl	8002928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800256c:	230d      	movs	r3, #13
 800256e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002570:	2308      	movs	r3, #8
 8002572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002574:	463b      	mov	r3, r7
 8002576:	4619      	mov	r1, r3
 8002578:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_ADC1_Init+0x15c>)
 800257a:	f000 fe31 	bl	80031e0 <HAL_ADC_ConfigChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002584:	f000 f9d0 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	2000002c 	.word	0x2000002c
 8002594:	40012000 	.word	0x40012000
 8002598:	0f000001 	.word	0x0f000001

0800259c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08e      	sub	sp, #56	; 0x38
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b0:	f107 0320 	add.w	r3, r7, #32
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
 80025c8:	615a      	str	r2, [r3, #20]
 80025ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025cc:	4b3c      	ldr	r3, [pc, #240]	; (80026c0 <MX_TIM3_Init+0x124>)
 80025ce:	4a3d      	ldr	r2, [pc, #244]	; (80026c4 <MX_TIM3_Init+0x128>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <MX_TIM3_Init+0x124>)
 80025d4:	2263      	movs	r2, #99	; 0x63
 80025d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <MX_TIM3_Init+0x124>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 210;
 80025de:	4b38      	ldr	r3, [pc, #224]	; (80026c0 <MX_TIM3_Init+0x124>)
 80025e0:	22d2      	movs	r2, #210	; 0xd2
 80025e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e4:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <MX_TIM3_Init+0x124>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ea:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <MX_TIM3_Init+0x124>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025f0:	4833      	ldr	r0, [pc, #204]	; (80026c0 <MX_TIM3_Init+0x124>)
 80025f2:	f002 fafb 	bl	8004bec <HAL_TIM_Base_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80025fc:	f000 f994 	bl	8002928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800260a:	4619      	mov	r1, r3
 800260c:	482c      	ldr	r0, [pc, #176]	; (80026c0 <MX_TIM3_Init+0x124>)
 800260e:	f002 fecd 	bl	80053ac <HAL_TIM_ConfigClockSource>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002618:	f000 f986 	bl	8002928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800261c:	4828      	ldr	r0, [pc, #160]	; (80026c0 <MX_TIM3_Init+0x124>)
 800261e:	f002 fbf1 	bl	8004e04 <HAL_TIM_PWM_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002628:	f000 f97e 	bl	8002928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262c:	2300      	movs	r3, #0
 800262e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002634:	f107 0320 	add.w	r3, r7, #32
 8002638:	4619      	mov	r1, r3
 800263a:	4821      	ldr	r0, [pc, #132]	; (80026c0 <MX_TIM3_Init+0x124>)
 800263c:	f003 fa72 	bl	8005b24 <HAL_TIMEx_MasterConfigSynchronization>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002646:	f000 f96f 	bl	8002928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800264a:	2360      	movs	r3, #96	; 0x60
 800264c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	2200      	movs	r2, #0
 800265e:	4619      	mov	r1, r3
 8002660:	4817      	ldr	r0, [pc, #92]	; (80026c0 <MX_TIM3_Init+0x124>)
 8002662:	f002 fde1 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800266c:	f000 f95c 	bl	8002928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	2204      	movs	r2, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4812      	ldr	r0, [pc, #72]	; (80026c0 <MX_TIM3_Init+0x124>)
 8002678:	f002 fdd6 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8002682:	f000 f951 	bl	8002928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2208      	movs	r2, #8
 800268a:	4619      	mov	r1, r3
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <MX_TIM3_Init+0x124>)
 800268e:	f002 fdcb 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8002698:	f000 f946 	bl	8002928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	220c      	movs	r2, #12
 80026a0:	4619      	mov	r1, r3
 80026a2:	4807      	ldr	r0, [pc, #28]	; (80026c0 <MX_TIM3_Init+0x124>)
 80026a4:	f002 fdc0 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80026ae:	f000 f93b 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026b2:	4803      	ldr	r0, [pc, #12]	; (80026c0 <MX_TIM3_Init+0x124>)
 80026b4:	f000 fa64 	bl	8002b80 <HAL_TIM_MspPostInit>

}
 80026b8:	bf00      	nop
 80026ba:	3738      	adds	r7, #56	; 0x38
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200000d4 	.word	0x200000d4
 80026c4:	40000400 	.word	0x40000400

080026c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	463b      	mov	r3, r7
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <MX_TIM4_Init+0x94>)
 80026e6:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <MX_TIM4_Init+0x98>)
 80026e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <MX_TIM4_Init+0x94>)
 80026ec:	2264      	movs	r2, #100	; 0x64
 80026ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <MX_TIM4_Init+0x94>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <MX_TIM4_Init+0x94>)
 80026f8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80026fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <MX_TIM4_Init+0x94>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <MX_TIM4_Init+0x94>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800270a:	4814      	ldr	r0, [pc, #80]	; (800275c <MX_TIM4_Init+0x94>)
 800270c:	f002 fa6e 	bl	8004bec <HAL_TIM_Base_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002716:	f000 f907 	bl	8002928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	4619      	mov	r1, r3
 8002726:	480d      	ldr	r0, [pc, #52]	; (800275c <MX_TIM4_Init+0x94>)
 8002728:	f002 fe40 	bl	80053ac <HAL_TIM_ConfigClockSource>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002732:	f000 f8f9 	bl	8002928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800273e:	463b      	mov	r3, r7
 8002740:	4619      	mov	r1, r3
 8002742:	4806      	ldr	r0, [pc, #24]	; (800275c <MX_TIM4_Init+0x94>)
 8002744:	f003 f9ee 	bl	8005b24 <HAL_TIMEx_MasterConfigSynchronization>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800274e:	f000 f8eb 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000011c 	.word	0x2000011c
 8002760:	40000800 	.word	0x40000800

08002764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <MX_USART1_UART_Init+0x50>)
 800276c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 8002770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 800278a:	220c      	movs	r2, #12
 800278c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_USART1_UART_Init+0x4c>)
 800279c:	f003 fa44 	bl	8005c28 <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027a6:	f000 f8bf 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000164 	.word	0x20000164
 80027b4:	40011000 	.word	0x40011000

080027b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_USART2_UART_Init+0x4c>)
 80027be:	4a12      	ldr	r2, [pc, #72]	; (8002808 <MX_USART2_UART_Init+0x50>)
 80027c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <MX_USART2_UART_Init+0x4c>)
 80027c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_USART2_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_USART2_UART_Init+0x4c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <MX_USART2_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <MX_USART2_UART_Init+0x4c>)
 80027de:	220c      	movs	r2, #12
 80027e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <MX_USART2_UART_Init+0x4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MX_USART2_UART_Init+0x4c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ee:	4805      	ldr	r0, [pc, #20]	; (8002804 <MX_USART2_UART_Init+0x4c>)
 80027f0:	f003 fa1a 	bl	8005c28 <HAL_UART_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027fa:	f000 f895 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200001a8 	.word	0x200001a8
 8002808:	40004400 	.word	0x40004400

0800280c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <MX_DMA_Init+0x3c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <MX_DMA_Init+0x3c>)
 800281c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <MX_DMA_Init+0x3c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	2038      	movs	r0, #56	; 0x38
 8002834:	f000 ffd7 	bl	80037e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002838:	2038      	movs	r0, #56	; 0x38
 800283a:	f000 fff0 	bl	800381e <HAL_NVIC_EnableIRQ>

}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800

0800284c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
 8002860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	4b2d      	ldr	r3, [pc, #180]	; (800291c <MX_GPIO_Init+0xd0>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a2c      	ldr	r2, [pc, #176]	; (800291c <MX_GPIO_Init+0xd0>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b2a      	ldr	r3, [pc, #168]	; (800291c <MX_GPIO_Init+0xd0>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <MX_GPIO_Init+0xd0>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a25      	ldr	r2, [pc, #148]	; (800291c <MX_GPIO_Init+0xd0>)
 8002888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b23      	ldr	r3, [pc, #140]	; (800291c <MX_GPIO_Init+0xd0>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	4b1f      	ldr	r3, [pc, #124]	; (800291c <MX_GPIO_Init+0xd0>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a1e      	ldr	r2, [pc, #120]	; (800291c <MX_GPIO_Init+0xd0>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <MX_GPIO_Init+0xd0>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <MX_GPIO_Init+0xd0>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a17      	ldr	r2, [pc, #92]	; (800291c <MX_GPIO_Init+0xd0>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <MX_GPIO_Init+0xd0>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2120      	movs	r1, #32
 80028d6:	4812      	ldr	r0, [pc, #72]	; (8002920 <MX_GPIO_Init+0xd4>)
 80028d8:	f001 fcbc 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80028e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	4619      	mov	r1, r3
 80028f2:	480c      	ldr	r0, [pc, #48]	; (8002924 <MX_GPIO_Init+0xd8>)
 80028f4:	f001 fb2a 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028f8:	2320      	movs	r3, #32
 80028fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fc:	2301      	movs	r3, #1
 80028fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	4804      	ldr	r0, [pc, #16]	; (8002920 <MX_GPIO_Init+0xd4>)
 8002910:	f001 fb1c 	bl	8003f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002914:	bf00      	nop
 8002916:	3728      	adds	r7, #40	; 0x28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	40020000 	.word	0x40020000
 8002924:	40020800 	.word	0x40020800

08002928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800292c:	b672      	cpsid	i
}
 800292e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002930:	e7fe      	b.n	8002930 <Error_Handler+0x8>
	...

08002934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <HAL_MspInit+0x4c>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a0f      	ldr	r2, [pc, #60]	; (8002980 <HAL_MspInit+0x4c>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_MspInit+0x4c>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_MspInit+0x4c>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <HAL_MspInit+0x4c>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_MspInit+0x4c>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002972:	2007      	movs	r0, #7
 8002974:	f000 ff2c 	bl	80037d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08c      	sub	sp, #48	; 0x30
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <HAL_ADC_MspInit+0x154>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	f040 8094 	bne.w	8002ad0 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_ADC_MspInit+0x158>)
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	4a4a      	ldr	r2, [pc, #296]	; (8002adc <HAL_ADC_MspInit+0x158>)
 80029b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b6:	6453      	str	r3, [r2, #68]	; 0x44
 80029b8:	4b48      	ldr	r3, [pc, #288]	; (8002adc <HAL_ADC_MspInit+0x158>)
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	4b44      	ldr	r3, [pc, #272]	; (8002adc <HAL_ADC_MspInit+0x158>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	4a43      	ldr	r2, [pc, #268]	; (8002adc <HAL_ADC_MspInit+0x158>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	6313      	str	r3, [r2, #48]	; 0x30
 80029d4:	4b41      	ldr	r3, [pc, #260]	; (8002adc <HAL_ADC_MspInit+0x158>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	4b3d      	ldr	r3, [pc, #244]	; (8002adc <HAL_ADC_MspInit+0x158>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4a3c      	ldr	r2, [pc, #240]	; (8002adc <HAL_ADC_MspInit+0x158>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6313      	str	r3, [r2, #48]	; 0x30
 80029f0:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <HAL_ADC_MspInit+0x158>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_ADC_MspInit+0x158>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	4a35      	ldr	r2, [pc, #212]	; (8002adc <HAL_ADC_MspInit+0x158>)
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0c:	4b33      	ldr	r3, [pc, #204]	; (8002adc <HAL_ADC_MspInit+0x158>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a18:	230f      	movs	r3, #15
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	4619      	mov	r1, r3
 8002a2a:	482d      	ldr	r0, [pc, #180]	; (8002ae0 <HAL_ADC_MspInit+0x15c>)
 8002a2c:	f001 fa8e 	bl	8003f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002a30:	2313      	movs	r3, #19
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a34:	2303      	movs	r3, #3
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	4619      	mov	r1, r3
 8002a42:	4828      	ldr	r0, [pc, #160]	; (8002ae4 <HAL_ADC_MspInit+0x160>)
 8002a44:	f001 fa82 	bl	8003f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a54:	f107 031c 	add.w	r3, r7, #28
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4823      	ldr	r0, [pc, #140]	; (8002ae8 <HAL_ADC_MspInit+0x164>)
 8002a5c:	f001 fa76 	bl	8003f4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a60:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002a62:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <HAL_ADC_MspInit+0x16c>)
 8002a64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a66:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a78:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002aa4:	4811      	ldr	r0, [pc, #68]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002aa6:	f000 fed5 	bl	8003854 <HAL_DMA_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002ab0:	f7ff ff3a 	bl	8002928 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
 8002aba:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <HAL_ADC_MspInit+0x168>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2012      	movs	r0, #18
 8002ac6:	f000 fe8e 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002aca:	2012      	movs	r0, #18
 8002acc:	f000 fea7 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3730      	adds	r7, #48	; 0x30
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40012000 	.word	0x40012000
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020800 	.word	0x40020800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	20000074 	.word	0x20000074
 8002af0:	40026410 	.word	0x40026410

08002af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <HAL_TIM_Base_MspInit+0x80>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d116      	bne.n	8002b34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_TIM_Base_MspInit+0x84>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a1a      	ldr	r2, [pc, #104]	; (8002b78 <HAL_TIM_Base_MspInit+0x84>)
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_TIM_Base_MspInit+0x84>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	201d      	movs	r0, #29
 8002b28:	f000 fe5d 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b2c:	201d      	movs	r0, #29
 8002b2e:	f000 fe76 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b32:	e01a      	b.n	8002b6a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <HAL_TIM_Base_MspInit+0x88>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d115      	bne.n	8002b6a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_TIM_Base_MspInit+0x84>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <HAL_TIM_Base_MspInit+0x84>)
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_TIM_Base_MspInit+0x84>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	201e      	movs	r0, #30
 8002b60:	f000 fe41 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b64:	201e      	movs	r0, #30
 8002b66:	f000 fe5a 	bl	800381e <HAL_NVIC_EnableIRQ>
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40000800 	.word	0x40000800

08002b80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <HAL_TIM_MspPostInit+0x68>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d11e      	bne.n	8002be0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_TIM_MspPostInit+0x6c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a10      	ldr	r2, [pc, #64]	; (8002bec <HAL_TIM_MspPostInit+0x6c>)
 8002bac:	f043 0304 	orr.w	r3, r3, #4
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <HAL_TIM_MspPostInit+0x6c>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002bbe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002bc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd4:	f107 030c 	add.w	r3, r7, #12
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <HAL_TIM_MspPostInit+0x70>)
 8002bdc:	f001 f9b6 	bl	8003f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002be0:	bf00      	nop
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020800 	.word	0x40020800

08002bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a36      	ldr	r2, [pc, #216]	; (8002cec <HAL_UART_MspInit+0xf8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d135      	bne.n	8002c82 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a34      	ldr	r2, [pc, #208]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002c20:	f043 0310 	orr.w	r3, r3, #16
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a2d      	ldr	r2, [pc, #180]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c60:	2307      	movs	r3, #7
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4822      	ldr	r0, [pc, #136]	; (8002cf4 <HAL_UART_MspInit+0x100>)
 8002c6c:	f001 f96e 	bl	8003f4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c70:	2200      	movs	r2, #0
 8002c72:	2100      	movs	r1, #0
 8002c74:	2025      	movs	r0, #37	; 0x25
 8002c76:	f000 fdb6 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c7a:	2025      	movs	r0, #37	; 0x25
 8002c7c:	f000 fdcf 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c80:	e030      	b.n	8002ce4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_UART_MspInit+0x104>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d12b      	bne.n	8002ce4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_UART_MspInit+0xfc>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <HAL_UART_MspInit+0x100>)
 8002ce0:	f001 f934 	bl	8003f4c <HAL_GPIO_Init>
}
 8002ce4:	bf00      	nop
 8002ce6:	3730      	adds	r7, #48	; 0x30
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40011000 	.word	0x40011000
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	40004400 	.word	0x40004400

08002cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <NMI_Handler+0x4>

08002d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d06:	e7fe      	b.n	8002d06 <HardFault_Handler+0x4>

08002d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <MemManage_Handler+0x4>

08002d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d12:	e7fe      	b.n	8002d12 <BusFault_Handler+0x4>

08002d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <UsageFault_Handler+0x4>

08002d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d48:	f000 f8c2 	bl	8002ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <ADC_IRQHandler+0x10>)
 8002d56:	f000 f91e 	bl	8002f96 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000002c 	.word	0x2000002c

08002d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <TIM3_IRQHandler+0x10>)
 8002d6a:	f002 f955 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	200000d4 	.word	0x200000d4

08002d78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <TIM4_IRQHandler+0x10>)
 8002d7e:	f002 f94b 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000011c 	.word	0x2000011c

08002d8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <USART1_IRQHandler+0x10>)
 8002d92:	f002 ffc7 	bl	8005d24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000164 	.word	0x20000164

08002da0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <DMA2_Stream0_IRQHandler+0x10>)
 8002da6:	f000 fe95 	bl	8003ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000074 	.word	0x20000074

08002db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <SystemInit+0x20>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <SystemInit+0x20>)
 8002dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ddc:	480d      	ldr	r0, [pc, #52]	; (8002e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dde:	490e      	ldr	r1, [pc, #56]	; (8002e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002de0:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de4:	e002      	b.n	8002dec <LoopCopyDataInit>

08002de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dea:	3304      	adds	r3, #4

08002dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df0:	d3f9      	bcc.n	8002de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df2:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002df4:	4c0b      	ldr	r4, [pc, #44]	; (8002e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df8:	e001      	b.n	8002dfe <LoopFillZerobss>

08002dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dfc:	3204      	adds	r2, #4

08002dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e00:	d3fb      	bcc.n	8002dfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e02:	f7ff ffd7 	bl	8002db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e06:	f003 fe87 	bl	8006b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e0a:	f7ff f8fd 	bl	8002008 <main>
  bx  lr    
 8002e0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002e1c:	08006dcc 	.word	0x08006dcc
  ldr r2, =_sbss
 8002e20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002e24:	2000059c 	.word	0x2000059c

08002e28 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e28:	e7fe      	b.n	8002e28 <DMA1_Stream0_IRQHandler>
	...

08002e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_Init+0x40>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <HAL_Init+0x40>)
 8002e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_Init+0x40>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <HAL_Init+0x40>)
 8002e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_Init+0x40>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <HAL_Init+0x40>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e54:	2003      	movs	r0, #3
 8002e56:	f000 fcbb 	bl	80037d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f000 f808 	bl	8002e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e60:	f7ff fd68 	bl	8002934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023c00 	.word	0x40023c00

08002e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_InitTick+0x54>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_InitTick+0x58>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4619      	mov	r1, r3
 8002e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fcd3 	bl	800383a <HAL_SYSTICK_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00e      	b.n	8002ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b0f      	cmp	r3, #15
 8002ea2:	d80a      	bhi.n	8002eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f000 fc9b 	bl	80037e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb0:	4a06      	ldr	r2, [pc, #24]	; (8002ecc <HAL_InitTick+0x5c>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000004 	.word	0x20000004
 8002ec8:	2000000c 	.word	0x2000000c
 8002ecc:	20000008 	.word	0x20000008

08002ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_IncTick+0x20>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_IncTick+0x24>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <HAL_IncTick+0x24>)
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	2000000c 	.word	0x2000000c
 8002ef4:	20000598 	.word	0x20000598

08002ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return uwTick;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_GetTick+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000598 	.word	0x20000598

08002f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e033      	b.n	8002f8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fd28 	bl	8002984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f56:	f023 0302 	bic.w	r3, r3, #2
 8002f5a:	f043 0202 	orr.w	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa5e 	bl	8003424 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f7e:	e001      	b.n	8002f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d049      	beq.n	8003060 <HAL_ADC_IRQHandler+0xca>
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d046      	beq.n	8003060 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d12b      	bne.n	8003050 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d127      	bne.n	8003050 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003018:	2b00      	cmp	r3, #0
 800301a:	d119      	bne.n	8003050 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0220 	bic.w	r2, r2, #32
 800302a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fd faa1 	bl	8000598 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f06f 0212 	mvn.w	r2, #18
 800305e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d057      	beq.n	8003126 <HAL_ADC_IRQHandler+0x190>
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d054      	beq.n	8003126 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d139      	bne.n	8003116 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d12b      	bne.n	8003116 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d124      	bne.n	8003116 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11d      	bne.n	8003116 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d119      	bne.n	8003116 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d105      	bne.n	8003116 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa80 	bl	800361c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 020c 	mvn.w	r2, #12
 8003124:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d017      	beq.n	800316c <HAL_ADC_IRQHandler+0x1d6>
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d014      	beq.n	800316c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10d      	bne.n	800316c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f82a 	bl	80031b6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f06f 0201 	mvn.w	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800317a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d015      	beq.n	80031ae <HAL_ADC_IRQHandler+0x218>
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	f043 0202 	orr.w	r2, r3, #2
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0220 	mvn.w	r2, #32
 800319c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f813 	bl	80031ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0220 	mvn.w	r2, #32
 80031ac:	601a      	str	r2, [r3, #0]
  }
}
 80031ae:	bf00      	nop
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1c>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e105      	b.n	8003408 <HAL_ADC_ConfigChannel+0x228>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b09      	cmp	r3, #9
 800320a:	d925      	bls.n	8003258 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68d9      	ldr	r1, [r3, #12]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	3b1e      	subs	r3, #30
 8003222:	2207      	movs	r2, #7
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43da      	mvns	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	400a      	ands	r2, r1
 8003230:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68d9      	ldr	r1, [r3, #12]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	4618      	mov	r0, r3
 8003244:	4603      	mov	r3, r0
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4403      	add	r3, r0
 800324a:	3b1e      	subs	r3, #30
 800324c:	409a      	lsls	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	e022      	b.n	800329e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6919      	ldr	r1, [r3, #16]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	2207      	movs	r2, #7
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	400a      	ands	r2, r1
 800327a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6919      	ldr	r1, [r3, #16]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	4618      	mov	r0, r3
 800328e:	4603      	mov	r3, r0
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4403      	add	r3, r0
 8003294:	409a      	lsls	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d824      	bhi.n	80032f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b05      	subs	r3, #5
 80032b8:	221f      	movs	r2, #31
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	400a      	ands	r2, r1
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	3b05      	subs	r3, #5
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
 80032ee:	e04c      	b.n	800338a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	d824      	bhi.n	8003342 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	3b23      	subs	r3, #35	; 0x23
 800330a:	221f      	movs	r2, #31
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43da      	mvns	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	400a      	ands	r2, r1
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	4618      	mov	r0, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	3b23      	subs	r3, #35	; 0x23
 8003334:	fa00 f203 	lsl.w	r2, r0, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
 8003340:	e023      	b.n	800338a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	3b41      	subs	r3, #65	; 0x41
 8003354:	221f      	movs	r2, #31
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	400a      	ands	r2, r1
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	4618      	mov	r0, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	3b41      	subs	r3, #65	; 0x41
 800337e:	fa00 f203 	lsl.w	r2, r0, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_ADC_ConfigChannel+0x234>)
 800338c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a21      	ldr	r2, [pc, #132]	; (8003418 <HAL_ADC_ConfigChannel+0x238>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d109      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1cc>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b12      	cmp	r3, #18
 800339e:	d105      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_ADC_ConfigChannel+0x238>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d123      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d003      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x1e6>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b11      	cmp	r3, #17
 80033c4:	d11b      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d111      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_ADC_ConfigChannel+0x23c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a10      	ldr	r2, [pc, #64]	; (8003420 <HAL_ADC_ConfigChannel+0x240>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	0c9a      	lsrs	r2, r3, #18
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033f0:	e002      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f9      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40012300 	.word	0x40012300
 8003418:	40012000 	.word	0x40012000
 800341c:	20000004 	.word	0x20000004
 8003420:	431bde83 	.word	0x431bde83

08003424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800342c:	4b79      	ldr	r3, [pc, #484]	; (8003614 <ADC_Init+0x1f0>)
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	021a      	lsls	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800347c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6899      	ldr	r1, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	4a58      	ldr	r2, [pc, #352]	; (8003618 <ADC_Init+0x1f4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6899      	ldr	r1, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	e00f      	b.n	8003522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0202 	bic.w	r2, r2, #2
 8003530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7e1b      	ldrb	r3, [r3, #24]
 800353c:	005a      	lsls	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01b      	beq.n	8003588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800356e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	3b01      	subs	r3, #1
 800357c:	035a      	lsls	r2, r3, #13
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e007      	b.n	8003598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003596:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	051a      	lsls	r2, r3, #20
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6899      	ldr	r1, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035da:	025a      	lsls	r2, r3, #9
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6899      	ldr	r1, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	029a      	lsls	r2, r3, #10
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40012300 	.word	0x40012300
 8003618:	0f000001 	.word	0x0f000001

0800361c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800365c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003662:	4a04      	ldr	r2, [pc, #16]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60d3      	str	r3, [r2, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4907      	ldr	r1, [pc, #28]	; (80036cc <__NVIC_EnableIRQ+0x38>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	db0a      	blt.n	80036fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	490c      	ldr	r1, [pc, #48]	; (800371c <__NVIC_SetPriority+0x4c>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	0112      	lsls	r2, r2, #4
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	440b      	add	r3, r1
 80036f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f8:	e00a      	b.n	8003710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4908      	ldr	r1, [pc, #32]	; (8003720 <__NVIC_SetPriority+0x50>)
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3b04      	subs	r3, #4
 8003708:	0112      	lsls	r2, r2, #4
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	440b      	add	r3, r1
 800370e:	761a      	strb	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000e100 	.word	0xe000e100
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	; 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf28      	it	cs
 8003742:	2304      	movcs	r3, #4
 8003744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3304      	adds	r3, #4
 800374a:	2b06      	cmp	r3, #6
 800374c:	d902      	bls.n	8003754 <NVIC_EncodePriority+0x30>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3b03      	subs	r3, #3
 8003752:	e000      	b.n	8003756 <NVIC_EncodePriority+0x32>
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	401a      	ands	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376c:	f04f 31ff 	mov.w	r1, #4294967295
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43d9      	mvns	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	4313      	orrs	r3, r2
         );
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	; 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800379c:	d301      	bcc.n	80037a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800379e:	2301      	movs	r3, #1
 80037a0:	e00f      	b.n	80037c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <SysTick_Config+0x40>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037aa:	210f      	movs	r1, #15
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	f7ff ff8e 	bl	80036d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <SysTick_Config+0x40>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ba:	4b04      	ldr	r3, [pc, #16]	; (80037cc <SysTick_Config+0x40>)
 80037bc:	2207      	movs	r2, #7
 80037be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	e000e010 	.word	0xe000e010

080037d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff29 	bl	8003630 <__NVIC_SetPriorityGrouping>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037f8:	f7ff ff3e 	bl	8003678 <__NVIC_GetPriorityGrouping>
 80037fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff8e 	bl	8003724 <NVIC_EncodePriority>
 8003808:	4602      	mov	r2, r0
 800380a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff5d 	bl	80036d0 <__NVIC_SetPriority>
}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff31 	bl	8003694 <__NVIC_EnableIRQ>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ffa2 	bl	800378c <SysTick_Config>
 8003848:	4603      	mov	r3, r0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff fb4a 	bl	8002ef8 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e099      	b.n	80039a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003890:	e00f      	b.n	80038b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003892:	f7ff fb31 	bl	8002ef8 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b05      	cmp	r3, #5
 800389e:	d908      	bls.n	80038b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2203      	movs	r2, #3
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e078      	b.n	80039a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e8      	bne.n	8003892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <HAL_DMA_Init+0x158>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b04      	cmp	r3, #4
 800390a:	d107      	bne.n	800391c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	4313      	orrs	r3, r2
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0307 	bic.w	r3, r3, #7
 8003932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2b04      	cmp	r3, #4
 8003944:	d117      	bne.n	8003976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00e      	beq.n	8003976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fa7b 	bl	8003e54 <DMA_CheckFifoParam>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2240      	movs	r2, #64	; 0x40
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003972:	2301      	movs	r3, #1
 8003974:	e016      	b.n	80039a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa32 	bl	8003de8 <DMA_CalcBaseAndBitshift>
 8003984:	4603      	mov	r3, r0
 8003986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	223f      	movs	r2, #63	; 0x3f
 800398e:	409a      	lsls	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	f010803f 	.word	0xf010803f

080039b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039be:	f7ff fa9b 	bl	8002ef8 <HAL_GetTick>
 80039c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d008      	beq.n	80039e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e052      	b.n	8003a88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0216 	bic.w	r2, r2, #22
 80039f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_DMA_Abort+0x62>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0208 	bic.w	r2, r2, #8
 8003a20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a32:	e013      	b.n	8003a5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a34:	f7ff fa60 	bl	8002ef8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d90c      	bls.n	8003a5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e015      	b.n	8003a88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e4      	bne.n	8003a34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	223f      	movs	r2, #63	; 0x3f
 8003a70:	409a      	lsls	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d004      	beq.n	8003aae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e00c      	b.n	8003ac8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2205      	movs	r2, #5
 8003ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ae0:	4b8e      	ldr	r3, [pc, #568]	; (8003d1c <HAL_DMA_IRQHandler+0x248>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a8e      	ldr	r2, [pc, #568]	; (8003d20 <HAL_DMA_IRQHandler+0x24c>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0a9b      	lsrs	r3, r3, #10
 8003aec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afe:	2208      	movs	r2, #8
 8003b00:	409a      	lsls	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01a      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d013      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0204 	bic.w	r2, r2, #4
 8003b26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2201      	movs	r2, #1
 8003b46:	409a      	lsls	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d012      	beq.n	8003b76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	2201      	movs	r2, #1
 8003b64:	409a      	lsls	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d012      	beq.n	8003bac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00b      	beq.n	8003bac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	2204      	movs	r2, #4
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	f043 0204 	orr.w	r2, r3, #4
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d043      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d03c      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	2210      	movs	r2, #16
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d018      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d108      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d024      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
 8003c02:	e01f      	b.n	8003c44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01b      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4798      	blx	r3
 8003c14:	e016      	b.n	8003c44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0208 	bic.w	r2, r2, #8
 8003c32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	2220      	movs	r2, #32
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 808f 	beq.w	8003d74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8087 	beq.w	8003d74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d136      	bne.n	8003cec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0216 	bic.w	r2, r2, #22
 8003c8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_DMA_IRQHandler+0x1da>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0208 	bic.w	r2, r2, #8
 8003cbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	223f      	movs	r2, #63	; 0x3f
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d07e      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
        }
        return;
 8003cea:	e079      	b.n	8003de0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01d      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10d      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d031      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
 8003d18:	e02c      	b.n	8003d74 <HAL_DMA_IRQHandler+0x2a0>
 8003d1a:	bf00      	nop
 8003d1c:	20000004 	.word	0x20000004
 8003d20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d023      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
 8003d34:	e01e      	b.n	8003d74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10f      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0210 	bic.w	r2, r2, #16
 8003d52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d032      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d022      	beq.n	8003dce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d307      	bcc.n	8003dbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f2      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x2cc>
 8003dba:	e000      	b.n	8003dbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003dbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	4798      	blx	r3
 8003dde:	e000      	b.n	8003de2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003de0:	bf00      	nop
    }
  }
}
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	3b10      	subs	r3, #16
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <DMA_CalcBaseAndBitshift+0x64>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e02:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <DMA_CalcBaseAndBitshift+0x68>)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d909      	bls.n	8003e2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	659a      	str	r2, [r3, #88]	; 0x58
 8003e28:	e007      	b.n	8003e3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	aaaaaaab 	.word	0xaaaaaaab
 8003e50:	08006db4 	.word	0x08006db4

08003e54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d11f      	bne.n	8003eae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d856      	bhi.n	8003f22 <DMA_CheckFifoParam+0xce>
 8003e74:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <DMA_CheckFifoParam+0x28>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003e9f 	.word	0x08003e9f
 8003e84:	08003e8d 	.word	0x08003e8d
 8003e88:	08003f23 	.word	0x08003f23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d046      	beq.n	8003f26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9c:	e043      	b.n	8003f26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ea6:	d140      	bne.n	8003f2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eac:	e03d      	b.n	8003f2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb6:	d121      	bne.n	8003efc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d837      	bhi.n	8003f2e <DMA_CheckFifoParam+0xda>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <DMA_CheckFifoParam+0x70>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003edb 	.word	0x08003edb
 8003ecc:	08003ed5 	.word	0x08003ed5
 8003ed0:	08003eed 	.word	0x08003eed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed8:	e030      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d025      	beq.n	8003f32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eea:	e022      	b.n	8003f32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ef4:	d11f      	bne.n	8003f36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003efa:	e01c      	b.n	8003f36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d903      	bls.n	8003f0a <DMA_CheckFifoParam+0xb6>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d003      	beq.n	8003f10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f08:	e018      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f0e:	e015      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f20:	e00b      	b.n	8003f3a <DMA_CheckFifoParam+0xe6>
      break;
 8003f22:	bf00      	nop
 8003f24:	e00a      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f26:	bf00      	nop
 8003f28:	e008      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e006      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e004      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	; 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	e159      	b.n	800421c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f68:	2201      	movs	r2, #1
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	f040 8148 	bne.w	8004216 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d005      	beq.n	8003f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d130      	bne.n	8004000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	2203      	movs	r2, #3
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 0201 	and.w	r2, r3, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b03      	cmp	r3, #3
 800400a:	d017      	beq.n	800403c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	2203      	movs	r2, #3
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d123      	bne.n	8004090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3208      	adds	r2, #8
 8004050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	220f      	movs	r2, #15
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	08da      	lsrs	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3208      	adds	r2, #8
 800408a:	69b9      	ldr	r1, [r7, #24]
 800408c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0203 	and.w	r2, r3, #3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80a2 	beq.w	8004216 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	4b57      	ldr	r3, [pc, #348]	; (8004234 <HAL_GPIO_Init+0x2e8>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	4a56      	ldr	r2, [pc, #344]	; (8004234 <HAL_GPIO_Init+0x2e8>)
 80040dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e0:	6453      	str	r3, [r2, #68]	; 0x44
 80040e2:	4b54      	ldr	r3, [pc, #336]	; (8004234 <HAL_GPIO_Init+0x2e8>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ee:	4a52      	ldr	r2, [pc, #328]	; (8004238 <HAL_GPIO_Init+0x2ec>)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	089b      	lsrs	r3, r3, #2
 80040f4:	3302      	adds	r3, #2
 80040f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a49      	ldr	r2, [pc, #292]	; (800423c <HAL_GPIO_Init+0x2f0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d019      	beq.n	800414e <HAL_GPIO_Init+0x202>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a48      	ldr	r2, [pc, #288]	; (8004240 <HAL_GPIO_Init+0x2f4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_GPIO_Init+0x1fe>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a47      	ldr	r2, [pc, #284]	; (8004244 <HAL_GPIO_Init+0x2f8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00d      	beq.n	8004146 <HAL_GPIO_Init+0x1fa>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a46      	ldr	r2, [pc, #280]	; (8004248 <HAL_GPIO_Init+0x2fc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <HAL_GPIO_Init+0x1f6>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a45      	ldr	r2, [pc, #276]	; (800424c <HAL_GPIO_Init+0x300>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_GPIO_Init+0x1f2>
 800413a:	2304      	movs	r3, #4
 800413c:	e008      	b.n	8004150 <HAL_GPIO_Init+0x204>
 800413e:	2307      	movs	r3, #7
 8004140:	e006      	b.n	8004150 <HAL_GPIO_Init+0x204>
 8004142:	2303      	movs	r3, #3
 8004144:	e004      	b.n	8004150 <HAL_GPIO_Init+0x204>
 8004146:	2302      	movs	r3, #2
 8004148:	e002      	b.n	8004150 <HAL_GPIO_Init+0x204>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <HAL_GPIO_Init+0x204>
 800414e:	2300      	movs	r3, #0
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	f002 0203 	and.w	r2, r2, #3
 8004156:	0092      	lsls	r2, r2, #2
 8004158:	4093      	lsls	r3, r2
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004160:	4935      	ldr	r1, [pc, #212]	; (8004238 <HAL_GPIO_Init+0x2ec>)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	089b      	lsrs	r3, r3, #2
 8004166:	3302      	adds	r3, #2
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800416e:	4b38      	ldr	r3, [pc, #224]	; (8004250 <HAL_GPIO_Init+0x304>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	43db      	mvns	r3, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4013      	ands	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004192:	4a2f      	ldr	r2, [pc, #188]	; (8004250 <HAL_GPIO_Init+0x304>)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004198:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <HAL_GPIO_Init+0x304>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041bc:	4a24      	ldr	r2, [pc, #144]	; (8004250 <HAL_GPIO_Init+0x304>)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041c2:	4b23      	ldr	r3, [pc, #140]	; (8004250 <HAL_GPIO_Init+0x304>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4013      	ands	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041e6:	4a1a      	ldr	r2, [pc, #104]	; (8004250 <HAL_GPIO_Init+0x304>)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ec:	4b18      	ldr	r3, [pc, #96]	; (8004250 <HAL_GPIO_Init+0x304>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	43db      	mvns	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004210:	4a0f      	ldr	r2, [pc, #60]	; (8004250 <HAL_GPIO_Init+0x304>)
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3301      	adds	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b0f      	cmp	r3, #15
 8004220:	f67f aea2 	bls.w	8003f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3724      	adds	r7, #36	; 0x24
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	40013800 	.word	0x40013800
 800423c:	40020000 	.word	0x40020000
 8004240:	40020400 	.word	0x40020400
 8004244:	40020800 	.word	0x40020800
 8004248:	40020c00 	.word	0x40020c00
 800424c:	40021000 	.word	0x40021000
 8004250:	40013c00 	.word	0x40013c00

08004254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
 8004260:	4613      	mov	r3, r2
 8004262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004264:	787b      	ldrb	r3, [r7, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004270:	e003      	b.n	800427a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004272:	887b      	ldrh	r3, [r7, #2]
 8004274:	041a      	lsls	r2, r3, #16
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	619a      	str	r2, [r3, #24]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004298:	887a      	ldrh	r2, [r7, #2]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	041a      	lsls	r2, r3, #16
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43d9      	mvns	r1, r3
 80042a4:	887b      	ldrh	r3, [r7, #2]
 80042a6:	400b      	ands	r3, r1
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	619a      	str	r2, [r3, #24]
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e267      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d075      	beq.n	80043c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	4b88      	ldr	r3, [pc, #544]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d00c      	beq.n	8004300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b85      	ldr	r3, [pc, #532]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d112      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f2:	4b82      	ldr	r3, [pc, #520]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fe:	d10b      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004300:	4b7e      	ldr	r3, [pc, #504]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d05b      	beq.n	80043c4 <HAL_RCC_OscConfig+0x108>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d157      	bne.n	80043c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e242      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d106      	bne.n	8004330 <HAL_RCC_OscConfig+0x74>
 8004322:	4b76      	ldr	r3, [pc, #472]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a75      	ldr	r2, [pc, #468]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e01d      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6f      	ldr	r2, [pc, #444]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6c      	ldr	r2, [pc, #432]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004354:	4b69      	ldr	r3, [pc, #420]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a68      	ldr	r2, [pc, #416]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800435a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a65      	ldr	r2, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fe fdc0 	bl	8002ef8 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800437c:	f7fe fdbc 	bl	8002ef8 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e207      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xc0>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fe fdac 	bl	8002ef8 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fe fda8 	bl	8002ef8 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1f3      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b6:	4b51      	ldr	r3, [pc, #324]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0xe8>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ea:	4b44      	ldr	r3, [pc, #272]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1c7      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4937      	ldr	r1, [pc, #220]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	e03a      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442c:	4b34      	ldr	r3, [pc, #208]	; (8004500 <HAL_RCC_OscConfig+0x244>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fe fd61 	bl	8002ef8 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443a:	f7fe fd5d 	bl	8002ef8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1a8      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b28      	ldr	r3, [pc, #160]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4925      	ldr	r1, [pc, #148]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_OscConfig+0x244>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fe fd40 	bl	8002ef8 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800447c:	f7fe fd3c 	bl	8002ef8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e187      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d036      	beq.n	8004514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <HAL_RCC_OscConfig+0x248>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fe fd20 	bl	8002ef8 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fe fd1c 	bl	8002ef8 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e167      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80044d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x200>
 80044da:	e01b      	b.n	8004514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_OscConfig+0x248>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fe fd09 	bl	8002ef8 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	e00e      	b.n	8004508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fe fd05 	bl	8002ef8 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d907      	bls.n	8004508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e150      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80044fc:	40023800 	.word	0x40023800
 8004500:	42470000 	.word	0x42470000
 8004504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	4b88      	ldr	r3, [pc, #544]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ea      	bne.n	80044ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8097 	beq.w	8004650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004526:	4b81      	ldr	r3, [pc, #516]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	4b7d      	ldr	r3, [pc, #500]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a7c      	ldr	r2, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b77      	ldr	r3, [pc, #476]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d118      	bne.n	8004590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455e:	4b74      	ldr	r3, [pc, #464]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a73      	ldr	r2, [pc, #460]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456a:	f7fe fcc5 	bl	8002ef8 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004572:	f7fe fcc1 	bl	8002ef8 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e10c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2ea>
 8004598:	4b64      	ldr	r3, [pc, #400]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a63      	ldr	r2, [pc, #396]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	e01c      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x30c>
 80045ae:	4b5f      	ldr	r3, [pc, #380]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a5e      	ldr	r2, [pc, #376]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ba:	4b5c      	ldr	r3, [pc, #368]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a5b      	ldr	r2, [pc, #364]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	e00b      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045c8:	4b58      	ldr	r3, [pc, #352]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a57      	ldr	r2, [pc, #348]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
 80045d4:	4b55      	ldr	r3, [pc, #340]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4a54      	ldr	r2, [pc, #336]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045da:	f023 0304 	bic.w	r3, r3, #4
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fe fc86 	bl	8002ef8 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fe fc82 	bl	8002ef8 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0cb      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004606:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ee      	beq.n	80045f0 <HAL_RCC_OscConfig+0x334>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004614:	f7fe fc70 	bl	8002ef8 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fe fc6c 	bl	8002ef8 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0b5      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004632:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ee      	bne.n	800461c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d105      	bne.n	8004650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a1 	beq.w	800479c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b08      	cmp	r3, #8
 8004664:	d05c      	beq.n	8004720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d141      	bne.n	80046f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fe fc40 	bl	8002ef8 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467c:	f7fe fc3c 	bl	8002ef8 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e087      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	3b01      	subs	r3, #1
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	491b      	ldr	r1, [pc, #108]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fe fc15 	bl	8002ef8 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fe fc11 	bl	8002ef8 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e05c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x416>
 80046f0:	e054      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fe fbfe 	bl	8002ef8 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fe fbfa 	bl	8002ef8 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e045      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x444>
 800471e:	e03d      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e038      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_RCC_OscConfig+0x4ec>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d028      	beq.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d121      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d11a      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004770:	4293      	cmp	r3, r2
 8004772:	d111      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800

080047ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0cc      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b68      	ldr	r3, [pc, #416]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d90c      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b65      	ldr	r3, [pc, #404]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800480a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d044      	beq.n	80048cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d119      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d003      	beq.n	800486a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004866:	2b03      	cmp	r3, #3
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e067      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4934      	ldr	r1, [pc, #208]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800489c:	f7fe fb2c 	bl	8002ef8 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a4:	f7fe fb28 	bl	8002ef8 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1eb      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d20c      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b22      	ldr	r3, [pc, #136]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1c8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe fa8c 	bl	8002e70 <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023c00 	.word	0x40023c00
 8004968:	40023800 	.word	0x40023800
 800496c:	08006d9c 	.word	0x08006d9c
 8004970:	20000004 	.word	0x20000004
 8004974:	20000008 	.word	0x20000008

08004978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b094      	sub	sp, #80	; 0x50
 800497e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
 8004984:	2300      	movs	r3, #0
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004988:	2300      	movs	r3, #0
 800498a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004990:	4b79      	ldr	r3, [pc, #484]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d00d      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 800499c:	2b08      	cmp	r3, #8
 800499e:	f200 80e1 	bhi.w	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x34>
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049aa:	e0db      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b73      	ldr	r3, [pc, #460]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049b0:	e0db      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b2:	4b73      	ldr	r3, [pc, #460]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049b6:	e0d8      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b8:	4b6f      	ldr	r3, [pc, #444]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c2:	4b6d      	ldr	r3, [pc, #436]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d063      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ce:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	2200      	movs	r2, #0
 80049d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30
 80049e2:	2300      	movs	r3, #0
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
 80049e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	f04f 0000 	mov.w	r0, #0
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	0159      	lsls	r1, r3, #5
 80049f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049fc:	0150      	lsls	r0, r2, #5
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4621      	mov	r1, r4
 8004a04:	1a51      	subs	r1, r2, r1
 8004a06:	6139      	str	r1, [r7, #16]
 8004a08:	4629      	mov	r1, r5
 8004a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	018b      	lsls	r3, r1, #6
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a26:	4651      	mov	r1, sl
 8004a28:	018a      	lsls	r2, r1, #6
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a30:	4659      	mov	r1, fp
 8004a32:	eb63 0901 	sbc.w	r9, r3, r1
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4a:	4690      	mov	r8, r2
 8004a4c:	4699      	mov	r9, r3
 8004a4e:	4623      	mov	r3, r4
 8004a50:	eb18 0303 	adds.w	r3, r8, r3
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	462b      	mov	r3, r5
 8004a58:	eb49 0303 	adc.w	r3, r9, r3
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	024b      	lsls	r3, r1, #9
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a74:	4621      	mov	r1, r4
 8004a76:	024a      	lsls	r2, r1, #9
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a88:	f7fb fba4 	bl	80001d4 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a94:	e058      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a96:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	0159      	lsls	r1, r3, #5
 8004abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac2:	0150      	lsls	r0, r2, #5
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4641      	mov	r1, r8
 8004aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8004aec:	eb63 050b 	sbc.w	r5, r3, fp
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	00eb      	lsls	r3, r5, #3
 8004afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afe:	00e2      	lsls	r2, r4, #3
 8004b00:	4614      	mov	r4, r2
 8004b02:	461d      	mov	r5, r3
 8004b04:	4643      	mov	r3, r8
 8004b06:	18e3      	adds	r3, r4, r3
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	eb45 0303 	adc.w	r3, r5, r3
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b1e:	4629      	mov	r1, r5
 8004b20:	028b      	lsls	r3, r1, #10
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b28:	4621      	mov	r1, r4
 8004b2a:	028a      	lsls	r2, r1, #10
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	2200      	movs	r2, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	61fa      	str	r2, [r7, #28]
 8004b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3c:	f7fb fb4a 	bl	80001d4 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	3301      	adds	r3, #1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b62:	e002      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3750      	adds	r7, #80	; 0x50
 8004b70:	46bd      	mov	sp, r7
 8004b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	00f42400 	.word	0x00f42400
 8004b80:	007a1200 	.word	0x007a1200

08004b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000004 	.word	0x20000004

08004b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba0:	f7ff fff0 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	0a9b      	lsrs	r3, r3, #10
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4903      	ldr	r1, [pc, #12]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	08006dac 	.word	0x08006dac

08004bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bc8:	f7ff ffdc 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	0b5b      	lsrs	r3, r3, #13
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4903      	ldr	r1, [pc, #12]	; (8004be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	08006dac 	.word	0x08006dac

08004bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e041      	b.n	8004c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fd ff6e 	bl	8002af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	f000 fcae 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d001      	beq.n	8004ca4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e03c      	b.n	8004d1e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <HAL_TIM_Base_Start+0xa0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d018      	beq.n	8004ce8 <HAL_TIM_Base_Start+0x5c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbe:	d013      	beq.n	8004ce8 <HAL_TIM_Base_Start+0x5c>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1a      	ldr	r2, [pc, #104]	; (8004d30 <HAL_TIM_Base_Start+0xa4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00e      	beq.n	8004ce8 <HAL_TIM_Base_Start+0x5c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a19      	ldr	r2, [pc, #100]	; (8004d34 <HAL_TIM_Base_Start+0xa8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d009      	beq.n	8004ce8 <HAL_TIM_Base_Start+0x5c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <HAL_TIM_Base_Start+0xac>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d004      	beq.n	8004ce8 <HAL_TIM_Base_Start+0x5c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a16      	ldr	r2, [pc, #88]	; (8004d3c <HAL_TIM_Base_Start+0xb0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d111      	bne.n	8004d0c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b06      	cmp	r3, #6
 8004cf8:	d010      	beq.n	8004d1c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0a:	e007      	b.n	8004d1c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40014000 	.word	0x40014000

08004d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d001      	beq.n	8004d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e044      	b.n	8004de2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1e      	ldr	r2, [pc, #120]	; (8004df0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d018      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x6c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d013      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x6c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	; (8004df4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00e      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x6c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d009      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x6c>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <HAL_TIM_Base_Start_IT+0xbc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x6c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <HAL_TIM_Base_Start_IT+0xc0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d111      	bne.n	8004dd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d010      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dce:	e007      	b.n	8004de0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	40014000 	.word	0x40014000

08004e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e041      	b.n	8004e9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f839 	bl	8004ea2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f000 fba2 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_TIM_PWM_Start+0x24>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e022      	b.n	8004f22 <HAL_TIM_PWM_Start+0x6a>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d109      	bne.n	8004ef6 <HAL_TIM_PWM_Start+0x3e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e015      	b.n	8004f22 <HAL_TIM_PWM_Start+0x6a>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d109      	bne.n	8004f10 <HAL_TIM_PWM_Start+0x58>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	e008      	b.n	8004f22 <HAL_TIM_PWM_Start+0x6a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e068      	b.n	8004ffc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_PWM_Start+0x82>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f38:	e013      	b.n	8004f62 <HAL_TIM_PWM_Start+0xaa>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIM_PWM_Start+0x92>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f48:	e00b      	b.n	8004f62 <HAL_TIM_PWM_Start+0xaa>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d104      	bne.n	8004f5a <HAL_TIM_PWM_Start+0xa2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f58:	e003      	b.n	8004f62 <HAL_TIM_PWM_Start+0xaa>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2201      	movs	r2, #1
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fdb4 	bl	8005ad8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a23      	ldr	r2, [pc, #140]	; (8005004 <HAL_TIM_PWM_Start+0x14c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d107      	bne.n	8004f8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <HAL_TIM_PWM_Start+0x14c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d018      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x10e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9c:	d013      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x10e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a19      	ldr	r2, [pc, #100]	; (8005008 <HAL_TIM_PWM_Start+0x150>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x10e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a17      	ldr	r2, [pc, #92]	; (800500c <HAL_TIM_PWM_Start+0x154>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x10e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a16      	ldr	r2, [pc, #88]	; (8005010 <HAL_TIM_PWM_Start+0x158>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0x10e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <HAL_TIM_PWM_Start+0x15c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d111      	bne.n	8004fea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b06      	cmp	r3, #6
 8004fd6:	d010      	beq.n	8004ffa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	e007      	b.n	8004ffa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40010000 	.word	0x40010000
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40000c00 	.word	0x40000c00
 8005014:	40014000 	.word	0x40014000

08005018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d122      	bne.n	8005074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b02      	cmp	r3, #2
 800503a:	d11b      	bne.n	8005074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0202 	mvn.w	r2, #2
 8005044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fa77 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 8005060:	e005      	b.n	800506e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fa69 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fa7a 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b04      	cmp	r3, #4
 8005080:	d122      	bne.n	80050c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b04      	cmp	r3, #4
 800508e:	d11b      	bne.n	80050c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0204 	mvn.w	r2, #4
 8005098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fa4d 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fa3f 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fa50 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d122      	bne.n	800511c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d11b      	bne.n	800511c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0208 	mvn.w	r2, #8
 80050ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2204      	movs	r2, #4
 80050f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fa23 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa15 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fa26 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b10      	cmp	r3, #16
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b10      	cmp	r3, #16
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0210 	mvn.w	r2, #16
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2208      	movs	r2, #8
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f9f9 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f9eb 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f9fc 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	d10e      	bne.n	800519c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d107      	bne.n	800519c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0201 	mvn.w	r2, #1
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fb f9be 	bl	8000518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b80      	cmp	r3, #128	; 0x80
 80051a8:	d10e      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d107      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fd26 	bl	8005c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d10e      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d107      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f9c1 	bl	8005576 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d10e      	bne.n	8005220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b20      	cmp	r3, #32
 800520e:	d107      	bne.n	8005220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0220 	mvn.w	r2, #32
 8005218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fcf0 	bl	8005c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005242:	2302      	movs	r3, #2
 8005244:	e0ae      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b0c      	cmp	r3, #12
 8005252:	f200 809f 	bhi.w	8005394 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005291 	.word	0x08005291
 8005260:	08005395 	.word	0x08005395
 8005264:	08005395 	.word	0x08005395
 8005268:	08005395 	.word	0x08005395
 800526c:	080052d1 	.word	0x080052d1
 8005270:	08005395 	.word	0x08005395
 8005274:	08005395 	.word	0x08005395
 8005278:	08005395 	.word	0x08005395
 800527c:	08005313 	.word	0x08005313
 8005280:	08005395 	.word	0x08005395
 8005284:	08005395 	.word	0x08005395
 8005288:	08005395 	.word	0x08005395
 800528c:	08005353 	.word	0x08005353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f9f8 	bl	800568c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0204 	bic.w	r2, r2, #4
 80052ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6999      	ldr	r1, [r3, #24]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	619a      	str	r2, [r3, #24]
      break;
 80052ce:	e064      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fa3e 	bl	8005758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6999      	ldr	r1, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	021a      	lsls	r2, r3, #8
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	619a      	str	r2, [r3, #24]
      break;
 8005310:	e043      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fa89 	bl	8005830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0208 	orr.w	r2, r2, #8
 800532c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0204 	bic.w	r2, r2, #4
 800533c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69d9      	ldr	r1, [r3, #28]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	61da      	str	r2, [r3, #28]
      break;
 8005350:	e023      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fad3 	bl	8005904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	021a      	lsls	r2, r3, #8
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	61da      	str	r2, [r3, #28]
      break;
 8005392:	e002      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
      break;
 8005398:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_TIM_ConfigClockSource+0x1c>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e0b4      	b.n	8005532 <HAL_TIM_ConfigClockSource+0x186>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005400:	d03e      	beq.n	8005480 <HAL_TIM_ConfigClockSource+0xd4>
 8005402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005406:	f200 8087 	bhi.w	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 800540a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540e:	f000 8086 	beq.w	800551e <HAL_TIM_ConfigClockSource+0x172>
 8005412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005416:	d87f      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b70      	cmp	r3, #112	; 0x70
 800541a:	d01a      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0xa6>
 800541c:	2b70      	cmp	r3, #112	; 0x70
 800541e:	d87b      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b60      	cmp	r3, #96	; 0x60
 8005422:	d050      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005424:	2b60      	cmp	r3, #96	; 0x60
 8005426:	d877      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b50      	cmp	r3, #80	; 0x50
 800542a:	d03c      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0xfa>
 800542c:	2b50      	cmp	r3, #80	; 0x50
 800542e:	d873      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	d058      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	d86f      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005438:	2b30      	cmp	r3, #48	; 0x30
 800543a:	d064      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x15a>
 800543c:	2b30      	cmp	r3, #48	; 0x30
 800543e:	d86b      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005440:	2b20      	cmp	r3, #32
 8005442:	d060      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x15a>
 8005444:	2b20      	cmp	r3, #32
 8005446:	d867      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d05c      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x15a>
 800544c:	2b10      	cmp	r3, #16
 800544e:	d05a      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x15a>
 8005450:	e062      	b.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6899      	ldr	r1, [r3, #8]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f000 fb19 	bl	8005a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	609a      	str	r2, [r3, #8]
      break;
 800547e:	e04f      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6899      	ldr	r1, [r3, #8]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f000 fb02 	bl	8005a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054a2:	609a      	str	r2, [r3, #8]
      break;
 80054a4:	e03c      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6859      	ldr	r1, [r3, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f000 fa76 	bl	80059a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2150      	movs	r1, #80	; 0x50
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 facf 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 80054c4:	e02c      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6859      	ldr	r1, [r3, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f000 fa95 	bl	8005a02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2160      	movs	r1, #96	; 0x60
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fabf 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 80054e4:	e01c      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6859      	ldr	r1, [r3, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	461a      	mov	r2, r3
 80054f4:	f000 fa56 	bl	80059a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2140      	movs	r1, #64	; 0x40
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 faaf 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 8005504:	e00c      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f000 faa6 	bl	8005a62 <TIM_ITRx_SetConfig>
      break;
 8005516:	e003      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
      break;
 800551c:	e000      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800551e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a34      	ldr	r2, [pc, #208]	; (8005670 <TIM_Base_SetConfig+0xe4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00f      	beq.n	80055c4 <TIM_Base_SetConfig+0x38>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055aa:	d00b      	beq.n	80055c4 <TIM_Base_SetConfig+0x38>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a31      	ldr	r2, [pc, #196]	; (8005674 <TIM_Base_SetConfig+0xe8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d007      	beq.n	80055c4 <TIM_Base_SetConfig+0x38>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a30      	ldr	r2, [pc, #192]	; (8005678 <TIM_Base_SetConfig+0xec>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_Base_SetConfig+0x38>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a2f      	ldr	r2, [pc, #188]	; (800567c <TIM_Base_SetConfig+0xf0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d108      	bne.n	80055d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a25      	ldr	r2, [pc, #148]	; (8005670 <TIM_Base_SetConfig+0xe4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01b      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e4:	d017      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a22      	ldr	r2, [pc, #136]	; (8005674 <TIM_Base_SetConfig+0xe8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a21      	ldr	r2, [pc, #132]	; (8005678 <TIM_Base_SetConfig+0xec>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00f      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a20      	ldr	r2, [pc, #128]	; (800567c <TIM_Base_SetConfig+0xf0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1f      	ldr	r2, [pc, #124]	; (8005680 <TIM_Base_SetConfig+0xf4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <TIM_Base_SetConfig+0xf8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1d      	ldr	r2, [pc, #116]	; (8005688 <TIM_Base_SetConfig+0xfc>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a08      	ldr	r2, [pc, #32]	; (8005670 <TIM_Base_SetConfig+0xe4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d103      	bne.n	800565c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	615a      	str	r2, [r3, #20]
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40010000 	.word	0x40010000
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800
 800567c:	40000c00 	.word	0x40000c00
 8005680:	40014000 	.word	0x40014000
 8005684:	40014400 	.word	0x40014400
 8005688:	40014800 	.word	0x40014800

0800568c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f023 0201 	bic.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0303 	bic.w	r3, r3, #3
 80056c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f023 0302 	bic.w	r3, r3, #2
 80056d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <TIM_OC1_SetConfig+0xc8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d10c      	bne.n	8005702 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0308 	bic.w	r3, r3, #8
 80056ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 0304 	bic.w	r3, r3, #4
 8005700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <TIM_OC1_SetConfig+0xc8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d111      	bne.n	800572e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	621a      	str	r2, [r3, #32]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40010000 	.word	0x40010000

08005758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f023 0210 	bic.w	r2, r3, #16
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0320 	bic.w	r3, r3, #32
 80057a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1e      	ldr	r2, [pc, #120]	; (800582c <TIM_OC2_SetConfig+0xd4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d10d      	bne.n	80057d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a15      	ldr	r2, [pc, #84]	; (800582c <TIM_OC2_SetConfig+0xd4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d113      	bne.n	8005804 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40010000 	.word	0x40010000

08005830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0303 	bic.w	r3, r3, #3
 8005866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <TIM_OC3_SetConfig+0xd0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10d      	bne.n	80058aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a14      	ldr	r2, [pc, #80]	; (8005900 <TIM_OC3_SetConfig+0xd0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d113      	bne.n	80058da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	621a      	str	r2, [r3, #32]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	40010000 	.word	0x40010000

08005904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800594e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	031b      	lsls	r3, r3, #12
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a10      	ldr	r2, [pc, #64]	; (80059a0 <TIM_OC4_SetConfig+0x9c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d109      	bne.n	8005978 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	019b      	lsls	r3, r3, #6
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000

080059a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f023 0201 	bic.w	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f023 030a 	bic.w	r3, r3, #10
 80059e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b087      	sub	sp, #28
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f023 0210 	bic.w	r2, r3, #16
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	031b      	lsls	r3, r3, #12
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b085      	sub	sp, #20
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f043 0307 	orr.w	r3, r3, #7
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	609a      	str	r2, [r3, #8]
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	021a      	lsls	r2, r3, #8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	609a      	str	r2, [r3, #8]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	2201      	movs	r2, #1
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a1a      	ldr	r2, [r3, #32]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	43db      	mvns	r3, r3
 8005afa:	401a      	ands	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1a      	ldr	r2, [r3, #32]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	431a      	orrs	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e050      	b.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d018      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b88:	d013      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a18      	ldr	r2, [pc, #96]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00e      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a16      	ldr	r2, [pc, #88]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d009      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d004      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10c      	bne.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40010000 	.word	0x40010000
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40000800 	.word	0x40000800
 8005bf8:	40000c00 	.word	0x40000c00
 8005bfc:	40014000 	.word	0x40014000

08005c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e03f      	b.n	8005cba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fc ffd0 	bl	8002bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	; 0x24
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fcdf 	bl	8006630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d11d      	bne.n	8005d18 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_UART_Receive_IT+0x26>
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e016      	b.n	8005d1a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_UART_Receive_IT+0x38>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e00f      	b.n	8005d1a <HAL_UART_Receive_IT+0x58>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fab6 	bl	8006280 <UART_Start_Receive_IT>
 8005d14:	4603      	mov	r3, r0
 8005d16:	e000      	b.n	8005d1a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d18:	2302      	movs	r3, #2
  }
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b0ba      	sub	sp, #232	; 0xe8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10f      	bne.n	8005d8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <HAL_UART_IRQHandler+0x66>
 8005d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fb99 	bl	80064ba <UART_Receive_IT>
      return;
 8005d88:	e256      	b.n	8006238 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 80de 	beq.w	8005f50 <HAL_UART_IRQHandler+0x22c>
 8005d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d106      	bne.n	8005dae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80d1 	beq.w	8005f50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xae>
 8005dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f043 0201 	orr.w	r2, r3, #1
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <HAL_UART_IRQHandler+0xd2>
 8005dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f043 0202 	orr.w	r2, r3, #2
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_UART_IRQHandler+0xf6>
 8005e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f043 0204 	orr.w	r2, r3, #4
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d011      	beq.n	8005e4a <HAL_UART_IRQHandler+0x126>
 8005e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d105      	bne.n	8005e3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	f043 0208 	orr.w	r2, r3, #8
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 81ed 	beq.w	800622e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_UART_IRQHandler+0x14e>
 8005e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fb24 	bl	80064ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <HAL_UART_IRQHandler+0x17a>
 8005e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d04f      	beq.n	8005f3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa2c 	bl	80062fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	d141      	bne.n	8005f36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3314      	adds	r3, #20
 8005eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3314      	adds	r3, #20
 8005eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ede:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005eea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1d9      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d013      	beq.n	8005f2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	4a7d      	ldr	r2, [pc, #500]	; (8006100 <HAL_UART_IRQHandler+0x3dc>)
 8005f0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fd fdbc 	bl	8003a90 <HAL_DMA_Abort_IT>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	e00e      	b.n	8005f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f990 	bl	8006254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	e00a      	b.n	8005f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f98c 	bl	8006254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e006      	b.n	8005f4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f988 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f4a:	e170      	b.n	800622e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	bf00      	nop
    return;
 8005f4e:	e16e      	b.n	800622e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	f040 814a 	bne.w	80061ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 8143 	beq.w	80061ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 813c 	beq.w	80061ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b40      	cmp	r3, #64	; 0x40
 8005f98:	f040 80b4 	bne.w	8006104 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8140 	beq.w	8006232 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	f080 8139 	bcs.w	8006232 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd2:	f000 8088 	beq.w	80060e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800600e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800601a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1d9      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3314      	adds	r3, #20
 8006042:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006046:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800604a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800604e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e1      	bne.n	8006022 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3314      	adds	r3, #20
 8006064:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800606e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3314      	adds	r3, #20
 800607e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006082:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006084:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006088:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e3      	bne.n	800605e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b6:	f023 0310 	bic.w	r3, r3, #16
 80060ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e3      	bne.n	80060a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fd fc65 	bl	80039b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f8b6 	bl	8006268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060fc:	e099      	b.n	8006232 <HAL_UART_IRQHandler+0x50e>
 80060fe:	bf00      	nop
 8006100:	080063c3 	.word	0x080063c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800610c:	b29b      	uxth	r3, r3
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 808b 	beq.w	8006236 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006120:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8086 	beq.w	8006236 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006140:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800614e:	647a      	str	r2, [r7, #68]	; 0x44
 8006150:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800615c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e3      	bne.n	800612a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3314      	adds	r3, #20
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	623b      	str	r3, [r7, #32]
   return(result);
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	f023 0301 	bic.w	r3, r3, #1
 8006178:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3314      	adds	r3, #20
 8006182:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006186:	633a      	str	r2, [r7, #48]	; 0x30
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800618c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e3      	bne.n	8006162 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	330c      	adds	r3, #12
 80061ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0310 	bic.w	r3, r3, #16
 80061be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330c      	adds	r3, #12
 80061c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061cc:	61fa      	str	r2, [r7, #28]
 80061ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	69b9      	ldr	r1, [r7, #24]
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	617b      	str	r3, [r7, #20]
   return(result);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e3      	bne.n	80061a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f83e 	bl	8006268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061ec:	e023      	b.n	8006236 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <HAL_UART_IRQHandler+0x4ea>
 80061fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f8ef 	bl	80063ea <UART_Transmit_IT>
    return;
 800620c:	e014      	b.n	8006238 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800620e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00e      	beq.n	8006238 <HAL_UART_IRQHandler+0x514>
 800621a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f92f 	bl	800648a <UART_EndTransmit_IT>
    return;
 800622c:	e004      	b.n	8006238 <HAL_UART_IRQHandler+0x514>
    return;
 800622e:	bf00      	nop
 8006230:	e002      	b.n	8006238 <HAL_UART_IRQHandler+0x514>
      return;
 8006232:	bf00      	nop
 8006234:	e000      	b.n	8006238 <HAL_UART_IRQHandler+0x514>
      return;
 8006236:	bf00      	nop
  }
}
 8006238:	37e8      	adds	r7, #232	; 0xe8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop

08006240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	88fa      	ldrh	r2, [r7, #6]
 800629e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2222      	movs	r2, #34	; 0x22
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0220 	orr.w	r2, r2, #32
 80062ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b095      	sub	sp, #84	; 0x54
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800631a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006324:	643a      	str	r2, [r7, #64]	; 0x40
 8006326:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800632a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e5      	bne.n	8006304 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3314      	adds	r3, #20
 800633e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	61fb      	str	r3, [r7, #28]
   return(result);
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f023 0301 	bic.w	r3, r3, #1
 800634e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3314      	adds	r3, #20
 8006356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800635e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e5      	bne.n	8006338 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	2b01      	cmp	r3, #1
 8006372:	d119      	bne.n	80063a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	60bb      	str	r3, [r7, #8]
   return(result);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f023 0310 	bic.w	r3, r3, #16
 800638a:	647b      	str	r3, [r7, #68]	; 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006394:	61ba      	str	r2, [r7, #24]
 8006396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6979      	ldr	r1, [r7, #20]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	613b      	str	r3, [r7, #16]
   return(result);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063b6:	bf00      	nop
 80063b8:	3754      	adds	r7, #84	; 0x54
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff ff39 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b21      	cmp	r3, #33	; 0x21
 80063fc:	d13e      	bne.n	800647c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006406:	d114      	bne.n	8006432 <UART_Transmit_IT+0x48>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d110      	bne.n	8006432 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006424:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	1c9a      	adds	r2, r3, #2
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	621a      	str	r2, [r3, #32]
 8006430:	e008      	b.n	8006444 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	1c59      	adds	r1, r3, #1
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6211      	str	r1, [r2, #32]
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29b      	uxth	r3, r3
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	4619      	mov	r1, r3
 8006452:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10f      	bne.n	8006478 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006466:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006476:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fec8 	bl	8006240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b08c      	sub	sp, #48	; 0x30
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b22      	cmp	r3, #34	; 0x22
 80064cc:	f040 80ab 	bne.w	8006626 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d8:	d117      	bne.n	800650a <UART_Receive_IT+0x50>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d113      	bne.n	800650a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006502:	1c9a      	adds	r2, r3, #2
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	629a      	str	r2, [r3, #40]	; 0x28
 8006508:	e026      	b.n	8006558 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006510:	2300      	movs	r3, #0
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651c:	d007      	beq.n	800652e <UART_Receive_IT+0x74>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <UART_Receive_IT+0x82>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	b2da      	uxtb	r2, r3
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e008      	b.n	800654e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006548:	b2da      	uxtb	r2, r3
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29b      	uxth	r3, r3
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4619      	mov	r1, r3
 8006566:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006568:	2b00      	cmp	r3, #0
 800656a:	d15a      	bne.n	8006622 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0220 	bic.w	r2, r2, #32
 800657a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800658a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695a      	ldr	r2, [r3, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0201 	bic.w	r2, r2, #1
 800659a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d135      	bne.n	8006618 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	613b      	str	r3, [r7, #16]
   return(result);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f023 0310 	bic.w	r3, r3, #16
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	330c      	adds	r3, #12
 80065d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d2:	623a      	str	r2, [r7, #32]
 80065d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	69f9      	ldr	r1, [r7, #28]
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	61bb      	str	r3, [r7, #24]
   return(result);
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e5      	bne.n	80065b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d10a      	bne.n	800660a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff fe29 	bl	8006268 <HAL_UARTEx_RxEventCallback>
 8006616:	e002      	b.n	800661e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7f9 ff5d 	bl	80004d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	e002      	b.n	8006628 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	e000      	b.n	8006628 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006626:	2302      	movs	r3, #2
  }
}
 8006628:	4618      	mov	r0, r3
 800662a:	3730      	adds	r7, #48	; 0x30
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006634:	b0c0      	sub	sp, #256	; 0x100
 8006636:	af00      	add	r7, sp, #0
 8006638:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664c:	68d9      	ldr	r1, [r3, #12]
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	ea40 0301 	orr.w	r3, r0, r1
 8006658:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	431a      	orrs	r2, r3
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	431a      	orrs	r2, r3
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006688:	f021 010c 	bic.w	r1, r1, #12
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006696:	430b      	orrs	r3, r1
 8006698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066aa:	6999      	ldr	r1, [r3, #24]
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	ea40 0301 	orr.w	r3, r0, r1
 80066b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b8f      	ldr	r3, [pc, #572]	; (80068fc <UART_SetConfig+0x2cc>)
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d005      	beq.n	80066d0 <UART_SetConfig+0xa0>
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4b8d      	ldr	r3, [pc, #564]	; (8006900 <UART_SetConfig+0x2d0>)
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d104      	bne.n	80066da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066d0:	f7fe fa78 	bl	8004bc4 <HAL_RCC_GetPCLK2Freq>
 80066d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066d8:	e003      	b.n	80066e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066da:	f7fe fa5f 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 80066de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ec:	f040 810c 	bne.w	8006908 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006702:	4622      	mov	r2, r4
 8006704:	462b      	mov	r3, r5
 8006706:	1891      	adds	r1, r2, r2
 8006708:	65b9      	str	r1, [r7, #88]	; 0x58
 800670a:	415b      	adcs	r3, r3
 800670c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800670e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006712:	4621      	mov	r1, r4
 8006714:	eb12 0801 	adds.w	r8, r2, r1
 8006718:	4629      	mov	r1, r5
 800671a:	eb43 0901 	adc.w	r9, r3, r1
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800672a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800672e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006732:	4690      	mov	r8, r2
 8006734:	4699      	mov	r9, r3
 8006736:	4623      	mov	r3, r4
 8006738:	eb18 0303 	adds.w	r3, r8, r3
 800673c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006740:	462b      	mov	r3, r5
 8006742:	eb49 0303 	adc.w	r3, r9, r3
 8006746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800674a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006756:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800675a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800675e:	460b      	mov	r3, r1
 8006760:	18db      	adds	r3, r3, r3
 8006762:	653b      	str	r3, [r7, #80]	; 0x50
 8006764:	4613      	mov	r3, r2
 8006766:	eb42 0303 	adc.w	r3, r2, r3
 800676a:	657b      	str	r3, [r7, #84]	; 0x54
 800676c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006770:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006774:	f7f9 fd2e 	bl	80001d4 <__aeabi_uldivmod>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4b61      	ldr	r3, [pc, #388]	; (8006904 <UART_SetConfig+0x2d4>)
 800677e:	fba3 2302 	umull	r2, r3, r3, r2
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	011c      	lsls	r4, r3, #4
 8006786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800678a:	2200      	movs	r2, #0
 800678c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006790:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006794:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	1891      	adds	r1, r2, r2
 800679e:	64b9      	str	r1, [r7, #72]	; 0x48
 80067a0:	415b      	adcs	r3, r3
 80067a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067a8:	4641      	mov	r1, r8
 80067aa:	eb12 0a01 	adds.w	sl, r2, r1
 80067ae:	4649      	mov	r1, r9
 80067b0:	eb43 0b01 	adc.w	fp, r3, r1
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067c8:	4692      	mov	sl, r2
 80067ca:	469b      	mov	fp, r3
 80067cc:	4643      	mov	r3, r8
 80067ce:	eb1a 0303 	adds.w	r3, sl, r3
 80067d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067d6:	464b      	mov	r3, r9
 80067d8:	eb4b 0303 	adc.w	r3, fp, r3
 80067dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067f4:	460b      	mov	r3, r1
 80067f6:	18db      	adds	r3, r3, r3
 80067f8:	643b      	str	r3, [r7, #64]	; 0x40
 80067fa:	4613      	mov	r3, r2
 80067fc:	eb42 0303 	adc.w	r3, r2, r3
 8006800:	647b      	str	r3, [r7, #68]	; 0x44
 8006802:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006806:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800680a:	f7f9 fce3 	bl	80001d4 <__aeabi_uldivmod>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4611      	mov	r1, r2
 8006814:	4b3b      	ldr	r3, [pc, #236]	; (8006904 <UART_SetConfig+0x2d4>)
 8006816:	fba3 2301 	umull	r2, r3, r3, r1
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	2264      	movs	r2, #100	; 0x64
 800681e:	fb02 f303 	mul.w	r3, r2, r3
 8006822:	1acb      	subs	r3, r1, r3
 8006824:	00db      	lsls	r3, r3, #3
 8006826:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800682a:	4b36      	ldr	r3, [pc, #216]	; (8006904 <UART_SetConfig+0x2d4>)
 800682c:	fba3 2302 	umull	r2, r3, r3, r2
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006838:	441c      	add	r4, r3
 800683a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683e:	2200      	movs	r2, #0
 8006840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006844:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006848:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800684c:	4642      	mov	r2, r8
 800684e:	464b      	mov	r3, r9
 8006850:	1891      	adds	r1, r2, r2
 8006852:	63b9      	str	r1, [r7, #56]	; 0x38
 8006854:	415b      	adcs	r3, r3
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800685c:	4641      	mov	r1, r8
 800685e:	1851      	adds	r1, r2, r1
 8006860:	6339      	str	r1, [r7, #48]	; 0x30
 8006862:	4649      	mov	r1, r9
 8006864:	414b      	adcs	r3, r1
 8006866:	637b      	str	r3, [r7, #52]	; 0x34
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006874:	4659      	mov	r1, fp
 8006876:	00cb      	lsls	r3, r1, #3
 8006878:	4651      	mov	r1, sl
 800687a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800687e:	4651      	mov	r1, sl
 8006880:	00ca      	lsls	r2, r1, #3
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	4603      	mov	r3, r0
 8006888:	4642      	mov	r2, r8
 800688a:	189b      	adds	r3, r3, r2
 800688c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006890:	464b      	mov	r3, r9
 8006892:	460a      	mov	r2, r1
 8006894:	eb42 0303 	adc.w	r3, r2, r3
 8006898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068b0:	460b      	mov	r3, r1
 80068b2:	18db      	adds	r3, r3, r3
 80068b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b6:	4613      	mov	r3, r2
 80068b8:	eb42 0303 	adc.w	r3, r2, r3
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068c6:	f7f9 fc85 	bl	80001d4 <__aeabi_uldivmod>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <UART_SetConfig+0x2d4>)
 80068d0:	fba3 1302 	umull	r1, r3, r3, r2
 80068d4:	095b      	lsrs	r3, r3, #5
 80068d6:	2164      	movs	r1, #100	; 0x64
 80068d8:	fb01 f303 	mul.w	r3, r1, r3
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	3332      	adds	r3, #50	; 0x32
 80068e2:	4a08      	ldr	r2, [pc, #32]	; (8006904 <UART_SetConfig+0x2d4>)
 80068e4:	fba2 2303 	umull	r2, r3, r2, r3
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	f003 0207 	and.w	r2, r3, #7
 80068ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4422      	add	r2, r4
 80068f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068f8:	e105      	b.n	8006b06 <UART_SetConfig+0x4d6>
 80068fa:	bf00      	nop
 80068fc:	40011000 	.word	0x40011000
 8006900:	40011400 	.word	0x40011400
 8006904:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690c:	2200      	movs	r2, #0
 800690e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006912:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006916:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800691a:	4642      	mov	r2, r8
 800691c:	464b      	mov	r3, r9
 800691e:	1891      	adds	r1, r2, r2
 8006920:	6239      	str	r1, [r7, #32]
 8006922:	415b      	adcs	r3, r3
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
 8006926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800692a:	4641      	mov	r1, r8
 800692c:	1854      	adds	r4, r2, r1
 800692e:	4649      	mov	r1, r9
 8006930:	eb43 0501 	adc.w	r5, r3, r1
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	00eb      	lsls	r3, r5, #3
 800693e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006942:	00e2      	lsls	r2, r4, #3
 8006944:	4614      	mov	r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	4643      	mov	r3, r8
 800694a:	18e3      	adds	r3, r4, r3
 800694c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006950:	464b      	mov	r3, r9
 8006952:	eb45 0303 	adc.w	r3, r5, r3
 8006956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800695a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006966:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006976:	4629      	mov	r1, r5
 8006978:	008b      	lsls	r3, r1, #2
 800697a:	4621      	mov	r1, r4
 800697c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006980:	4621      	mov	r1, r4
 8006982:	008a      	lsls	r2, r1, #2
 8006984:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006988:	f7f9 fc24 	bl	80001d4 <__aeabi_uldivmod>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4b60      	ldr	r3, [pc, #384]	; (8006b14 <UART_SetConfig+0x4e4>)
 8006992:	fba3 2302 	umull	r2, r3, r3, r2
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	011c      	lsls	r4, r3, #4
 800699a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069ac:	4642      	mov	r2, r8
 80069ae:	464b      	mov	r3, r9
 80069b0:	1891      	adds	r1, r2, r2
 80069b2:	61b9      	str	r1, [r7, #24]
 80069b4:	415b      	adcs	r3, r3
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069bc:	4641      	mov	r1, r8
 80069be:	1851      	adds	r1, r2, r1
 80069c0:	6139      	str	r1, [r7, #16]
 80069c2:	4649      	mov	r1, r9
 80069c4:	414b      	adcs	r3, r1
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069d4:	4659      	mov	r1, fp
 80069d6:	00cb      	lsls	r3, r1, #3
 80069d8:	4651      	mov	r1, sl
 80069da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069de:	4651      	mov	r1, sl
 80069e0:	00ca      	lsls	r2, r1, #3
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	4642      	mov	r2, r8
 80069ea:	189b      	adds	r3, r3, r2
 80069ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069f0:	464b      	mov	r3, r9
 80069f2:	460a      	mov	r2, r1
 80069f4:	eb42 0303 	adc.w	r3, r2, r3
 80069f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a14:	4649      	mov	r1, r9
 8006a16:	008b      	lsls	r3, r1, #2
 8006a18:	4641      	mov	r1, r8
 8006a1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a1e:	4641      	mov	r1, r8
 8006a20:	008a      	lsls	r2, r1, #2
 8006a22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a26:	f7f9 fbd5 	bl	80001d4 <__aeabi_uldivmod>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4b39      	ldr	r3, [pc, #228]	; (8006b14 <UART_SetConfig+0x4e4>)
 8006a30:	fba3 1302 	umull	r1, r3, r3, r2
 8006a34:	095b      	lsrs	r3, r3, #5
 8006a36:	2164      	movs	r1, #100	; 0x64
 8006a38:	fb01 f303 	mul.w	r3, r1, r3
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	3332      	adds	r3, #50	; 0x32
 8006a42:	4a34      	ldr	r2, [pc, #208]	; (8006b14 <UART_SetConfig+0x4e4>)
 8006a44:	fba2 2303 	umull	r2, r3, r2, r3
 8006a48:	095b      	lsrs	r3, r3, #5
 8006a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a4e:	441c      	add	r4, r3
 8006a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a54:	2200      	movs	r2, #0
 8006a56:	673b      	str	r3, [r7, #112]	; 0x70
 8006a58:	677a      	str	r2, [r7, #116]	; 0x74
 8006a5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a5e:	4642      	mov	r2, r8
 8006a60:	464b      	mov	r3, r9
 8006a62:	1891      	adds	r1, r2, r2
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	415b      	adcs	r3, r3
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a6e:	4641      	mov	r1, r8
 8006a70:	1851      	adds	r1, r2, r1
 8006a72:	6039      	str	r1, [r7, #0]
 8006a74:	4649      	mov	r1, r9
 8006a76:	414b      	adcs	r3, r1
 8006a78:	607b      	str	r3, [r7, #4]
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a86:	4659      	mov	r1, fp
 8006a88:	00cb      	lsls	r3, r1, #3
 8006a8a:	4651      	mov	r1, sl
 8006a8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a90:	4651      	mov	r1, sl
 8006a92:	00ca      	lsls	r2, r1, #3
 8006a94:	4610      	mov	r0, r2
 8006a96:	4619      	mov	r1, r3
 8006a98:	4603      	mov	r3, r0
 8006a9a:	4642      	mov	r2, r8
 8006a9c:	189b      	adds	r3, r3, r2
 8006a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	460a      	mov	r2, r1
 8006aa4:	eb42 0303 	adc.w	r3, r2, r3
 8006aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ab4:	667a      	str	r2, [r7, #100]	; 0x64
 8006ab6:	f04f 0200 	mov.w	r2, #0
 8006aba:	f04f 0300 	mov.w	r3, #0
 8006abe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	008b      	lsls	r3, r1, #2
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006acc:	4641      	mov	r1, r8
 8006ace:	008a      	lsls	r2, r1, #2
 8006ad0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ad4:	f7f9 fb7e 	bl	80001d4 <__aeabi_uldivmod>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <UART_SetConfig+0x4e4>)
 8006ade:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	2164      	movs	r1, #100	; 0x64
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	3332      	adds	r3, #50	; 0x32
 8006af0:	4a08      	ldr	r2, [pc, #32]	; (8006b14 <UART_SetConfig+0x4e4>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	f003 020f 	and.w	r2, r3, #15
 8006afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4422      	add	r2, r4
 8006b04:	609a      	str	r2, [r3, #8]
}
 8006b06:	bf00      	nop
 8006b08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b12:	bf00      	nop
 8006b14:	51eb851f 	.word	0x51eb851f

08006b18 <__libc_init_array>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	4d0d      	ldr	r5, [pc, #52]	; (8006b50 <__libc_init_array+0x38>)
 8006b1c:	4c0d      	ldr	r4, [pc, #52]	; (8006b54 <__libc_init_array+0x3c>)
 8006b1e:	1b64      	subs	r4, r4, r5
 8006b20:	10a4      	asrs	r4, r4, #2
 8006b22:	2600      	movs	r6, #0
 8006b24:	42a6      	cmp	r6, r4
 8006b26:	d109      	bne.n	8006b3c <__libc_init_array+0x24>
 8006b28:	4d0b      	ldr	r5, [pc, #44]	; (8006b58 <__libc_init_array+0x40>)
 8006b2a:	4c0c      	ldr	r4, [pc, #48]	; (8006b5c <__libc_init_array+0x44>)
 8006b2c:	f000 f82e 	bl	8006b8c <_init>
 8006b30:	1b64      	subs	r4, r4, r5
 8006b32:	10a4      	asrs	r4, r4, #2
 8006b34:	2600      	movs	r6, #0
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	d105      	bne.n	8006b46 <__libc_init_array+0x2e>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b40:	4798      	blx	r3
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7ee      	b.n	8006b24 <__libc_init_array+0xc>
 8006b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4a:	4798      	blx	r3
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	e7f2      	b.n	8006b36 <__libc_init_array+0x1e>
 8006b50:	08006dc4 	.word	0x08006dc4
 8006b54:	08006dc4 	.word	0x08006dc4
 8006b58:	08006dc4 	.word	0x08006dc4
 8006b5c:	08006dc8 	.word	0x08006dc8

08006b60 <memcpy>:
 8006b60:	440a      	add	r2, r1
 8006b62:	4291      	cmp	r1, r2
 8006b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b68:	d100      	bne.n	8006b6c <memcpy+0xc>
 8006b6a:	4770      	bx	lr
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b76:	4291      	cmp	r1, r2
 8006b78:	d1f9      	bne.n	8006b6e <memcpy+0xe>
 8006b7a:	bd10      	pop	{r4, pc}

08006b7c <memset>:
 8006b7c:	4402      	add	r2, r0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d100      	bne.n	8006b86 <memset+0xa>
 8006b84:	4770      	bx	lr
 8006b86:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8a:	e7f9      	b.n	8006b80 <memset+0x4>

08006b8c <_init>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	bf00      	nop
 8006b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b92:	bc08      	pop	{r3}
 8006b94:	469e      	mov	lr, r3
 8006b96:	4770      	bx	lr

08006b98 <_fini>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	bf00      	nop
 8006b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9e:	bc08      	pop	{r3}
 8006ba0:	469e      	mov	lr, r3
 8006ba2:	4770      	bx	lr
