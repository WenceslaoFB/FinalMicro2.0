
PROT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d4  080053d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053dc  080053dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080053e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000010  080053f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  080053f4  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df98  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c08  00000000  00000000  0002dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002fbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00030830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015edd  00000000  00000000  000313e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0c4  00000000  00000000  000472c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c851  00000000  00000000  00055389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1bda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000342c  00000000  00000000  000e1c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005168 	.word	0x08005168

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005168 	.word	0x08005168

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_UART_RxCpltCallback>:
void DecodeComands(uint8_t *buffer,uint8_t indexCMD);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

	indRX_W++;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	3301      	adds	r3, #1
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004ec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t *) &buf_rx[indRX_W], 1);
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_UART_RxCpltCallback+0x38>)
 80004f8:	4413      	add	r3, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_UART_RxCpltCallback+0x3c>)
 8000500:	f003 fecd 	bl	800429e <HAL_UART_Receive_IT>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000355 	.word	0x20000355
 8000510:	20000144 	.word	0x20000144
 8000514:	200000bc 	.word	0x200000bc

08000518 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM4){//ENTRA CADA 10 MS
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a18      	ldr	r2, [pc, #96]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d127      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x62>
			//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADCData[indexADC],8);

			time100ms--;
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	3b01      	subs	r3, #1
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000536:	701a      	strb	r2, [r3, #0]
			if(!time100ms){
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d107      	bne.n	8000552 <HAL_TIM_PeriodElapsedCallback+0x3a>
				time100ms=10;
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000544:	220a      	movs	r2, #10
 8000546:	701a      	strb	r2, [r3, #0]
				ON100MS = 1;
 8000548:	4a11      	ldr	r2, [pc, #68]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800054a:	7813      	ldrb	r3, [r2, #0]
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	7013      	strb	r3, [r2, #0]
			}
			time10ms--;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	3b01      	subs	r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800055e:	701a      	strb	r2, [r3, #0]
			if(!time10ms){
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d107      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x62>
				time10ms=1;
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800056c:	2201      	movs	r2, #1
 800056e:	701a      	strb	r2, [r3, #0]
				ON10MS = 1;
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000572:	7813      	ldrb	r3, [r2, #0]
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	7013      	strb	r3, [r2, #0]
			}
		}
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40000800 	.word	0x40000800
 800058c:	20000353 	.word	0x20000353
 8000590:	20000378 	.word	0x20000378
 8000594:	20000354 	.word	0x20000354

08000598 <uart>:

void uart(){
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	if((huart1.Instance->SR & UART_FLAG_TXE)==UART_FLAG_TXE){
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <uart+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a6:	2b80      	cmp	r3, #128	; 0x80
 80005a8:	d110      	bne.n	80005cc <uart+0x34>
		huart1.Instance->DR=buf_tx[indTX_R];
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <uart+0x44>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <uart+0x48>)
 80005b4:	5c9b      	ldrb	r3, [r3, r2]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <uart+0x40>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
		indTX_R++;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <uart+0x44>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <uart+0x44>)
 80005ca:	701a      	strb	r2, [r3, #0]
	}
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000bc 	.word	0x200000bc
 80005dc:	20000358 	.word	0x20000358
 80005e0:	20000244 	.word	0x20000244

080005e4 <initEsp>:

void initEsp(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

	if(readyToSend){
 80005e8:	4b73      	ldr	r3, [pc, #460]	; (80007b8 <initEsp+0x1d4>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	f000 80dc 	beq.w	80007b0 <initEsp+0x1cc>
		switch(AT){
 80005f8:	4b70      	ldr	r3, [pc, #448]	; (80007bc <initEsp+0x1d8>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b07      	cmp	r3, #7
 80005fe:	f200 80d8 	bhi.w	80007b2 <initEsp+0x1ce>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <initEsp+0x24>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000629 	.word	0x08000629
 800060c:	0800065f 	.word	0x0800065f
 8000610:	08000695 	.word	0x08000695
 8000614:	080006cb 	.word	0x080006cb
 8000618:	08000701 	.word	0x08000701
 800061c:	08000737 	.word	0x08000737
 8000620:	0800076d 	.word	0x0800076d
 8000624:	080007a3 	.word	0x080007a3
			case 0:
				memcpy((uint8_t*)&buf_tx[indTX_W],AT_com,4);
 8000628:	4b65      	ldr	r3, [pc, #404]	; (80007c0 <initEsp+0x1dc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	4b64      	ldr	r3, [pc, #400]	; (80007c4 <initEsp+0x1e0>)
 8000632:	4413      	add	r3, r2
 8000634:	2204      	movs	r2, #4
 8000636:	4964      	ldr	r1, [pc, #400]	; (80007c8 <initEsp+0x1e4>)
 8000638:	4618      	mov	r0, r3
 800063a:	f004 fd7f 	bl	800513c <memcpy>
				indTX_W+=4;
 800063e:	4b60      	ldr	r3, [pc, #384]	; (80007c0 <initEsp+0x1dc>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	3304      	adds	r3, #4
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b5d      	ldr	r3, [pc, #372]	; (80007c0 <initEsp+0x1dc>)
 800064a:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 800064c:	4b5f      	ldr	r3, [pc, #380]	; (80007cc <initEsp+0x1e8>)
 800064e:	220a      	movs	r2, #10
 8000650:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000652:	4a59      	ldr	r2, [pc, #356]	; (80007b8 <initEsp+0x1d4>)
 8000654:	7813      	ldrb	r3, [r2, #0]
 8000656:	f36f 1304 	bfc	r3, #4, #1
 800065a:	7013      	strb	r3, [r2, #0]
			break;
 800065c:	e0a9      	b.n	80007b2 <initEsp+0x1ce>
			case 1:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWQAP,10);
 800065e:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <initEsp+0x1dc>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <initEsp+0x1e0>)
 8000668:	4413      	add	r3, r2
 800066a:	220a      	movs	r2, #10
 800066c:	4958      	ldr	r1, [pc, #352]	; (80007d0 <initEsp+0x1ec>)
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fd64 	bl	800513c <memcpy>
				indTX_W+=10;
 8000674:	4b52      	ldr	r3, [pc, #328]	; (80007c0 <initEsp+0x1dc>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	330a      	adds	r3, #10
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b50      	ldr	r3, [pc, #320]	; (80007c0 <initEsp+0x1dc>)
 8000680:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 8000682:	4b52      	ldr	r3, [pc, #328]	; (80007cc <initEsp+0x1e8>)
 8000684:	220a      	movs	r2, #10
 8000686:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000688:	4a4b      	ldr	r2, [pc, #300]	; (80007b8 <initEsp+0x1d4>)
 800068a:	7813      	ldrb	r3, [r2, #0]
 800068c:	f36f 1304 	bfc	r3, #4, #1
 8000690:	7013      	strb	r3, [r2, #0]
			break;
 8000692:	e08e      	b.n	80007b2 <initEsp+0x1ce>
			case 2:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWMODE,13);
 8000694:	4b4a      	ldr	r3, [pc, #296]	; (80007c0 <initEsp+0x1dc>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	4b49      	ldr	r3, [pc, #292]	; (80007c4 <initEsp+0x1e0>)
 800069e:	4413      	add	r3, r2
 80006a0:	220d      	movs	r2, #13
 80006a2:	494c      	ldr	r1, [pc, #304]	; (80007d4 <initEsp+0x1f0>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 fd49 	bl	800513c <memcpy>
				indTX_W+=13;
 80006aa:	4b45      	ldr	r3, [pc, #276]	; (80007c0 <initEsp+0x1dc>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	330d      	adds	r3, #13
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b42      	ldr	r3, [pc, #264]	; (80007c0 <initEsp+0x1dc>)
 80006b6:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 80006b8:	4b44      	ldr	r3, [pc, #272]	; (80007cc <initEsp+0x1e8>)
 80006ba:	220a      	movs	r2, #10
 80006bc:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 80006be:	4a3e      	ldr	r2, [pc, #248]	; (80007b8 <initEsp+0x1d4>)
 80006c0:	7813      	ldrb	r3, [r2, #0]
 80006c2:	f36f 1304 	bfc	r3, #4, #1
 80006c6:	7013      	strb	r3, [r2, #0]
			break;
 80006c8:	e073      	b.n	80007b2 <initEsp+0x1ce>
			case 3:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWJAP_casa,36);
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <initEsp+0x1dc>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b3c      	ldr	r3, [pc, #240]	; (80007c4 <initEsp+0x1e0>)
 80006d4:	4413      	add	r3, r2
 80006d6:	2224      	movs	r2, #36	; 0x24
 80006d8:	493f      	ldr	r1, [pc, #252]	; (80007d8 <initEsp+0x1f4>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fd2e 	bl	800513c <memcpy>
				indTX_W+=36;
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <initEsp+0x1dc>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	3324      	adds	r3, #36	; 0x24
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <initEsp+0x1dc>)
 80006ec:	701a      	strb	r2, [r3, #0]
				timeout2 = 30;
 80006ee:	4b37      	ldr	r3, [pc, #220]	; (80007cc <initEsp+0x1e8>)
 80006f0:	221e      	movs	r2, #30
 80006f2:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 80006f4:	4a30      	ldr	r2, [pc, #192]	; (80007b8 <initEsp+0x1d4>)
 80006f6:	7813      	ldrb	r3, [r2, #0]
 80006f8:	f36f 1304 	bfc	r3, #4, #1
 80006fc:	7013      	strb	r3, [r2, #0]
			break;
 80006fe:	e058      	b.n	80007b2 <initEsp+0x1ce>
			case 4:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIPMUX,13);
 8000700:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <initEsp+0x1dc>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	461a      	mov	r2, r3
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <initEsp+0x1e0>)
 800070a:	4413      	add	r3, r2
 800070c:	220d      	movs	r2, #13
 800070e:	4933      	ldr	r1, [pc, #204]	; (80007dc <initEsp+0x1f8>)
 8000710:	4618      	mov	r0, r3
 8000712:	f004 fd13 	bl	800513c <memcpy>
				indTX_W+=13;
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <initEsp+0x1dc>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	330d      	adds	r3, #13
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <initEsp+0x1dc>)
 8000722:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <initEsp+0x1e8>)
 8000726:	220a      	movs	r2, #10
 8000728:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 800072a:	4a23      	ldr	r2, [pc, #140]	; (80007b8 <initEsp+0x1d4>)
 800072c:	7813      	ldrb	r3, [r2, #0]
 800072e:	f36f 1304 	bfc	r3, #4, #1
 8000732:	7013      	strb	r3, [r2, #0]
			break;
 8000734:	e03d      	b.n	80007b2 <initEsp+0x1ce>
			case 5:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIFSR,10);
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <initEsp+0x1dc>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <initEsp+0x1e0>)
 8000740:	4413      	add	r3, r2
 8000742:	220a      	movs	r2, #10
 8000744:	4926      	ldr	r1, [pc, #152]	; (80007e0 <initEsp+0x1fc>)
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fcf8 	bl	800513c <memcpy>
				indTX_W+=10;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <initEsp+0x1dc>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	330a      	adds	r3, #10
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <initEsp+0x1dc>)
 8000758:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <initEsp+0x1e8>)
 800075c:	220a      	movs	r2, #10
 800075e:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000760:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <initEsp+0x1d4>)
 8000762:	7813      	ldrb	r3, [r2, #0]
 8000764:	f36f 1304 	bfc	r3, #4, #1
 8000768:	7013      	strb	r3, [r2, #0]
			break;
 800076a:	e022      	b.n	80007b2 <initEsp+0x1ce>
			case 6:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIPSTART,46);
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <initEsp+0x1dc>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	461a      	mov	r2, r3
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <initEsp+0x1e0>)
 8000776:	4413      	add	r3, r2
 8000778:	222e      	movs	r2, #46	; 0x2e
 800077a:	491a      	ldr	r1, [pc, #104]	; (80007e4 <initEsp+0x200>)
 800077c:	4618      	mov	r0, r3
 800077e:	f004 fcdd 	bl	800513c <memcpy>
				indTX_W+=46;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <initEsp+0x1dc>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	332e      	adds	r3, #46	; 0x2e
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <initEsp+0x1dc>)
 800078e:	701a      	strb	r2, [r3, #0]
				timeout2 = 30;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <initEsp+0x1e8>)
 8000792:	221e      	movs	r2, #30
 8000794:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <initEsp+0x1d4>)
 8000798:	7813      	ldrb	r3, [r2, #0]
 800079a:	f36f 1304 	bfc	r3, #4, #1
 800079e:	7013      	strb	r3, [r2, #0]
			break;
 80007a0:	e007      	b.n	80007b2 <initEsp+0x1ce>
			case 7:
				duty++;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <initEsp+0x204>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <initEsp+0x204>)
 80007ac:	701a      	strb	r2, [r3, #0]
			break;
 80007ae:	e000      	b.n	80007b2 <initEsp+0x1ce>
		}

	}
 80007b0:	bf00      	nop

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000378 	.word	0x20000378
 80007bc:	2000035c 	.word	0x2000035c
 80007c0:	20000357 	.word	0x20000357
 80007c4:	20000244 	.word	0x20000244
 80007c8:	08005188 	.word	0x08005188
 80007cc:	20000361 	.word	0x20000361
 80007d0:	0800519c 	.word	0x0800519c
 80007d4:	080051cc 	.word	0x080051cc
 80007d8:	080051f0 	.word	0x080051f0
 80007dc:	0800527c 	.word	0x0800527c
 80007e0:	08005260 	.word	0x08005260
 80007e4:	080052a0 	.word	0x080052a0
 80007e8:	2000035b 	.word	0x2000035b

080007ec <recibirmensaje>:

void recibirmensaje(){
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

	switch(AT){
 80007f0:	4ba2      	ldr	r3, [pc, #648]	; (8000a7c <recibirmensaje+0x290>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b08      	cmp	r3, #8
 80007f6:	f200 8628 	bhi.w	800144a <recibirmensaje+0xc5e>
 80007fa:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <recibirmensaje+0x14>)
 80007fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000800:	08000825 	.word	0x08000825
 8000804:	0800089f 	.word	0x0800089f
 8000808:	08000913 	.word	0x08000913
 800080c:	0800098d 	.word	0x0800098d
 8000810:	080009e1 	.word	0x080009e1
 8000814:	08000a5b 	.word	0x08000a5b
 8000818:	08000c1f 	.word	0x08000c1f
 800081c:	08000cdd 	.word	0x08000cdd
 8000820:	080011cf 	.word	0x080011cf
		case 0:
			if(buf_rx[indRX_R]==AT_ans[coincidencias]){
 8000824:	4b96      	ldr	r3, [pc, #600]	; (8000a80 <recibirmensaje+0x294>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	4b95      	ldr	r3, [pc, #596]	; (8000a84 <recibirmensaje+0x298>)
 800082e:	5c9b      	ldrb	r3, [r3, r2]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b95      	ldr	r3, [pc, #596]	; (8000a88 <recibirmensaje+0x29c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	4b94      	ldr	r3, [pc, #592]	; (8000a8c <recibirmensaje+0x2a0>)
 800083a:	5c5b      	ldrb	r3, [r3, r1]
 800083c:	429a      	cmp	r2, r3
 800083e:	d11a      	bne.n	8000876 <recibirmensaje+0x8a>
				coincidencias++;
 8000840:	4b91      	ldr	r3, [pc, #580]	; (8000a88 <recibirmensaje+0x29c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b8f      	ldr	r3, [pc, #572]	; (8000a88 <recibirmensaje+0x29c>)
 800084a:	701a      	strb	r2, [r3, #0]

				if(coincidencias>6){
 800084c:	4b8e      	ldr	r3, [pc, #568]	; (8000a88 <recibirmensaje+0x29c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b06      	cmp	r3, #6
 8000852:	f240 85fc 	bls.w	800144e <recibirmensaje+0xc62>
					//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
					coincidencias = 0;
 8000856:	4b8c      	ldr	r3, [pc, #560]	; (8000a88 <recibirmensaje+0x29c>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
					AT++;
 800085c:	4b87      	ldr	r3, [pc, #540]	; (8000a7c <recibirmensaje+0x290>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b85      	ldr	r3, [pc, #532]	; (8000a7c <recibirmensaje+0x290>)
 8000866:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000868:	4a89      	ldr	r2, [pc, #548]	; (8000a90 <recibirmensaje+0x2a4>)
 800086a:	7813      	ldrb	r3, [r2, #0]
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 8000872:	f000 bdec 	b.w	800144e <recibirmensaje+0xc62>
				if(!timeout2){
 8000876:	4b87      	ldr	r3, [pc, #540]	; (8000a94 <recibirmensaje+0x2a8>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	f040 85e7 	bne.w	800144e <recibirmensaje+0xc62>
					indRX_R=indRX_W;
 8000880:	4b85      	ldr	r3, [pc, #532]	; (8000a98 <recibirmensaje+0x2ac>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b7e      	ldr	r3, [pc, #504]	; (8000a80 <recibirmensaje+0x294>)
 8000888:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 800088a:	4b7f      	ldr	r3, [pc, #508]	; (8000a88 <recibirmensaje+0x29c>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000890:	4a7f      	ldr	r2, [pc, #508]	; (8000a90 <recibirmensaje+0x2a4>)
 8000892:	7813      	ldrb	r3, [r2, #0]
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	7013      	strb	r3, [r2, #0]
					break;
 800089a:	f000 bde7 	b.w	800146c <recibirmensaje+0xc80>
		case 1:
			if(buf_rx[indRX_R]==ANS_CWQAP[coincidencias]){
 800089e:	4b78      	ldr	r3, [pc, #480]	; (8000a80 <recibirmensaje+0x294>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b77      	ldr	r3, [pc, #476]	; (8000a84 <recibirmensaje+0x298>)
 80008a8:	5c9b      	ldrb	r3, [r3, r2]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b76      	ldr	r3, [pc, #472]	; (8000a88 <recibirmensaje+0x29c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4b7a      	ldr	r3, [pc, #488]	; (8000a9c <recibirmensaje+0x2b0>)
 80008b4:	5c5b      	ldrb	r3, [r3, r1]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d118      	bne.n	80008ec <recibirmensaje+0x100>
				coincidencias++;
 80008ba:	4b73      	ldr	r3, [pc, #460]	; (8000a88 <recibirmensaje+0x29c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b71      	ldr	r3, [pc, #452]	; (8000a88 <recibirmensaje+0x29c>)
 80008c4:	701a      	strb	r2, [r3, #0]

				if(coincidencias>30){
 80008c6:	4b70      	ldr	r3, [pc, #448]	; (8000a88 <recibirmensaje+0x29c>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b1e      	cmp	r3, #30
 80008cc:	d921      	bls.n	8000912 <recibirmensaje+0x126>
					//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
					coincidencias = 0;
 80008ce:	4b6e      	ldr	r3, [pc, #440]	; (8000a88 <recibirmensaje+0x29c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
					AT++;
 80008d4:	4b69      	ldr	r3, [pc, #420]	; (8000a7c <recibirmensaje+0x290>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b67      	ldr	r3, [pc, #412]	; (8000a7c <recibirmensaje+0x290>)
 80008de:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 80008e0:	4a6b      	ldr	r2, [pc, #428]	; (8000a90 <recibirmensaje+0x2a4>)
 80008e2:	7813      	ldrb	r3, [r2, #0]
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	7013      	strb	r3, [r2, #0]
 80008ea:	e012      	b.n	8000912 <recibirmensaje+0x126>
				}
			}else{
				if(!timeout2){
 80008ec:	4b69      	ldr	r3, [pc, #420]	; (8000a94 <recibirmensaje+0x2a8>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10e      	bne.n	8000912 <recibirmensaje+0x126>
					indRX_R=indRX_W;
 80008f4:	4b68      	ldr	r3, [pc, #416]	; (8000a98 <recibirmensaje+0x2ac>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b61      	ldr	r3, [pc, #388]	; (8000a80 <recibirmensaje+0x294>)
 80008fc:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 80008fe:	4b62      	ldr	r3, [pc, #392]	; (8000a88 <recibirmensaje+0x29c>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000904:	4a62      	ldr	r2, [pc, #392]	; (8000a90 <recibirmensaje+0x2a4>)
 8000906:	7813      	ldrb	r3, [r2, #0]
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	7013      	strb	r3, [r2, #0]
					break;
 800090e:	f000 bdad 	b.w	800146c <recibirmensaje+0xc80>
					}
				}
			}
		break;*/
		case 2:
			if(buf_rx[indRX_R]==ANS_CWMODE[coincidencias]){
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <recibirmensaje+0x294>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	461a      	mov	r2, r3
 800091a:	4b5a      	ldr	r3, [pc, #360]	; (8000a84 <recibirmensaje+0x298>)
 800091c:	5c9b      	ldrb	r3, [r3, r2]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b59      	ldr	r3, [pc, #356]	; (8000a88 <recibirmensaje+0x29c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <recibirmensaje+0x2b4>)
 8000928:	5c5b      	ldrb	r3, [r3, r1]
 800092a:	429a      	cmp	r2, r3
 800092c:	d11a      	bne.n	8000964 <recibirmensaje+0x178>
				coincidencias++;
 800092e:	4b56      	ldr	r3, [pc, #344]	; (8000a88 <recibirmensaje+0x29c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b54      	ldr	r3, [pc, #336]	; (8000a88 <recibirmensaje+0x29c>)
 8000938:	701a      	strb	r2, [r3, #0]

				if(coincidencias>17){
 800093a:	4b53      	ldr	r3, [pc, #332]	; (8000a88 <recibirmensaje+0x29c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b11      	cmp	r3, #17
 8000940:	f240 8587 	bls.w	8001452 <recibirmensaje+0xc66>
					coincidencias = 0;
 8000944:	4b50      	ldr	r3, [pc, #320]	; (8000a88 <recibirmensaje+0x29c>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
					AT++;
 800094a:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <recibirmensaje+0x290>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b4a      	ldr	r3, [pc, #296]	; (8000a7c <recibirmensaje+0x290>)
 8000954:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000956:	4a4e      	ldr	r2, [pc, #312]	; (8000a90 <recibirmensaje+0x2a4>)
 8000958:	7813      	ldrb	r3, [r2, #0]
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 8000960:	f000 bd77 	b.w	8001452 <recibirmensaje+0xc66>
				if(!timeout2){
 8000964:	4b4b      	ldr	r3, [pc, #300]	; (8000a94 <recibirmensaje+0x2a8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	f040 8572 	bne.w	8001452 <recibirmensaje+0xc66>
					indRX_R=indRX_W;
 800096e:	4b4a      	ldr	r3, [pc, #296]	; (8000a98 <recibirmensaje+0x2ac>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <recibirmensaje+0x294>)
 8000976:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 8000978:	4b43      	ldr	r3, [pc, #268]	; (8000a88 <recibirmensaje+0x29c>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 800097e:	4a44      	ldr	r2, [pc, #272]	; (8000a90 <recibirmensaje+0x2a4>)
 8000980:	7813      	ldrb	r3, [r2, #0]
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	7013      	strb	r3, [r2, #0]
					break;
 8000988:	f000 bd70 	b.w	800146c <recibirmensaje+0xc80>
		case 3:
			if(buf_rx[indRX_R]==ANS_CWJAP_casa[coincidencias]){
 800098c:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <recibirmensaje+0x294>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <recibirmensaje+0x298>)
 8000996:	5c9b      	ldrb	r3, [r3, r2]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <recibirmensaje+0x29c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	4b40      	ldr	r3, [pc, #256]	; (8000aa4 <recibirmensaje+0x2b8>)
 80009a2:	5c5b      	ldrb	r3, [r3, r1]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	f040 8556 	bne.w	8001456 <recibirmensaje+0xc6a>
				coincidencias++;
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <recibirmensaje+0x29c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <recibirmensaje+0x29c>)
 80009b4:	701a      	strb	r2, [r3, #0]

				if(coincidencias>68){
 80009b6:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <recibirmensaje+0x29c>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b44      	cmp	r3, #68	; 0x44
 80009bc:	f240 854b 	bls.w	8001456 <recibirmensaje+0xc6a>
					coincidencias = 0;
 80009c0:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <recibirmensaje+0x29c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
					AT++;
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <recibirmensaje+0x290>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <recibirmensaje+0x290>)
 80009d0:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 80009d2:	4a2f      	ldr	r2, [pc, #188]	; (8000a90 <recibirmensaje+0x2a4>)
 80009d4:	7813      	ldrb	r3, [r2, #0]
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	7013      	strb	r3, [r2, #0]
				}
			}
		break;
 80009dc:	f000 bd3b 	b.w	8001456 <recibirmensaje+0xc6a>
		case 4:
			if(buf_rx[indRX_R]==ANS_CIPMUX[coincidencias]){
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <recibirmensaje+0x294>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <recibirmensaje+0x298>)
 80009ea:	5c9b      	ldrb	r3, [r3, r2]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <recibirmensaje+0x29c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	4619      	mov	r1, r3
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <recibirmensaje+0x2bc>)
 80009f6:	5c5b      	ldrb	r3, [r3, r1]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d11a      	bne.n	8000a32 <recibirmensaje+0x246>
				coincidencias++;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <recibirmensaje+0x29c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <recibirmensaje+0x29c>)
 8000a06:	701a      	strb	r2, [r3, #0]

				if(coincidencias>17){
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <recibirmensaje+0x29c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b11      	cmp	r3, #17
 8000a0e:	f240 8524 	bls.w	800145a <recibirmensaje+0xc6e>
					coincidencias = 0;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <recibirmensaje+0x29c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
					AT+=2;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <recibirmensaje+0x290>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <recibirmensaje+0x290>)
 8000a22:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000a24:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <recibirmensaje+0x2a4>)
 8000a26:	7813      	ldrb	r3, [r2, #0]
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 8000a2e:	f000 bd14 	b.w	800145a <recibirmensaje+0xc6e>
				if(!timeout2){
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <recibirmensaje+0x2a8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 850f 	bne.w	800145a <recibirmensaje+0xc6e>
					indRX_R=indRX_W;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <recibirmensaje+0x2ac>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <recibirmensaje+0x294>)
 8000a44:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <recibirmensaje+0x29c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000a4c:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <recibirmensaje+0x2a4>)
 8000a4e:	7813      	ldrb	r3, [r2, #0]
 8000a50:	f043 0310 	orr.w	r3, r3, #16
 8000a54:	7013      	strb	r3, [r2, #0]
					break;
 8000a56:	f000 bd09 	b.w	800146c <recibirmensaje+0xc80>
		case 5:
			switch(decodeCIF){
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <recibirmensaje+0x2c0>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	f200 84fd 	bhi.w	800145e <recibirmensaje+0xc72>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <recibirmensaje+0x280>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000ab1 	.word	0x08000ab1
 8000a70:	08000b1d 	.word	0x08000b1d
 8000a74:	08000b61 	.word	0x08000b61
 8000a78:	08000bb3 	.word	0x08000bb3
 8000a7c:	2000035c 	.word	0x2000035c
 8000a80:	20000356 	.word	0x20000356
 8000a84:	20000144 	.word	0x20000144
 8000a88:	20000359 	.word	0x20000359
 8000a8c:	08005190 	.word	0x08005190
 8000a90:	20000378 	.word	0x20000378
 8000a94:	20000361 	.word	0x20000361
 8000a98:	20000355 	.word	0x20000355
 8000a9c:	080051a8 	.word	0x080051a8
 8000aa0:	080051dc 	.word	0x080051dc
 8000aa4:	08005218 	.word	0x08005218
 8000aa8:	0800528c 	.word	0x0800528c
 8000aac:	2000035e 	.word	0x2000035e
			case 0:
				if(buf_rx[indRX_R]==CIFSR[coincidencias]){
 8000ab0:	4b96      	ldr	r3, [pc, #600]	; (8000d0c <recibirmensaje+0x520>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b95      	ldr	r3, [pc, #596]	; (8000d10 <recibirmensaje+0x524>)
 8000aba:	5c9b      	ldrb	r3, [r3, r2]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b95      	ldr	r3, [pc, #596]	; (8000d14 <recibirmensaje+0x528>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4b94      	ldr	r3, [pc, #592]	; (8000d18 <recibirmensaje+0x52c>)
 8000ac6:	5c5b      	ldrb	r3, [r3, r1]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d114      	bne.n	8000af6 <recibirmensaje+0x30a>
					coincidencias++;
 8000acc:	4b91      	ldr	r3, [pc, #580]	; (8000d14 <recibirmensaje+0x528>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b8f      	ldr	r3, [pc, #572]	; (8000d14 <recibirmensaje+0x528>)
 8000ad6:	701a      	strb	r2, [r3, #0]

					if(coincidencias>8){
 8000ad8:	4b8e      	ldr	r3, [pc, #568]	; (8000d14 <recibirmensaje+0x528>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b08      	cmp	r3, #8
 8000ade:	f240 8092 	bls.w	8000c06 <recibirmensaje+0x41a>
						coincidencias = 0;
 8000ae2:	4b8c      	ldr	r3, [pc, #560]	; (8000d14 <recibirmensaje+0x528>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
						decodeCIF++;
 8000ae8:	4b8c      	ldr	r3, [pc, #560]	; (8000d1c <recibirmensaje+0x530>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b8a      	ldr	r3, [pc, #552]	; (8000d1c <recibirmensaje+0x530>)
 8000af2:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
						readyToSend=1;
						break;
					}
				}
			break;
 8000af4:	e087      	b.n	8000c06 <recibirmensaje+0x41a>
					if(!timeout2){
 8000af6:	4b8a      	ldr	r3, [pc, #552]	; (8000d20 <recibirmensaje+0x534>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f040 8083 	bne.w	8000c06 <recibirmensaje+0x41a>
						indRX_R=indRX_W;
 8000b00:	4b88      	ldr	r3, [pc, #544]	; (8000d24 <recibirmensaje+0x538>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b81      	ldr	r3, [pc, #516]	; (8000d0c <recibirmensaje+0x520>)
 8000b08:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
 8000b0a:	4b82      	ldr	r3, [pc, #520]	; (8000d14 <recibirmensaje+0x528>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
						readyToSend=1;
 8000b10:	4a85      	ldr	r2, [pc, #532]	; (8000d28 <recibirmensaje+0x53c>)
 8000b12:	7813      	ldrb	r3, [r2, #0]
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	7013      	strb	r3, [r2, #0]
						break;
 8000b1a:	e07e      	b.n	8000c1a <recibirmensaje+0x42e>
			case 1:
				if(buf_rx[indRX_R]==CIFSR_STAIP[coincidencias]){
 8000b1c:	4b7b      	ldr	r3, [pc, #492]	; (8000d0c <recibirmensaje+0x520>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b7a      	ldr	r3, [pc, #488]	; (8000d10 <recibirmensaje+0x524>)
 8000b26:	5c9b      	ldrb	r3, [r3, r2]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b7a      	ldr	r3, [pc, #488]	; (8000d14 <recibirmensaje+0x528>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4b7e      	ldr	r3, [pc, #504]	; (8000d2c <recibirmensaje+0x540>)
 8000b32:	5c5b      	ldrb	r3, [r3, r1]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d169      	bne.n	8000c0c <recibirmensaje+0x420>
					coincidencias++;
 8000b38:	4b76      	ldr	r3, [pc, #472]	; (8000d14 <recibirmensaje+0x528>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4b74      	ldr	r3, [pc, #464]	; (8000d14 <recibirmensaje+0x528>)
 8000b42:	701a      	strb	r2, [r3, #0]

					if(coincidencias>10){
 8000b44:	4b73      	ldr	r3, [pc, #460]	; (8000d14 <recibirmensaje+0x528>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b0a      	cmp	r3, #10
 8000b4a:	d95f      	bls.n	8000c0c <recibirmensaje+0x420>
						coincidencias = 0;
 8000b4c:	4b71      	ldr	r3, [pc, #452]	; (8000d14 <recibirmensaje+0x528>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
						decodeCIF++;
 8000b52:	4b72      	ldr	r3, [pc, #456]	; (8000d1c <recibirmensaje+0x530>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b70      	ldr	r3, [pc, #448]	; (8000d1c <recibirmensaje+0x530>)
 8000b5c:	701a      	strb	r2, [r3, #0]
						//AT++;
						//readyToSend = 1;
					}
				}
			break;
 8000b5e:	e055      	b.n	8000c0c <recibirmensaje+0x420>
			case 2:
				espIP[coincidencias]=buf_rx[indRX_R];
 8000b60:	4b6a      	ldr	r3, [pc, #424]	; (8000d0c <recibirmensaje+0x520>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4619      	mov	r1, r3
 8000b68:	4b6a      	ldr	r3, [pc, #424]	; (8000d14 <recibirmensaje+0x528>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b68      	ldr	r3, [pc, #416]	; (8000d10 <recibirmensaje+0x524>)
 8000b70:	5c5b      	ldrb	r3, [r3, r1]
 8000b72:	b2d9      	uxtb	r1, r3
 8000b74:	4b6e      	ldr	r3, [pc, #440]	; (8000d30 <recibirmensaje+0x544>)
 8000b76:	5499      	strb	r1, [r3, r2]
				coincidencias++;
 8000b78:	4b66      	ldr	r3, [pc, #408]	; (8000d14 <recibirmensaje+0x528>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b64      	ldr	r3, [pc, #400]	; (8000d14 <recibirmensaje+0x528>)
 8000b82:	701a      	strb	r2, [r3, #0]
				if((buf_rx[indRX_R]=='"')&&(largoIP>1)){
 8000b84:	4b61      	ldr	r3, [pc, #388]	; (8000d0c <recibirmensaje+0x520>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b60      	ldr	r3, [pc, #384]	; (8000d10 <recibirmensaje+0x524>)
 8000b8e:	5c9b      	ldrb	r3, [r3, r2]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b22      	cmp	r3, #34	; 0x22
 8000b94:	d13d      	bne.n	8000c12 <recibirmensaje+0x426>
 8000b96:	4b67      	ldr	r3, [pc, #412]	; (8000d34 <recibirmensaje+0x548>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d939      	bls.n	8000c12 <recibirmensaje+0x426>
					coincidencias=0;
 8000b9e:	4b5d      	ldr	r3, [pc, #372]	; (8000d14 <recibirmensaje+0x528>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
					decodeCIF++;
 8000ba4:	4b5d      	ldr	r3, [pc, #372]	; (8000d1c <recibirmensaje+0x530>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <recibirmensaje+0x530>)
 8000bae:	701a      	strb	r2, [r3, #0]
				}
			break;
 8000bb0:	e02f      	b.n	8000c12 <recibirmensaje+0x426>
			case 3:
				if(buf_rx[indRX_R]==OK[coincidencias]){
 8000bb2:	4b56      	ldr	r3, [pc, #344]	; (8000d0c <recibirmensaje+0x520>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b55      	ldr	r3, [pc, #340]	; (8000d10 <recibirmensaje+0x524>)
 8000bbc:	5c9b      	ldrb	r3, [r3, r2]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <recibirmensaje+0x528>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4b5c      	ldr	r3, [pc, #368]	; (8000d38 <recibirmensaje+0x54c>)
 8000bc8:	5c5b      	ldrb	r3, [r3, r1]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d124      	bne.n	8000c18 <recibirmensaje+0x42c>
					coincidencias++;
 8000bce:	4b51      	ldr	r3, [pc, #324]	; (8000d14 <recibirmensaje+0x528>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <recibirmensaje+0x528>)
 8000bd8:	701a      	strb	r2, [r3, #0]

					if(coincidencias>4){
 8000bda:	4b4e      	ldr	r3, [pc, #312]	; (8000d14 <recibirmensaje+0x528>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d91a      	bls.n	8000c18 <recibirmensaje+0x42c>
						coincidencias = 0;
 8000be2:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <recibirmensaje+0x528>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
						decodeCIF=0;
 8000be8:	4b4c      	ldr	r3, [pc, #304]	; (8000d1c <recibirmensaje+0x530>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
						AT++;
 8000bee:	4b53      	ldr	r3, [pc, #332]	; (8000d3c <recibirmensaje+0x550>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b51      	ldr	r3, [pc, #324]	; (8000d3c <recibirmensaje+0x550>)
 8000bf8:	701a      	strb	r2, [r3, #0]
						readyToSend = 1;
 8000bfa:	4a4b      	ldr	r2, [pc, #300]	; (8000d28 <recibirmensaje+0x53c>)
 8000bfc:	7813      	ldrb	r3, [r2, #0]
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	7013      	strb	r3, [r2, #0]
					}
				}
			break;
 8000c04:	e008      	b.n	8000c18 <recibirmensaje+0x42c>
			break;
 8000c06:	bf00      	nop
 8000c08:	f000 bc29 	b.w	800145e <recibirmensaje+0xc72>
			break;
 8000c0c:	bf00      	nop
 8000c0e:	f000 bc26 	b.w	800145e <recibirmensaje+0xc72>
			break;
 8000c12:	bf00      	nop
 8000c14:	f000 bc23 	b.w	800145e <recibirmensaje+0xc72>
			break;
 8000c18:	bf00      	nop
			}
		break;
 8000c1a:	f000 bc20 	b.w	800145e <recibirmensaje+0xc72>
		case 6:
			if(buf_rx[indRX_R]==ANS_CIPSTART[coincidencias]){
 8000c1e:	4b3b      	ldr	r3, [pc, #236]	; (8000d0c <recibirmensaje+0x520>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <recibirmensaje+0x524>)
 8000c28:	5c9b      	ldrb	r3, [r3, r2]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <recibirmensaje+0x528>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	4b43      	ldr	r3, [pc, #268]	; (8000d40 <recibirmensaje+0x554>)
 8000c34:	5c5b      	ldrb	r3, [r3, r1]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d11f      	bne.n	8000c7a <recibirmensaje+0x48e>
				coincidencias++;
 8000c3a:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <recibirmensaje+0x528>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <recibirmensaje+0x528>)
 8000c44:	701a      	strb	r2, [r3, #0]

				if(coincidencias>59){
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <recibirmensaje+0x528>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b3b      	cmp	r3, #59	; 0x3b
 8000c4c:	d915      	bls.n	8000c7a <recibirmensaje+0x48e>
					coincidencias = 0;
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <recibirmensaje+0x528>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					coincidencias2 = 0;
 8000c54:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <recibirmensaje+0x558>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
					AT++;
 8000c5a:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <recibirmensaje+0x550>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <recibirmensaje+0x550>)
 8000c64:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000c66:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <recibirmensaje+0x53c>)
 8000c68:	7813      	ldrb	r3, [r2, #0]
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	7013      	strb	r3, [r2, #0]
					espConnected=1;
 8000c70:	4a35      	ldr	r2, [pc, #212]	; (8000d48 <recibirmensaje+0x55c>)
 8000c72:	7813      	ldrb	r3, [r2, #0]
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	7013      	strb	r3, [r2, #0]
				}
			}
				if(buf_rx[indRX_R]==ANS_CIPSTART_ERROR[coincidencias2]){
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <recibirmensaje+0x520>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <recibirmensaje+0x524>)
 8000c84:	5c9b      	ldrb	r3, [r3, r2]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <recibirmensaje+0x558>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <recibirmensaje+0x560>)
 8000c90:	5c5b      	ldrb	r3, [r3, r1]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	f040 83e5 	bne.w	8001462 <recibirmensaje+0xc76>
					coincidencias2++;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <recibirmensaje+0x558>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <recibirmensaje+0x558>)
 8000ca2:	701a      	strb	r2, [r3, #0]

					if(coincidencias>71){
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <recibirmensaje+0x528>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b47      	cmp	r3, #71	; 0x47
 8000caa:	f240 83da 	bls.w	8001462 <recibirmensaje+0xc76>
						coincidencias = 0;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <recibirmensaje+0x528>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
						coincidencias2 = 0;
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <recibirmensaje+0x558>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
						AT++;
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <recibirmensaje+0x550>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <recibirmensaje+0x550>)
 8000cc4:	701a      	strb	r2, [r3, #0]
						readyToSend = 1;
 8000cc6:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <recibirmensaje+0x53c>)
 8000cc8:	7813      	ldrb	r3, [r2, #0]
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	7013      	strb	r3, [r2, #0]
						espConnected=1;
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <recibirmensaje+0x55c>)
 8000cd2:	7813      	ldrb	r3, [r2, #0]
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	7013      	strb	r3, [r2, #0]
						readyToSend=1;
						break;
					}
				}*/

		break;
 8000cda:	e3c2      	b.n	8001462 <recibirmensaje+0xc76>
		case 7:
			switch(decoCIPSEND){
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <recibirmensaje+0x564>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	f200 83c0 	bhi.w	8001466 <recibirmensaje+0xc7a>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <recibirmensaje+0x500>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000d55 	.word	0x08000d55
 8000cf0:	08000ddb 	.word	0x08000ddb
 8000cf4:	08000e63 	.word	0x08000e63
 8000cf8:	08000e95 	.word	0x08000e95
 8000cfc:	08000f35 	.word	0x08000f35
 8000d00:	08000ffd 	.word	0x08000ffd
 8000d04:	080010a5 	.word	0x080010a5
 8000d08:	08001119 	.word	0x08001119
 8000d0c:	20000356 	.word	0x20000356
 8000d10:	20000144 	.word	0x20000144
 8000d14:	20000359 	.word	0x20000359
 8000d18:	08005260 	.word	0x08005260
 8000d1c:	2000035e 	.word	0x2000035e
 8000d20:	20000361 	.word	0x20000361
 8000d24:	20000355 	.word	0x20000355
 8000d28:	20000378 	.word	0x20000378
 8000d2c:	0800526c 	.word	0x0800526c
 8000d30:	20000344 	.word	0x20000344
 8000d34:	20000362 	.word	0x20000362
 8000d38:	08005390 	.word	0x08005390
 8000d3c:	2000035c 	.word	0x2000035c
 8000d40:	080052d0 	.word	0x080052d0
 8000d44:	2000035a 	.word	0x2000035a
 8000d48:	2000037c 	.word	0x2000037c
 8000d4c:	08005310 	.word	0x08005310
 8000d50:	2000035d 	.word	0x2000035d
				case 0:
					if(buf_rx[indRX_R]==CIPSEND[coincidencias]){
 8000d54:	4b9a      	ldr	r3, [pc, #616]	; (8000fc0 <recibirmensaje+0x7d4>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b99      	ldr	r3, [pc, #612]	; (8000fc4 <recibirmensaje+0x7d8>)
 8000d5e:	5c9b      	ldrb	r3, [r3, r2]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b99      	ldr	r3, [pc, #612]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4619      	mov	r1, r3
 8000d68:	4b98      	ldr	r3, [pc, #608]	; (8000fcc <recibirmensaje+0x7e0>)
 8000d6a:	5c5b      	ldrb	r3, [r3, r1]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d114      	bne.n	8000d9a <recibirmensaje+0x5ae>
						coincidencias++;
 8000d70:	4b95      	ldr	r3, [pc, #596]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b93      	ldr	r3, [pc, #588]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000d7a:	701a      	strb	r2, [r3, #0]

						if(coincidencias>9){
 8000d7c:	4b92      	ldr	r3, [pc, #584]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	f240 8214 	bls.w	80011ae <recibirmensaje+0x9c2>
							coincidencias = 0;
 8000d86:	4b90      	ldr	r3, [pc, #576]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8000d8c:	4b90      	ldr	r3, [pc, #576]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b8e      	ldr	r3, [pc, #568]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000d96:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8000d98:	e209      	b.n	80011ae <recibirmensaje+0x9c2>
						if(!timeout2){
 8000d9a:	4b8e      	ldr	r3, [pc, #568]	; (8000fd4 <recibirmensaje+0x7e8>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8205 	bne.w	80011ae <recibirmensaje+0x9c2>
							indRX_R=indRX_W;
 8000da4:	4b8c      	ldr	r3, [pc, #560]	; (8000fd8 <recibirmensaje+0x7ec>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b85      	ldr	r3, [pc, #532]	; (8000fc0 <recibirmensaje+0x7d4>)
 8000dac:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8000dae:	4b86      	ldr	r3, [pc, #536]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000db4:	4a89      	ldr	r2, [pc, #548]	; (8000fdc <recibirmensaje+0x7f0>)
 8000db6:	7813      	ldrb	r3, [r2, #0]
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8000dbe:	4a87      	ldr	r2, [pc, #540]	; (8000fdc <recibirmensaje+0x7f0>)
 8000dc0:	7813      	ldrb	r3, [r2, #0]
 8000dc2:	f36f 1345 	bfc	r3, #5, #1
 8000dc6:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8000dc8:	4a85      	ldr	r2, [pc, #532]	; (8000fe0 <recibirmensaje+0x7f4>)
 8000dca:	7813      	ldrb	r3, [r2, #0]
 8000dcc:	f36f 0341 	bfc	r3, #1, #1
 8000dd0:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8000dd2:	4b84      	ldr	r3, [pc, #528]	; (8000fe4 <recibirmensaje+0x7f8>)
 8000dd4:	221e      	movs	r2, #30
 8000dd6:	701a      	strb	r2, [r3, #0]
							break;
 8000dd8:	e1f8      	b.n	80011cc <recibirmensaje+0x9e0>
				case 1:
					if((buf_rx[indRX_R]==bytesToSend+'0')&&((bytesToSend<10))){//reviso q sean menos de 10 bytes
 8000dda:	4b79      	ldr	r3, [pc, #484]	; (8000fc0 <recibirmensaje+0x7d4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b78      	ldr	r3, [pc, #480]	; (8000fc4 <recibirmensaje+0x7d8>)
 8000de4:	5c9b      	ldrb	r3, [r3, r2]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b7f      	ldr	r3, [pc, #508]	; (8000fe8 <recibirmensaje+0x7fc>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	3330      	adds	r3, #48	; 0x30
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d10a      	bne.n	8000e0a <recibirmensaje+0x61e>
 8000df4:	4b7c      	ldr	r3, [pc, #496]	; (8000fe8 <recibirmensaje+0x7fc>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b09      	cmp	r3, #9
 8000dfa:	d806      	bhi.n	8000e0a <recibirmensaje+0x61e>
						decoCIPSEND+=2;
 8000dfc:	4b74      	ldr	r3, [pc, #464]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	3302      	adds	r3, #2
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b72      	ldr	r3, [pc, #456]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000e06:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
							bytesToSend_aux=bytesToSend/10;
							bytesToSend_aux*=10;
						}
					}
				break;
 8000e08:	e1d3      	b.n	80011b2 <recibirmensaje+0x9c6>
						if(buf_rx[indRX_R]==bytesToSend/10+'0'){
 8000e0a:	4b6d      	ldr	r3, [pc, #436]	; (8000fc0 <recibirmensaje+0x7d4>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <recibirmensaje+0x7d8>)
 8000e14:	5c9b      	ldrb	r3, [r3, r2]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4b73      	ldr	r3, [pc, #460]	; (8000fe8 <recibirmensaje+0x7fc>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	4a73      	ldr	r2, [pc, #460]	; (8000fec <recibirmensaje+0x800>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	08db      	lsrs	r3, r3, #3
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	3330      	adds	r3, #48	; 0x30
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f040 81c1 	bne.w	80011b2 <recibirmensaje+0x9c6>
							decoCIPSEND++;
 8000e30:	4b67      	ldr	r3, [pc, #412]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b65      	ldr	r3, [pc, #404]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000e3a:	701a      	strb	r2, [r3, #0]
							bytesToSend_aux=bytesToSend/10;
 8000e3c:	4b6a      	ldr	r3, [pc, #424]	; (8000fe8 <recibirmensaje+0x7fc>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4a6a      	ldr	r2, [pc, #424]	; (8000fec <recibirmensaje+0x800>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	08db      	lsrs	r3, r3, #3
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b69      	ldr	r3, [pc, #420]	; (8000ff0 <recibirmensaje+0x804>)
 8000e4c:	701a      	strb	r2, [r3, #0]
							bytesToSend_aux*=10;
 8000e4e:	4b68      	ldr	r3, [pc, #416]	; (8000ff0 <recibirmensaje+0x804>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	0092      	lsls	r2, r2, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b64      	ldr	r3, [pc, #400]	; (8000ff0 <recibirmensaje+0x804>)
 8000e5e:	701a      	strb	r2, [r3, #0]
				break;
 8000e60:	e1a7      	b.n	80011b2 <recibirmensaje+0x9c6>
				case 2:
					if(buf_rx[indRX_R]==bytesToSend-bytesToSend_aux+'0'){
 8000e62:	4b57      	ldr	r3, [pc, #348]	; (8000fc0 <recibirmensaje+0x7d4>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b56      	ldr	r3, [pc, #344]	; (8000fc4 <recibirmensaje+0x7d8>)
 8000e6c:	5c9b      	ldrb	r3, [r3, r2]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <recibirmensaje+0x7fc>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4b5d      	ldr	r3, [pc, #372]	; (8000ff0 <recibirmensaje+0x804>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	3330      	adds	r3, #48	; 0x30
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8198 	bne.w	80011b6 <recibirmensaje+0x9ca>
						decoCIPSEND++;
 8000e86:	4b52      	ldr	r3, [pc, #328]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b50      	ldr	r3, [pc, #320]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000e90:	701a      	strb	r2, [r3, #0]
					}
				break;
 8000e92:	e190      	b.n	80011b6 <recibirmensaje+0x9ca>
				case 3:
					if(buf_rx[indRX_R]==CIPSEND2[coincidencias]){
 8000e94:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <recibirmensaje+0x7d4>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <recibirmensaje+0x7d8>)
 8000e9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4b52      	ldr	r3, [pc, #328]	; (8000ff4 <recibirmensaje+0x808>)
 8000eaa:	5c5b      	ldrb	r3, [r3, r1]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d11e      	bne.n	8000eee <recibirmensaje+0x702>
						coincidencias++;
 8000eb0:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000eba:	701a      	strb	r2, [r3, #0]

						if(coincidencias>7){
 8000ebc:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b07      	cmp	r3, #7
 8000ec2:	f240 817a 	bls.w	80011ba <recibirmensaje+0x9ce>
							coincidencias = 0;
 8000ec6:	4b40      	ldr	r3, [pc, #256]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8000ecc:	4b40      	ldr	r3, [pc, #256]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000ed6:	701a      	strb	r2, [r3, #0]
							//AT++;
							readyToSend = 1;
 8000ed8:	4a40      	ldr	r2, [pc, #256]	; (8000fdc <recibirmensaje+0x7f0>)
 8000eda:	7813      	ldrb	r3, [r2, #0]
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8000ee2:	4a3e      	ldr	r2, [pc, #248]	; (8000fdc <recibirmensaje+0x7f0>)
 8000ee4:	7813      	ldrb	r3, [r2, #0]
 8000ee6:	f36f 1345 	bfc	r3, #5, #1
 8000eea:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8000eec:	e165      	b.n	80011ba <recibirmensaje+0x9ce>
						if(!timeout2){
 8000eee:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <recibirmensaje+0x7e8>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f040 8161 	bne.w	80011ba <recibirmensaje+0x9ce>
							decoCIPSEND=0;
 8000ef8:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8000efe:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <recibirmensaje+0x7ec>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <recibirmensaje+0x7d4>)
 8000f06:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000f0e:	4a33      	ldr	r2, [pc, #204]	; (8000fdc <recibirmensaje+0x7f0>)
 8000f10:	7813      	ldrb	r3, [r2, #0]
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8000f18:	4a30      	ldr	r2, [pc, #192]	; (8000fdc <recibirmensaje+0x7f0>)
 8000f1a:	7813      	ldrb	r3, [r2, #0]
 8000f1c:	f36f 1345 	bfc	r3, #5, #1
 8000f20:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8000f22:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <recibirmensaje+0x7f4>)
 8000f24:	7813      	ldrb	r3, [r2, #0]
 8000f26:	f36f 0341 	bfc	r3, #1, #1
 8000f2a:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <recibirmensaje+0x7f8>)
 8000f2e:	221e      	movs	r2, #30
 8000f30:	701a      	strb	r2, [r3, #0]
							break;
 8000f32:	e14b      	b.n	80011cc <recibirmensaje+0x9e0>
				case 4:
					if(buf_rx[indRX_R]==CIPSEND3[coincidencias]){
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <recibirmensaje+0x7d4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <recibirmensaje+0x7d8>)
 8000f3e:	5c9b      	ldrb	r3, [r3, r2]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <recibirmensaje+0x80c>)
 8000f4a:	5c5b      	ldrb	r3, [r3, r1]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d114      	bne.n	8000f7a <recibirmensaje+0x78e>
						coincidencias++;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000f5a:	701a      	strb	r2, [r3, #0]

						if(coincidencias>3){
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	f240 812c 	bls.w	80011be <recibirmensaje+0x9d2>
							coincidencias = 0;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000f76:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8000f78:	e121      	b.n	80011be <recibirmensaje+0x9d2>
						if(!timeout2){
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <recibirmensaje+0x7e8>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 811d 	bne.w	80011be <recibirmensaje+0x9d2>
							decoCIPSEND=0;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <recibirmensaje+0x7e4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <recibirmensaje+0x7ec>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <recibirmensaje+0x7d4>)
 8000f92:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <recibirmensaje+0x7dc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <recibirmensaje+0x7f0>)
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <recibirmensaje+0x7f0>)
 8000fa6:	7813      	ldrb	r3, [r2, #0]
 8000fa8:	f36f 1345 	bfc	r3, #5, #1
 8000fac:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8000fae:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <recibirmensaje+0x7f4>)
 8000fb0:	7813      	ldrb	r3, [r2, #0]
 8000fb2:	f36f 0341 	bfc	r3, #1, #1
 8000fb6:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <recibirmensaje+0x7f8>)
 8000fba:	221e      	movs	r2, #30
 8000fbc:	701a      	strb	r2, [r3, #0]
							break;
 8000fbe:	e105      	b.n	80011cc <recibirmensaje+0x9e0>
 8000fc0:	20000356 	.word	0x20000356
 8000fc4:	20000144 	.word	0x20000144
 8000fc8:	20000359 	.word	0x20000359
 8000fcc:	0800535c 	.word	0x0800535c
 8000fd0:	2000035d 	.word	0x2000035d
 8000fd4:	20000361 	.word	0x20000361
 8000fd8:	20000355 	.word	0x20000355
 8000fdc:	20000378 	.word	0x20000378
 8000fe0:	2000037c 	.word	0x2000037c
 8000fe4:	20000365 	.word	0x20000365
 8000fe8:	20000363 	.word	0x20000363
 8000fec:	cccccccd 	.word	0xcccccccd
 8000ff0:	20000364 	.word	0x20000364
 8000ff4:	08005368 	.word	0x08005368
 8000ff8:	08005374 	.word	0x08005374
				case 5:
					if((buf_rx[indRX_R]==bytesToSend+'0')&&((bytesToSend<10))){//reviso q sean menos de 10 bytes
 8000ffc:	4b9f      	ldr	r3, [pc, #636]	; (800127c <recibirmensaje+0xa90>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	4b9e      	ldr	r3, [pc, #632]	; (8001280 <recibirmensaje+0xa94>)
 8001006:	5c9b      	ldrb	r3, [r3, r2]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	4b9d      	ldr	r3, [pc, #628]	; (8001284 <recibirmensaje+0xa98>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	3330      	adds	r3, #48	; 0x30
 8001012:	429a      	cmp	r2, r3
 8001014:	d10a      	bne.n	800102c <recibirmensaje+0x840>
 8001016:	4b9b      	ldr	r3, [pc, #620]	; (8001284 <recibirmensaje+0xa98>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b09      	cmp	r3, #9
 800101c:	d806      	bhi.n	800102c <recibirmensaje+0x840>
						decoCIPSEND+=2;
 800101e:	4b9a      	ldr	r3, [pc, #616]	; (8001288 <recibirmensaje+0xa9c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	3302      	adds	r3, #2
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b98      	ldr	r3, [pc, #608]	; (8001288 <recibirmensaje+0xa9c>)
 8001028:	701a      	strb	r2, [r3, #0]
								timeToSendAlive=30;
								break;
							}
						}
					}
				break;
 800102a:	e0ca      	b.n	80011c2 <recibirmensaje+0x9d6>
						if(buf_rx[indRX_R]==bytesToSend/10+'0'){
 800102c:	4b93      	ldr	r3, [pc, #588]	; (800127c <recibirmensaje+0xa90>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <recibirmensaje+0xa94>)
 8001036:	5c9b      	ldrb	r3, [r3, r2]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	4b91      	ldr	r3, [pc, #580]	; (8001284 <recibirmensaje+0xa98>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4a92      	ldr	r2, [pc, #584]	; (800128c <recibirmensaje+0xaa0>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	08db      	lsrs	r3, r3, #3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	3330      	adds	r3, #48	; 0x30
 800104c:	4299      	cmp	r1, r3
 800104e:	d106      	bne.n	800105e <recibirmensaje+0x872>
							decoCIPSEND++;
 8001050:	4b8d      	ldr	r3, [pc, #564]	; (8001288 <recibirmensaje+0xa9c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b8b      	ldr	r3, [pc, #556]	; (8001288 <recibirmensaje+0xa9c>)
 800105a:	701a      	strb	r2, [r3, #0]
				break;
 800105c:	e0b1      	b.n	80011c2 <recibirmensaje+0x9d6>
							if(!timeout2){
 800105e:	4b8c      	ldr	r3, [pc, #560]	; (8001290 <recibirmensaje+0xaa4>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 80ad 	bne.w	80011c2 <recibirmensaje+0x9d6>
								decoCIPSEND=0;
 8001068:	4b87      	ldr	r3, [pc, #540]	; (8001288 <recibirmensaje+0xa9c>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
								indRX_R=indRX_W;
 800106e:	4b89      	ldr	r3, [pc, #548]	; (8001294 <recibirmensaje+0xaa8>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b81      	ldr	r3, [pc, #516]	; (800127c <recibirmensaje+0xa90>)
 8001076:	701a      	strb	r2, [r3, #0]
								coincidencias = 0;
 8001078:	4b87      	ldr	r3, [pc, #540]	; (8001298 <recibirmensaje+0xaac>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
								readyToSend=1;
 800107e:	4a87      	ldr	r2, [pc, #540]	; (800129c <recibirmensaje+0xab0>)
 8001080:	7813      	ldrb	r3, [r2, #0]
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	7013      	strb	r3, [r2, #0]
								espReadyToRecieve=0;
 8001088:	4a84      	ldr	r2, [pc, #528]	; (800129c <recibirmensaje+0xab0>)
 800108a:	7813      	ldrb	r3, [r2, #0]
 800108c:	f36f 1345 	bfc	r3, #5, #1
 8001090:	7013      	strb	r3, [r2, #0]
								sendALIVE=0;
 8001092:	4a83      	ldr	r2, [pc, #524]	; (80012a0 <recibirmensaje+0xab4>)
 8001094:	7813      	ldrb	r3, [r2, #0]
 8001096:	f36f 0341 	bfc	r3, #1, #1
 800109a:	7013      	strb	r3, [r2, #0]
								timeToSendAlive=30;
 800109c:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <recibirmensaje+0xab8>)
 800109e:	221e      	movs	r2, #30
 80010a0:	701a      	strb	r2, [r3, #0]
								break;
 80010a2:	e093      	b.n	80011cc <recibirmensaje+0x9e0>
				case 6:
					if(buf_rx[indRX_R]==bytesToSend-bytesToSend_aux+'0'){
 80010a4:	4b75      	ldr	r3, [pc, #468]	; (800127c <recibirmensaje+0xa90>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b74      	ldr	r3, [pc, #464]	; (8001280 <recibirmensaje+0xa94>)
 80010ae:	5c9b      	ldrb	r3, [r3, r2]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b73      	ldr	r3, [pc, #460]	; (8001284 <recibirmensaje+0xa98>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4b7b      	ldr	r3, [pc, #492]	; (80012a8 <recibirmensaje+0xabc>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	1acb      	subs	r3, r1, r3
 80010c0:	3330      	adds	r3, #48	; 0x30
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d106      	bne.n	80010d4 <recibirmensaje+0x8e8>
						decoCIPSEND++;
 80010c6:	4b70      	ldr	r3, [pc, #448]	; (8001288 <recibirmensaje+0xa9c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b6e      	ldr	r3, [pc, #440]	; (8001288 <recibirmensaje+0xa9c>)
 80010d0:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 80010d2:	e078      	b.n	80011c6 <recibirmensaje+0x9da>
						if(!timeout2){
 80010d4:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <recibirmensaje+0xaa4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d174      	bne.n	80011c6 <recibirmensaje+0x9da>
							decoCIPSEND=0;
 80010dc:	4b6a      	ldr	r3, [pc, #424]	; (8001288 <recibirmensaje+0xa9c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 80010e2:	4b6c      	ldr	r3, [pc, #432]	; (8001294 <recibirmensaje+0xaa8>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b64      	ldr	r3, [pc, #400]	; (800127c <recibirmensaje+0xa90>)
 80010ea:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 80010ec:	4b6a      	ldr	r3, [pc, #424]	; (8001298 <recibirmensaje+0xaac>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 80010f2:	4a6a      	ldr	r2, [pc, #424]	; (800129c <recibirmensaje+0xab0>)
 80010f4:	7813      	ldrb	r3, [r2, #0]
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 80010fc:	4a67      	ldr	r2, [pc, #412]	; (800129c <recibirmensaje+0xab0>)
 80010fe:	7813      	ldrb	r3, [r2, #0]
 8001100:	f36f 1345 	bfc	r3, #5, #1
 8001104:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8001106:	4a66      	ldr	r2, [pc, #408]	; (80012a0 <recibirmensaje+0xab4>)
 8001108:	7813      	ldrb	r3, [r2, #0]
 800110a:	f36f 0341 	bfc	r3, #1, #1
 800110e:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8001110:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <recibirmensaje+0xab8>)
 8001112:	221e      	movs	r2, #30
 8001114:	701a      	strb	r2, [r3, #0]
							break;
 8001116:	e059      	b.n	80011cc <recibirmensaje+0x9e0>
				case 7:
					if(buf_rx[indRX_R]==CIPSEND4[coincidencias]){
 8001118:	4b58      	ldr	r3, [pc, #352]	; (800127c <recibirmensaje+0xa90>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	4b57      	ldr	r3, [pc, #348]	; (8001280 <recibirmensaje+0xa94>)
 8001122:	5c9b      	ldrb	r3, [r3, r2]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <recibirmensaje+0xaac>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <recibirmensaje+0xac0>)
 800112e:	5c5b      	ldrb	r3, [r3, r1]
 8001130:	429a      	cmp	r2, r3
 8001132:	d11a      	bne.n	800116a <recibirmensaje+0x97e>
						coincidencias++;
 8001134:	4b58      	ldr	r3, [pc, #352]	; (8001298 <recibirmensaje+0xaac>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b56      	ldr	r3, [pc, #344]	; (8001298 <recibirmensaje+0xaac>)
 800113e:	701a      	strb	r2, [r3, #0]

						if(coincidencias>19){
 8001140:	4b55      	ldr	r3, [pc, #340]	; (8001298 <recibirmensaje+0xaac>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b13      	cmp	r3, #19
 8001146:	d940      	bls.n	80011ca <recibirmensaje+0x9de>
							coincidencias = 0;
 8001148:	4b53      	ldr	r3, [pc, #332]	; (8001298 <recibirmensaje+0xaac>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
							decoCIPSEND=0;
 800114e:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <recibirmensaje+0xa9c>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8001154:	4a51      	ldr	r2, [pc, #324]	; (800129c <recibirmensaje+0xab0>)
 8001156:	7813      	ldrb	r3, [r2, #0]
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 800115e:	4a4f      	ldr	r2, [pc, #316]	; (800129c <recibirmensaje+0xab0>)
 8001160:	7813      	ldrb	r3, [r2, #0]
 8001162:	f36f 1345 	bfc	r3, #5, #1
 8001166:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8001168:	e02f      	b.n	80011ca <recibirmensaje+0x9de>
						if(!timeout2){
 800116a:	4b49      	ldr	r3, [pc, #292]	; (8001290 <recibirmensaje+0xaa4>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d12b      	bne.n	80011ca <recibirmensaje+0x9de>
							decoCIPSEND=0;
 8001172:	4b45      	ldr	r3, [pc, #276]	; (8001288 <recibirmensaje+0xa9c>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8001178:	4b46      	ldr	r3, [pc, #280]	; (8001294 <recibirmensaje+0xaa8>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b3f      	ldr	r3, [pc, #252]	; (800127c <recibirmensaje+0xa90>)
 8001180:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8001182:	4b45      	ldr	r3, [pc, #276]	; (8001298 <recibirmensaje+0xaac>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8001188:	4a44      	ldr	r2, [pc, #272]	; (800129c <recibirmensaje+0xab0>)
 800118a:	7813      	ldrb	r3, [r2, #0]
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8001192:	4a42      	ldr	r2, [pc, #264]	; (800129c <recibirmensaje+0xab0>)
 8001194:	7813      	ldrb	r3, [r2, #0]
 8001196:	f36f 1345 	bfc	r3, #5, #1
 800119a:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 800119c:	4a40      	ldr	r2, [pc, #256]	; (80012a0 <recibirmensaje+0xab4>)
 800119e:	7813      	ldrb	r3, [r2, #0]
 80011a0:	f36f 0341 	bfc	r3, #1, #1
 80011a4:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <recibirmensaje+0xab8>)
 80011a8:	221e      	movs	r2, #30
 80011aa:	701a      	strb	r2, [r3, #0]
							break;
 80011ac:	e00e      	b.n	80011cc <recibirmensaje+0x9e0>
				break;
 80011ae:	bf00      	nop
 80011b0:	e159      	b.n	8001466 <recibirmensaje+0xc7a>
				break;
 80011b2:	bf00      	nop
 80011b4:	e157      	b.n	8001466 <recibirmensaje+0xc7a>
				break;
 80011b6:	bf00      	nop
 80011b8:	e155      	b.n	8001466 <recibirmensaje+0xc7a>
				break;
 80011ba:	bf00      	nop
 80011bc:	e153      	b.n	8001466 <recibirmensaje+0xc7a>
				break;
 80011be:	bf00      	nop
 80011c0:	e151      	b.n	8001466 <recibirmensaje+0xc7a>
				break;
 80011c2:	bf00      	nop
 80011c4:	e14f      	b.n	8001466 <recibirmensaje+0xc7a>
				break;
 80011c6:	bf00      	nop
 80011c8:	e14d      	b.n	8001466 <recibirmensaje+0xc7a>
				break;
 80011ca:	bf00      	nop
			}
		break;
 80011cc:	e14b      	b.n	8001466 <recibirmensaje+0xc7a>
		case 8:
			switch(decoIPD){
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <recibirmensaje+0xac4>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	f200 8149 	bhi.w	800146a <recibirmensaje+0xc7e>
 80011d8:	a201      	add	r2, pc, #4	; (adr r2, 80011e0 <recibirmensaje+0x9f4>)
 80011da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011de:	bf00      	nop
 80011e0:	080011f9 	.word	0x080011f9
 80011e4:	0800125b 	.word	0x0800125b
 80011e8:	080012b9 	.word	0x080012b9
 80011ec:	08001327 	.word	0x08001327
 80011f0:	08001361 	.word	0x08001361
 80011f4:	080013b3 	.word	0x080013b3
				case 0:
					if(buf_rx[indRX_R]==IPD[coincidencias]){
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <recibirmensaje+0xa90>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <recibirmensaje+0xa94>)
 8001202:	5c9b      	ldrb	r3, [r3, r2]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <recibirmensaje+0xaac>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <recibirmensaje+0xac8>)
 800120e:	5c5b      	ldrb	r3, [r3, r1]
 8001210:	429a      	cmp	r2, r3
 8001212:	d114      	bne.n	800123e <recibirmensaje+0xa52>
						coincidencias++;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <recibirmensaje+0xaac>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <recibirmensaje+0xaac>)
 800121e:	701a      	strb	r2, [r3, #0]

						if(coincidencias>5){
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <recibirmensaje+0xaac>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b05      	cmp	r3, #5
 8001226:	f240 810a 	bls.w	800143e <recibirmensaje+0xc52>
							coincidencias = 0;
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <recibirmensaje+0xaac>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
							decoIPD++;
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <recibirmensaje+0xac4>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <recibirmensaje+0xac4>)
 800123a:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
							coincidencias=0;
							break;
						}
					}
				break;
 800123c:	e0ff      	b.n	800143e <recibirmensaje+0xc52>
						if(coincidencias>0){
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <recibirmensaje+0xaac>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 80fb 	beq.w	800143e <recibirmensaje+0xc52>
							indRX_R=indRX_W;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <recibirmensaje+0xaa8>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <recibirmensaje+0xa90>)
 8001250:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <recibirmensaje+0xaac>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
							break;
 8001258:	e0f6      	b.n	8001448 <recibirmensaje+0xc5c>
				case 1:
					if(buf_rx[indRX_R]==':'){
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <recibirmensaje+0xa90>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <recibirmensaje+0xa94>)
 8001264:	5c9b      	ldrb	r3, [r3, r2]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b3a      	cmp	r3, #58	; 0x3a
 800126a:	f040 80ea 	bne.w	8001442 <recibirmensaje+0xc56>
						decoIPD++;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <recibirmensaje+0xac4>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <recibirmensaje+0xac4>)
 8001278:	701a      	strb	r2, [r3, #0]
					}
				break;
 800127a:	e0e2      	b.n	8001442 <recibirmensaje+0xc56>
 800127c:	20000356 	.word	0x20000356
 8001280:	20000144 	.word	0x20000144
 8001284:	20000363 	.word	0x20000363
 8001288:	2000035d 	.word	0x2000035d
 800128c:	cccccccd 	.word	0xcccccccd
 8001290:	20000361 	.word	0x20000361
 8001294:	20000355 	.word	0x20000355
 8001298:	20000359 	.word	0x20000359
 800129c:	20000378 	.word	0x20000378
 80012a0:	2000037c 	.word	0x2000037c
 80012a4:	20000365 	.word	0x20000365
 80012a8:	20000364 	.word	0x20000364
 80012ac:	0800537c 	.word	0x0800537c
 80012b0:	2000035f 	.word	0x2000035f
 80012b4:	08005398 	.word	0x08005398
				case 2:
					if(buf_rx[indRX_R]==UNER[coincidencias]){
 80012b8:	4b72      	ldr	r3, [pc, #456]	; (8001484 <recibirmensaje+0xc98>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	4b71      	ldr	r3, [pc, #452]	; (8001488 <recibirmensaje+0xc9c>)
 80012c2:	5c9b      	ldrb	r3, [r3, r2]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <recibirmensaje+0xca0>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	4b70      	ldr	r3, [pc, #448]	; (8001490 <recibirmensaje+0xca4>)
 80012ce:	5c5b      	ldrb	r3, [r3, r1]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d117      	bne.n	8001304 <recibirmensaje+0xb18>
						coincidencias++;
 80012d4:	4b6d      	ldr	r3, [pc, #436]	; (800148c <recibirmensaje+0xca0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b6b      	ldr	r3, [pc, #428]	; (800148c <recibirmensaje+0xca0>)
 80012de:	701a      	strb	r2, [r3, #0]

						if(coincidencias>3){
 80012e0:	4b6a      	ldr	r3, [pc, #424]	; (800148c <recibirmensaje+0xca0>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	f240 80ae 	bls.w	8001446 <recibirmensaje+0xc5a>
							coincidencias = 0;
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <recibirmensaje+0xca0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
							decoIPD++;
 80012f0:	4b68      	ldr	r3, [pc, #416]	; (8001494 <recibirmensaje+0xca8>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b66      	ldr	r3, [pc, #408]	; (8001494 <recibirmensaje+0xca8>)
 80012fa:	701a      	strb	r2, [r3, #0]
							cks='U'^'N'^'E'^'R';
 80012fc:	4b66      	ldr	r3, [pc, #408]	; (8001498 <recibirmensaje+0xcac>)
 80012fe:	220c      	movs	r2, #12
 8001300:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
							decoIPD=0;
							break;
						}
					}
				break;
 8001302:	e0a0      	b.n	8001446 <recibirmensaje+0xc5a>
						if(coincidencias>0){
 8001304:	4b61      	ldr	r3, [pc, #388]	; (800148c <recibirmensaje+0xca0>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 809c 	beq.w	8001446 <recibirmensaje+0xc5a>
							indRX_R=indRX_W;
 800130e:	4b63      	ldr	r3, [pc, #396]	; (800149c <recibirmensaje+0xcb0>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <recibirmensaje+0xc98>)
 8001316:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 8001318:	4b5c      	ldr	r3, [pc, #368]	; (800148c <recibirmensaje+0xca0>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <recibirmensaje+0xca8>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
							break;
 8001324:	e090      	b.n	8001448 <recibirmensaje+0xc5c>
				case 3:
					bytesUNERprotocol=buf_rx[indRX_R];
 8001326:	4b57      	ldr	r3, [pc, #348]	; (8001484 <recibirmensaje+0xc98>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <recibirmensaje+0xc9c>)
 8001330:	5c9b      	ldrb	r3, [r3, r2]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b5a      	ldr	r3, [pc, #360]	; (80014a0 <recibirmensaje+0xcb4>)
 8001336:	701a      	strb	r2, [r3, #0]
					decoIPD++;
 8001338:	4b56      	ldr	r3, [pc, #344]	; (8001494 <recibirmensaje+0xca8>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b54      	ldr	r3, [pc, #336]	; (8001494 <recibirmensaje+0xca8>)
 8001342:	701a      	strb	r2, [r3, #0]
					cks^=buf_rx[indRX_R];
 8001344:	4b4f      	ldr	r3, [pc, #316]	; (8001484 <recibirmensaje+0xc98>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	4b4e      	ldr	r3, [pc, #312]	; (8001488 <recibirmensaje+0xc9c>)
 800134e:	5c9b      	ldrb	r3, [r3, r2]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b51      	ldr	r3, [pc, #324]	; (8001498 <recibirmensaje+0xcac>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4053      	eors	r3, r2
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <recibirmensaje+0xcac>)
 800135c:	701a      	strb	r2, [r3, #0]
				break;
 800135e:	e073      	b.n	8001448 <recibirmensaje+0xc5c>
				case 4:
					if(buf_rx[indRX_R]==':'){
 8001360:	4b48      	ldr	r3, [pc, #288]	; (8001484 <recibirmensaje+0xc98>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	4b47      	ldr	r3, [pc, #284]	; (8001488 <recibirmensaje+0xc9c>)
 800136a:	5c9b      	ldrb	r3, [r3, r2]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b3a      	cmp	r3, #58	; 0x3a
 8001370:	d113      	bne.n	800139a <recibirmensaje+0xbae>
						decoIPD++;
 8001372:	4b48      	ldr	r3, [pc, #288]	; (8001494 <recibirmensaje+0xca8>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <recibirmensaje+0xca8>)
 800137c:	701a      	strb	r2, [r3, #0]
						cks^=buf_rx[indRX_R];
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <recibirmensaje+0xc98>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4b40      	ldr	r3, [pc, #256]	; (8001488 <recibirmensaje+0xc9c>)
 8001388:	5c9b      	ldrb	r3, [r3, r2]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <recibirmensaje+0xcac>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4053      	eors	r3, r2
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <recibirmensaje+0xcac>)
 8001396:	701a      	strb	r2, [r3, #0]
						indRX_R=indRX_W;
						coincidencias=0;
						decoIPD=0;
						break;
					}
				break;
 8001398:	e056      	b.n	8001448 <recibirmensaje+0xc5c>
						indRX_R=indRX_W;
 800139a:	4b40      	ldr	r3, [pc, #256]	; (800149c <recibirmensaje+0xcb0>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b38      	ldr	r3, [pc, #224]	; (8001484 <recibirmensaje+0xc98>)
 80013a2:	701a      	strb	r2, [r3, #0]
						coincidencias=0;
 80013a4:	4b39      	ldr	r3, [pc, #228]	; (800148c <recibirmensaje+0xca0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
						decoIPD=0;
 80013aa:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <recibirmensaje+0xca8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
						break;
 80013b0:	e04a      	b.n	8001448 <recibirmensaje+0xc5c>
				case 5:
					if(contByte==1){
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <recibirmensaje+0xcb8>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d108      	bne.n	80013cc <recibirmensaje+0xbe0>
						cmdPosInBuf=buf_rx[indRX_R];
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <recibirmensaje+0xc98>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b31      	ldr	r3, [pc, #196]	; (8001488 <recibirmensaje+0xc9c>)
 80013c4:	5c9b      	ldrb	r3, [r3, r2]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b37      	ldr	r3, [pc, #220]	; (80014a8 <recibirmensaje+0xcbc>)
 80013ca:	701a      	strb	r2, [r3, #0]
					}
					if(contByte<bytesUNERprotocol){
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <recibirmensaje+0xcb8>)
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <recibirmensaje+0xcb4>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d213      	bcs.n	8001400 <recibirmensaje+0xc14>
						cks^=buf_rx[indRX_R];
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <recibirmensaje+0xc98>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <recibirmensaje+0xc9c>)
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <recibirmensaje+0xcac>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4053      	eors	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <recibirmensaje+0xcac>)
 80013f0:	701a      	strb	r2, [r3, #0]
						contByte++;
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <recibirmensaje+0xcb8>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <recibirmensaje+0xcb8>)
 80013fc:	701a      	strb	r2, [r3, #0]
							contByte=1;
							coincidencias=0;
							decoIPD=0;
						}
					}
				break;
 80013fe:	e023      	b.n	8001448 <recibirmensaje+0xc5c>
						if(cks==buf_rx[indRX_R]){
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <recibirmensaje+0xc98>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <recibirmensaje+0xc9c>)
 800140a:	5c9b      	ldrb	r3, [r3, r2]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <recibirmensaje+0xcac>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d109      	bne.n	800142a <recibirmensaje+0xc3e>
							contByte=1;
 8001416:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <recibirmensaje+0xcb8>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <recibirmensaje+0xca0>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <recibirmensaje+0xca8>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
				break;
 8001428:	e00e      	b.n	8001448 <recibirmensaje+0xc5c>
							contByte=1;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <recibirmensaje+0xcb8>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <recibirmensaje+0xca0>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <recibirmensaje+0xca8>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
				break;
 800143c:	e004      	b.n	8001448 <recibirmensaje+0xc5c>
				break;
 800143e:	bf00      	nop
 8001440:	e013      	b.n	800146a <recibirmensaje+0xc7e>
				break;
 8001442:	bf00      	nop
 8001444:	e011      	b.n	800146a <recibirmensaje+0xc7e>
				break;
 8001446:	bf00      	nop
			}
		break;
 8001448:	e00f      	b.n	800146a <recibirmensaje+0xc7e>
		default:

		break;
 800144a:	bf00      	nop
 800144c:	e00e      	b.n	800146c <recibirmensaje+0xc80>
		break;
 800144e:	bf00      	nop
 8001450:	e00c      	b.n	800146c <recibirmensaje+0xc80>
		break;
 8001452:	bf00      	nop
 8001454:	e00a      	b.n	800146c <recibirmensaje+0xc80>
		break;
 8001456:	bf00      	nop
 8001458:	e008      	b.n	800146c <recibirmensaje+0xc80>
		break;
 800145a:	bf00      	nop
 800145c:	e006      	b.n	800146c <recibirmensaje+0xc80>
		break;
 800145e:	bf00      	nop
 8001460:	e004      	b.n	800146c <recibirmensaje+0xc80>
		break;
 8001462:	bf00      	nop
 8001464:	e002      	b.n	800146c <recibirmensaje+0xc80>
		break;
 8001466:	bf00      	nop
 8001468:	e000      	b.n	800146c <recibirmensaje+0xc80>
		break;
 800146a:	bf00      	nop
	}
	indRX_R++;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <recibirmensaje+0xc98>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3301      	adds	r3, #1
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b03      	ldr	r3, [pc, #12]	; (8001484 <recibirmensaje+0xc98>)
 8001478:	701a      	strb	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	20000356 	.word	0x20000356
 8001488:	20000144 	.word	0x20000144
 800148c:	20000359 	.word	0x20000359
 8001490:	080053a0 	.word	0x080053a0
 8001494:	2000035f 	.word	0x2000035f
 8001498:	20000366 	.word	0x20000366
 800149c:	20000355 	.word	0x20000355
 80014a0:	20000367 	.word	0x20000367
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000368 	.word	0x20000368

080014ac <udpCom>:

void udpCom(uint8_t cmd){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]

	if(readyToSend){
 80014b6:	4b74      	ldr	r3, [pc, #464]	; (8001688 <udpCom+0x1dc>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80db 	beq.w	800167c <udpCom+0x1d0>
		switch(cmd){
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <udpCom+0x26>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d06c      	beq.n	80015aa <udpCom+0xfe>
					duty++;
				}
			break;
		}
	}
}
 80014d0:	e0d5      	b.n	800167e <udpCom+0x1d2>
				if(!espReadyToRecieve){
 80014d2:	4b6d      	ldr	r3, [pc, #436]	; (8001688 <udpCom+0x1dc>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d132      	bne.n	8001546 <udpCom+0x9a>
					AT=7;
 80014e0:	4b6a      	ldr	r3, [pc, #424]	; (800168c <udpCom+0x1e0>)
 80014e2:	2207      	movs	r2, #7
 80014e4:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],CIPSEND,11);
 80014e6:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <udpCom+0x1e4>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b69      	ldr	r3, [pc, #420]	; (8001694 <udpCom+0x1e8>)
 80014f0:	4413      	add	r3, r2
 80014f2:	220b      	movs	r2, #11
 80014f4:	4968      	ldr	r1, [pc, #416]	; (8001698 <udpCom+0x1ec>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 fe20 	bl	800513c <memcpy>
					indTX_W+=11;
 80014fc:	4b64      	ldr	r3, [pc, #400]	; (8001690 <udpCom+0x1e4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	330b      	adds	r3, #11
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b62      	ldr	r3, [pc, #392]	; (8001690 <udpCom+0x1e4>)
 8001508:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],"8\r\n",3);
 800150a:	4b61      	ldr	r3, [pc, #388]	; (8001690 <udpCom+0x1e4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	4b60      	ldr	r3, [pc, #384]	; (8001694 <udpCom+0x1e8>)
 8001514:	4413      	add	r3, r2
 8001516:	2203      	movs	r2, #3
 8001518:	4960      	ldr	r1, [pc, #384]	; (800169c <udpCom+0x1f0>)
 800151a:	4618      	mov	r0, r3
 800151c:	f003 fe0e 	bl	800513c <memcpy>
					indTX_W+=3;
 8001520:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <udpCom+0x1e4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	3303      	adds	r3, #3
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b59      	ldr	r3, [pc, #356]	; (8001690 <udpCom+0x1e4>)
 800152c:	701a      	strb	r2, [r3, #0]
					bytesToSend=8;
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <udpCom+0x1f4>)
 8001530:	2208      	movs	r2, #8
 8001532:	701a      	strb	r2, [r3, #0]
					timeout2 = 8;
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <udpCom+0x1f8>)
 8001536:	2208      	movs	r2, #8
 8001538:	701a      	strb	r2, [r3, #0]
					readyToSend = 0;
 800153a:	4a53      	ldr	r2, [pc, #332]	; (8001688 <udpCom+0x1dc>)
 800153c:	7813      	ldrb	r3, [r2, #0]
 800153e:	f36f 1304 	bfc	r3, #4, #1
 8001542:	7013      	strb	r3, [r2, #0]
			break;
 8001544:	e09b      	b.n	800167e <udpCom+0x1d2>
					memcpy((uint8_t*)&buf_tx[indTX_W],ALIVE,7);
 8001546:	4b52      	ldr	r3, [pc, #328]	; (8001690 <udpCom+0x1e4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	4b51      	ldr	r3, [pc, #324]	; (8001694 <udpCom+0x1e8>)
 8001550:	4413      	add	r3, r2
 8001552:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <udpCom+0x1fc>)
 8001554:	6810      	ldr	r0, [r2, #0]
 8001556:	6018      	str	r0, [r3, #0]
 8001558:	8891      	ldrh	r1, [r2, #4]
 800155a:	7992      	ldrb	r2, [r2, #6]
 800155c:	8099      	strh	r1, [r3, #4]
 800155e:	719a      	strb	r2, [r3, #6]
					indTX_W+=7;
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <udpCom+0x1e4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	3307      	adds	r3, #7
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b49      	ldr	r3, [pc, #292]	; (8001690 <udpCom+0x1e4>)
 800156c:	701a      	strb	r2, [r3, #0]
					buf_tx[indTX_W]='U'^'N'^'E'^'R'^0x02^':'^0xF0;
 800156e:	4b48      	ldr	r3, [pc, #288]	; (8001690 <udpCom+0x1e4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	4b47      	ldr	r3, [pc, #284]	; (8001694 <udpCom+0x1e8>)
 8001578:	21c4      	movs	r1, #196	; 0xc4
 800157a:	5499      	strb	r1, [r3, r2]
					indTX_W+=1;
 800157c:	4b44      	ldr	r3, [pc, #272]	; (8001690 <udpCom+0x1e4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	3301      	adds	r3, #1
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b42      	ldr	r3, [pc, #264]	; (8001690 <udpCom+0x1e4>)
 8001588:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 800158a:	4a3f      	ldr	r2, [pc, #252]	; (8001688 <udpCom+0x1dc>)
 800158c:	7813      	ldrb	r3, [r2, #0]
 800158e:	f36f 1345 	bfc	r3, #5, #1
 8001592:	7013      	strb	r3, [r2, #0]
					sendALIVE=0;
 8001594:	4a45      	ldr	r2, [pc, #276]	; (80016ac <udpCom+0x200>)
 8001596:	7813      	ldrb	r3, [r2, #0]
 8001598:	f36f 0341 	bfc	r3, #1, #1
 800159c:	7013      	strb	r3, [r2, #0]
					readyToSend = 0;
 800159e:	4a3a      	ldr	r2, [pc, #232]	; (8001688 <udpCom+0x1dc>)
 80015a0:	7813      	ldrb	r3, [r2, #0]
 80015a2:	f36f 1304 	bfc	r3, #4, #1
 80015a6:	7013      	strb	r3, [r2, #0]
			break;
 80015a8:	e069      	b.n	800167e <udpCom+0x1d2>
				if(!espReadyToRecieve){
 80015aa:	4b37      	ldr	r3, [pc, #220]	; (8001688 <udpCom+0x1dc>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d132      	bne.n	800161e <udpCom+0x172>
					AT=7;
 80015b8:	4b34      	ldr	r3, [pc, #208]	; (800168c <udpCom+0x1e0>)
 80015ba:	2207      	movs	r2, #7
 80015bc:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],CIPSEND,11);
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <udpCom+0x1e4>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b33      	ldr	r3, [pc, #204]	; (8001694 <udpCom+0x1e8>)
 80015c8:	4413      	add	r3, r2
 80015ca:	220b      	movs	r2, #11
 80015cc:	4932      	ldr	r1, [pc, #200]	; (8001698 <udpCom+0x1ec>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fdb4 	bl	800513c <memcpy>
					indTX_W+=11;
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <udpCom+0x1e4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	330b      	adds	r3, #11
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <udpCom+0x1e4>)
 80015e0:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],"9\r\n",3);
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <udpCom+0x1e4>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <udpCom+0x1e8>)
 80015ec:	4413      	add	r3, r2
 80015ee:	2203      	movs	r2, #3
 80015f0:	492f      	ldr	r1, [pc, #188]	; (80016b0 <udpCom+0x204>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fda2 	bl	800513c <memcpy>
					indTX_W+=3;
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <udpCom+0x1e4>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	3303      	adds	r3, #3
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <udpCom+0x1e4>)
 8001604:	701a      	strb	r2, [r3, #0]
					bytesToSend=9;
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <udpCom+0x1f4>)
 8001608:	2209      	movs	r2, #9
 800160a:	701a      	strb	r2, [r3, #0]
					timeout2 = 20;
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <udpCom+0x1f8>)
 800160e:	2214      	movs	r2, #20
 8001610:	701a      	strb	r2, [r3, #0]
					readyToSend = 0;
 8001612:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <udpCom+0x1dc>)
 8001614:	7813      	ldrb	r3, [r2, #0]
 8001616:	f36f 1304 	bfc	r3, #4, #1
 800161a:	7013      	strb	r3, [r2, #0]
			break;
 800161c:	e02f      	b.n	800167e <udpCom+0x1d2>
					memcpy((uint8_t*)&buf_tx[indTX_W],ACK_D0,9);
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <udpCom+0x1e4>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <udpCom+0x1e8>)
 8001628:	4413      	add	r3, r2
 800162a:	4922      	ldr	r1, [pc, #136]	; (80016b4 <udpCom+0x208>)
 800162c:	461a      	mov	r2, r3
 800162e:	460b      	mov	r3, r1
 8001630:	cb03      	ldmia	r3!, {r0, r1}
 8001632:	6010      	str	r0, [r2, #0]
 8001634:	6051      	str	r1, [r2, #4]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	7213      	strb	r3, [r2, #8]
					indTX_W+=9;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <udpCom+0x1e4>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3309      	adds	r3, #9
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <udpCom+0x1e4>)
 8001646:	701a      	strb	r2, [r3, #0]
					buf_tx[indTX_W]='U'^'N'^'E'^'R'^0x03^':'^0xD0^0x0D;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <udpCom+0x1e4>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <udpCom+0x1e8>)
 8001652:	21e8      	movs	r1, #232	; 0xe8
 8001654:	5499      	strb	r1, [r3, r2]
					indTX_W+=1;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <udpCom+0x1e4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	3301      	adds	r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <udpCom+0x1e4>)
 8001662:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 8001664:	4a08      	ldr	r2, [pc, #32]	; (8001688 <udpCom+0x1dc>)
 8001666:	7813      	ldrb	r3, [r2, #0]
 8001668:	f36f 1345 	bfc	r3, #5, #1
 800166c:	7013      	strb	r3, [r2, #0]
					duty++;
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <udpCom+0x20c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <udpCom+0x20c>)
 8001678:	701a      	strb	r2, [r3, #0]
			break;
 800167a:	e000      	b.n	800167e <udpCom+0x1d2>
	}
 800167c:	bf00      	nop
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000378 	.word	0x20000378
 800168c:	2000035c 	.word	0x2000035c
 8001690:	20000357 	.word	0x20000357
 8001694:	20000244 	.word	0x20000244
 8001698:	0800535c 	.word	0x0800535c
 800169c:	08005180 	.word	0x08005180
 80016a0:	20000363 	.word	0x20000363
 80016a4:	20000361 	.word	0x20000361
 80016a8:	080053a8 	.word	0x080053a8
 80016ac:	2000037c 	.word	0x2000037c
 80016b0:	08005184 	.word	0x08005184
 80016b4:	080053b0 	.word	0x080053b0
 80016b8:	2000035b 	.word	0x2000035b

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f000 fd1c 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 f952 	bl	800196c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f000 faf4 	bl	8001cb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016cc:	f000 fac8 	bl	8001c60 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80016d0:	f000 fa4e 	bl	8001b70 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80016d4:	f000 fa9a 	bl	8001c0c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80016d8:	f000 f9b4 	bl	8001a44 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80016dc:	488f      	ldr	r0, [pc, #572]	; (800191c <main+0x260>)
 80016de:	f001 fe1d 	bl	800331c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80016e2:	488f      	ldr	r0, [pc, #572]	; (8001920 <main+0x264>)
 80016e4:	f001 fdc0 	bl	8003268 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016e8:	2100      	movs	r1, #0
 80016ea:	488d      	ldr	r0, [pc, #564]	; (8001920 <main+0x264>)
 80016ec:	f001 fed2 	bl	8003494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016f0:	2104      	movs	r1, #4
 80016f2:	488b      	ldr	r0, [pc, #556]	; (8001920 <main+0x264>)
 80016f4:	f001 fece 	bl	8003494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80016f8:	2108      	movs	r1, #8
 80016fa:	4889      	ldr	r0, [pc, #548]	; (8001920 <main+0x264>)
 80016fc:	f001 feca 	bl	8003494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001700:	210c      	movs	r1, #12
 8001702:	4887      	ldr	r0, [pc, #540]	; (8001920 <main+0x264>)
 8001704:	f001 fec6 	bl	8003494 <HAL_TIM_PWM_Start>

  timeout2=30;
 8001708:	4b86      	ldr	r3, [pc, #536]	; (8001924 <main+0x268>)
 800170a:	221e      	movs	r2, #30
 800170c:	701a      	strb	r2, [r3, #0]
  //timeOut3=10;
  timeToSendAlive=30;
 800170e:	4b86      	ldr	r3, [pc, #536]	; (8001928 <main+0x26c>)
 8001710:	221e      	movs	r2, #30
 8001712:	701a      	strb	r2, [r3, #0]
  timeout1=30;
 8001714:	4b85      	ldr	r3, [pc, #532]	; (800192c <main+0x270>)
 8001716:	221e      	movs	r2, #30
 8001718:	701a      	strb	r2, [r3, #0]
  readyToSend=1;
 800171a:	4a85      	ldr	r2, [pc, #532]	; (8001930 <main+0x274>)
 800171c:	7813      	ldrb	r3, [r2, #0]
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	7013      	strb	r3, [r2, #0]
  race=0;
 8001724:	4a82      	ldr	r2, [pc, #520]	; (8001930 <main+0x274>)
 8001726:	7813      	ldrb	r3, [r2, #0]
 8001728:	f36f 0300 	bfc	r3, #0, #1
 800172c:	7013      	strb	r3, [r2, #0]
  killRace=0;
 800172e:	4a80      	ldr	r2, [pc, #512]	; (8001930 <main+0x274>)
 8001730:	7813      	ldrb	r3, [r2, #0]
 8001732:	f36f 1386 	bfc	r3, #6, #1
 8001736:	7013      	strb	r3, [r2, #0]
  stop=0;
 8001738:	4a7d      	ldr	r2, [pc, #500]	; (8001930 <main+0x274>)
 800173a:	7813      	ldrb	r3, [r2, #0]
 800173c:	f36f 03c3 	bfc	r3, #3, #1
 8001740:	7013      	strb	r3, [r2, #0]
  duty=0;
 8001742:	4b7c      	ldr	r3, [pc, #496]	; (8001934 <main+0x278>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
  espConnected=0;
 8001748:	4a7b      	ldr	r2, [pc, #492]	; (8001938 <main+0x27c>)
 800174a:	7813      	ldrb	r3, [r2, #0]
 800174c:	f36f 0300 	bfc	r3, #0, #1
 8001750:	7013      	strb	r3, [r2, #0]
  sendALIVE=0;
 8001752:	4a79      	ldr	r2, [pc, #484]	; (8001938 <main+0x27c>)
 8001754:	7813      	ldrb	r3, [r2, #0]
 8001756:	f36f 0341 	bfc	r3, #1, #1
 800175a:	7013      	strb	r3, [r2, #0]

  PWM_motor1.u32=0;
 800175c:	4b77      	ldr	r3, [pc, #476]	; (800193c <main+0x280>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
  PWM_motor2.u32=0;
 8001762:	4b77      	ldr	r3, [pc, #476]	; (8001940 <main+0x284>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
  time100ms=10;
 8001768:	4b76      	ldr	r3, [pc, #472]	; (8001944 <main+0x288>)
 800176a:	220a      	movs	r2, #10
 800176c:	701a      	strb	r2, [r3, #0]
  time10ms=1;
 800176e:	4b76      	ldr	r3, [pc, #472]	; (8001948 <main+0x28c>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(ON100MS){
 8001774:	4b6e      	ldr	r3, [pc, #440]	; (8001930 <main+0x274>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d032      	beq.n	80017e8 <main+0x12c>
	  	 		ON100MS=0;
 8001782:	4a6b      	ldr	r2, [pc, #428]	; (8001930 <main+0x274>)
 8001784:	7813      	ldrb	r3, [r2, #0]
 8001786:	f36f 0341 	bfc	r3, #1, #1
 800178a:	7013      	strb	r3, [r2, #0]
	  	 	  	if(timeout1>0)
 800178c:	4b67      	ldr	r3, [pc, #412]	; (800192c <main+0x270>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <main+0xe4>
	  	 	  		timeout1--;
 8001794:	4b65      	ldr	r3, [pc, #404]	; (800192c <main+0x270>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b63      	ldr	r3, [pc, #396]	; (800192c <main+0x270>)
 800179e:	701a      	strb	r2, [r3, #0]
	  	 		if(timeout2>0)
 80017a0:	4b60      	ldr	r3, [pc, #384]	; (8001924 <main+0x268>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <main+0xf8>
	  	 			timeout2--;
 80017a8:	4b5e      	ldr	r3, [pc, #376]	; (8001924 <main+0x268>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <main+0x268>)
 80017b2:	701a      	strb	r2, [r3, #0]
	  	 		if(jobTime.u32>0)
 80017b4:	4b65      	ldr	r3, [pc, #404]	; (800194c <main+0x290>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <main+0x10a>
	  	 			jobTime.u32--;
 80017bc:	4b63      	ldr	r3, [pc, #396]	; (800194c <main+0x290>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	4a62      	ldr	r2, [pc, #392]	; (800194c <main+0x290>)
 80017c4:	6013      	str	r3, [r2, #0]
	  	 		if((timeToSendAlive>0)&&(espConnected))
 80017c6:	4b58      	ldr	r3, [pc, #352]	; (8001928 <main+0x26c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00c      	beq.n	80017e8 <main+0x12c>
 80017ce:	4b5a      	ldr	r3, [pc, #360]	; (8001938 <main+0x27c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <main+0x12c>
	  	 			timeToSendAlive--;
 80017dc:	4b52      	ldr	r3, [pc, #328]	; (8001928 <main+0x26c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b50      	ldr	r3, [pc, #320]	; (8001928 <main+0x26c>)
 80017e6:	701a      	strb	r2, [r3, #0]
	  	  }

	  	  if( (!timeToSendAlive) && (espConnected) ){
 80017e8:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <main+0x26c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d118      	bne.n	8001822 <main+0x166>
 80017f0:	4b51      	ldr	r3, [pc, #324]	; (8001938 <main+0x27c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d011      	beq.n	8001822 <main+0x166>
	  		  sendALIVE=1;
 80017fe:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <main+0x27c>)
 8001800:	7813      	ldrb	r3, [r2, #0]
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	7013      	strb	r3, [r2, #0]
	  		  espReadyToRecieve=0;
 8001808:	4a49      	ldr	r2, [pc, #292]	; (8001930 <main+0x274>)
 800180a:	7813      	ldrb	r3, [r2, #0]
 800180c:	f36f 1345 	bfc	r3, #5, #1
 8001810:	7013      	strb	r3, [r2, #0]
	  		  timeToSendAlive=30;
 8001812:	4b45      	ldr	r3, [pc, #276]	; (8001928 <main+0x26c>)
 8001814:	221e      	movs	r2, #30
 8001816:	701a      	strb	r2, [r3, #0]
	  		  readyToSend=1;
 8001818:	4a45      	ldr	r2, [pc, #276]	; (8001930 <main+0x274>)
 800181a:	7813      	ldrb	r3, [r2, #0]
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	7013      	strb	r3, [r2, #0]
	  	  }

	  	  if(sendALIVE){
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <main+0x27c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <main+0x17a>
	  	  		  udpCom(0xF0);
 8001830:	20f0      	movs	r0, #240	; 0xf0
 8001832:	f7ff fe3b 	bl	80014ac <udpCom>
	  	  }

	  	switch(duty){
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <main+0x278>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d021      	beq.n	8001882 <main+0x1c6>
 800183e:	2b02      	cmp	r3, #2
 8001840:	dc25      	bgt.n	800188e <main+0x1d2>
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <main+0x190>
 8001846:	2b01      	cmp	r3, #1
 8001848:	d018      	beq.n	800187c <main+0x1c0>
 800184a:	e020      	b.n	800188e <main+0x1d2>
	  		case 0:
	  			if(!timeout1){
 800184c:	4b37      	ldr	r3, [pc, #220]	; (800192c <main+0x270>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d11b      	bne.n	800188c <main+0x1d0>
	  				initEsp();
 8001854:	f7fe fec6 	bl	80005e4 <initEsp>
	  				HAL_UART_Receive_IT(&huart1, (uint8_t *)&buf_rx[indRX_W], 1);
 8001858:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <main+0x294>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <main+0x298>)
 8001862:	4413      	add	r3, r2
 8001864:	2201      	movs	r2, #1
 8001866:	4619      	mov	r1, r3
 8001868:	483b      	ldr	r0, [pc, #236]	; (8001958 <main+0x29c>)
 800186a:	f002 fd18 	bl	800429e <HAL_UART_Receive_IT>
	  				duty++;
 800186e:	4b31      	ldr	r3, [pc, #196]	; (8001934 <main+0x278>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <main+0x278>)
 8001878:	701a      	strb	r2, [r3, #0]
	  			}
	  		break;
 800187a:	e007      	b.n	800188c <main+0x1d0>
	  		case 1:
	  			initEsp();
 800187c:	f7fe feb2 	bl	80005e4 <initEsp>
	  		break;
 8001880:	e005      	b.n	800188e <main+0x1d2>
	  		case 2:
	  			//udpCom(0);
	  			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001882:	2120      	movs	r1, #32
 8001884:	4835      	ldr	r0, [pc, #212]	; (800195c <main+0x2a0>)
 8001886:	f000 ffec 	bl	8002862 <HAL_GPIO_TogglePin>
	  		break;
 800188a:	e000      	b.n	800188e <main+0x1d2>
	  		break;
 800188c:	bf00      	nop
	  	}

	  		if( ( ( (!jobTime.u32) && (killRace) ) ) || (stop) ) {
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <main+0x290>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <main+0x1e8>
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <main+0x274>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d106      	bne.n	80018b2 <main+0x1f6>
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <main+0x274>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d01e      	beq.n	80018f0 <main+0x234>
	  				  stop=0;
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <main+0x274>)
 80018b4:	7813      	ldrb	r3, [r2, #0]
 80018b6:	f36f 03c3 	bfc	r3, #3, #1
 80018ba:	7013      	strb	r3, [r2, #0]
	  				  race=0;
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <main+0x274>)
 80018be:	7813      	ldrb	r3, [r2, #0]
 80018c0:	f36f 0300 	bfc	r3, #0, #1
 80018c4:	7013      	strb	r3, [r2, #0]
	  				  killRace=0;
 80018c6:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <main+0x274>)
 80018c8:	7813      	ldrb	r3, [r2, #0]
 80018ca:	f36f 1386 	bfc	r3, #6, #1
 80018ce:	7013      	strb	r3, [r2, #0]
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <main+0x264>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <main+0x264>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	639a      	str	r2, [r3, #56]	; 0x38
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <main+0x264>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <main+0x264>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
	  		}

	  		if(indTX_R!=indTX_W){
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <main+0x2a4>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <main+0x2a8>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <main+0x248>
	  			uart();
 8001900:	f7fe fe4a 	bl	8000598 <uart>
	  		}

	  		if(indRX_R!=indRX_W){
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <main+0x2ac>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <main+0x294>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	429a      	cmp	r2, r3
 8001912:	f43f af2f 	beq.w	8001774 <main+0xb8>
	  			recibirmensaje();
 8001916:	f7fe ff69 	bl	80007ec <recibirmensaje>
	  if(ON100MS){
 800191a:	e72b      	b.n	8001774 <main+0xb8>
 800191c:	20000074 	.word	0x20000074
 8001920:	2000002c 	.word	0x2000002c
 8001924:	20000361 	.word	0x20000361
 8001928:	20000365 	.word	0x20000365
 800192c:	20000360 	.word	0x20000360
 8001930:	20000378 	.word	0x20000378
 8001934:	2000035b 	.word	0x2000035b
 8001938:	2000037c 	.word	0x2000037c
 800193c:	2000036c 	.word	0x2000036c
 8001940:	20000370 	.word	0x20000370
 8001944:	20000353 	.word	0x20000353
 8001948:	20000354 	.word	0x20000354
 800194c:	20000374 	.word	0x20000374
 8001950:	20000355 	.word	0x20000355
 8001954:	20000144 	.word	0x20000144
 8001958:	200000bc 	.word	0x200000bc
 800195c:	40020000 	.word	0x40020000
 8001960:	20000358 	.word	0x20000358
 8001964:	20000357 	.word	0x20000357
 8001968:	20000356 	.word	0x20000356

0800196c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b094      	sub	sp, #80	; 0x50
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	2230      	movs	r2, #48	; 0x30
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fbec 	bl	8005158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <SystemClock_Config+0xd0>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <SystemClock_Config+0xd0>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199e:	6413      	str	r3, [r2, #64]	; 0x40
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <SystemClock_Config+0xd0>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <SystemClock_Config+0xd4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b8:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <SystemClock_Config+0xd4>)
 80019ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <SystemClock_Config+0xd4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019cc:	2302      	movs	r3, #2
 80019ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d4:	2310      	movs	r3, #16
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d8:	2302      	movs	r3, #2
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019dc:	2300      	movs	r3, #0
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019e0:	2310      	movs	r3, #16
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019ea:	2304      	movs	r3, #4
 80019ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019ee:	2307      	movs	r3, #7
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 ff4e 	bl	8002898 <HAL_RCC_OscConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a02:	f000 f9c5 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a06:	230f      	movs	r3, #15
 8001a08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2102      	movs	r1, #2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 f9b0 	bl	8002d88 <HAL_RCC_ClockConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a2e:	f000 f9af 	bl	8001d90 <Error_Handler>
  }
}
 8001a32:	bf00      	nop
 8001a34:	3750      	adds	r7, #80	; 0x50
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40007000 	.word	0x40007000

08001a44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08e      	sub	sp, #56	; 0x38
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	f107 0320 	add.w	r3, r7, #32
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a74:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001a76:	4a3d      	ldr	r2, [pc, #244]	; (8001b6c <MX_TIM3_Init+0x128>)
 8001a78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001a7c:	2263      	movs	r2, #99	; 0x63
 8001a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 210;
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001a88:	22d2      	movs	r2, #210	; 0xd2
 8001a8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8c:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a98:	4833      	ldr	r0, [pc, #204]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001a9a:	f001 fb95 	bl	80031c8 <HAL_TIM_Base_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001aa4:	f000 f974 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	482c      	ldr	r0, [pc, #176]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001ab6:	f001 ff67 	bl	8003988 <HAL_TIM_ConfigClockSource>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001ac0:	f000 f966 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ac4:	4828      	ldr	r0, [pc, #160]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001ac6:	f001 fc8b 	bl	80033e0 <HAL_TIM_PWM_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001ad0:	f000 f95e 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4821      	ldr	r0, [pc, #132]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001ae4:	f002 fb0c 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001aee:	f000 f94f 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af2:	2360      	movs	r3, #96	; 0x60
 8001af4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2200      	movs	r2, #0
 8001b06:	4619      	mov	r1, r3
 8001b08:	4817      	ldr	r0, [pc, #92]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001b0a:	f001 fe7b 	bl	8003804 <HAL_TIM_PWM_ConfigChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001b14:	f000 f93c 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4812      	ldr	r0, [pc, #72]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001b20:	f001 fe70 	bl	8003804 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001b2a:	f000 f931 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2208      	movs	r2, #8
 8001b32:	4619      	mov	r1, r3
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001b36:	f001 fe65 	bl	8003804 <HAL_TIM_PWM_ConfigChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8001b40:	f000 f926 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	220c      	movs	r2, #12
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4807      	ldr	r0, [pc, #28]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001b4c:	f001 fe5a 	bl	8003804 <HAL_TIM_PWM_ConfigChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8001b56:	f000 f91b 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b5a:	4803      	ldr	r0, [pc, #12]	; (8001b68 <MX_TIM3_Init+0x124>)
 8001b5c:	f000 f98c 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001b60:	bf00      	nop
 8001b62:	3738      	adds	r7, #56	; 0x38
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000002c 	.word	0x2000002c
 8001b6c:	40000400 	.word	0x40000400

08001b70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <MX_TIM4_Init+0x94>)
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <MX_TIM4_Init+0x98>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MX_TIM4_Init+0x94>)
 8001b94:	2264      	movs	r2, #100	; 0x64
 8001b96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_TIM4_Init+0x94>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <MX_TIM4_Init+0x94>)
 8001ba0:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001ba4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <MX_TIM4_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_TIM4_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bb2:	4814      	ldr	r0, [pc, #80]	; (8001c04 <MX_TIM4_Init+0x94>)
 8001bb4:	f001 fb08 	bl	80031c8 <HAL_TIM_Base_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f000 f8e7 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_TIM4_Init+0x94>)
 8001bd0:	f001 feda 	bl	8003988 <HAL_TIM_ConfigClockSource>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001bda:	f000 f8d9 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_TIM4_Init+0x94>)
 8001bec:	f002 fa88 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001bf6:	f000 f8cb 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000074 	.word	0x20000074
 8001c08:	40000800 	.word	0x40000800

08001c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_USART1_UART_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c44:	f002 fade 	bl	8004204 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f000 f89f 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200000bc 	.word	0x200000bc
 8001c5c:	40011000 	.word	0x40011000

08001c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <MX_USART2_UART_Init+0x50>)
 8001c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c86:	220c      	movs	r2, #12
 8001c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c98:	f002 fab4 	bl	8004204 <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ca2:	f000 f875 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000100 	.word	0x20000100
 8001cb0:	40004400 	.word	0x40004400

08001cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a25      	ldr	r2, [pc, #148]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	4812      	ldr	r0, [pc, #72]	; (8001d88 <MX_GPIO_Init+0xd4>)
 8001d40:	f000 fd76 	bl	8002830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480c      	ldr	r0, [pc, #48]	; (8001d8c <MX_GPIO_Init+0xd8>)
 8001d5c:	f000 fbe4 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d60:	2320      	movs	r3, #32
 8001d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4619      	mov	r1, r3
 8001d76:	4804      	ldr	r0, [pc, #16]	; (8001d88 <MX_GPIO_Init+0xd4>)
 8001d78:	f000 fbd6 	bl	8002528 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d7c:	bf00      	nop
 8001d7e:	3728      	adds	r7, #40	; 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020800 	.word	0x40020800

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <Error_Handler+0x8>
	...

08001d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_MspInit+0x4c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dda:	2007      	movs	r0, #7
 8001ddc:	f000 fad0 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800

08001dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_TIM_Base_MspInit+0x80>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d116      	bne.n	8001e2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_TIM_Base_MspInit+0x84>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <HAL_TIM_Base_MspInit+0x84>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_TIM_Base_MspInit+0x84>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	201d      	movs	r0, #29
 8001e20:	f000 fab9 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e24:	201d      	movs	r0, #29
 8001e26:	f000 fad2 	bl	80023ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e2a:	e01a      	b.n	8001e62 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <HAL_TIM_Base_MspInit+0x88>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d115      	bne.n	8001e62 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_TIM_Base_MspInit+0x84>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_TIM_Base_MspInit+0x84>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_TIM_Base_MspInit+0x84>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	201e      	movs	r0, #30
 8001e58:	f000 fa9d 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e5c:	201e      	movs	r0, #30
 8001e5e:	f000 fab6 	bl	80023ce <HAL_NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40000800 	.word	0x40000800

08001e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_TIM_MspPostInit+0x68>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d11e      	bne.n	8001ed8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001eb6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001eba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_TIM_MspPostInit+0x70>)
 8001ed4:	f000 fb28 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020800 	.word	0x40020800

08001eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <HAL_UART_MspInit+0xf8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d135      	bne.n	8001f7a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a34      	ldr	r2, [pc, #208]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001f18:	f043 0310 	orr.w	r3, r3, #16
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b32      	ldr	r3, [pc, #200]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	4822      	ldr	r0, [pc, #136]	; (8001fec <HAL_UART_MspInit+0x100>)
 8001f64:	f000 fae0 	bl	8002528 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2025      	movs	r0, #37	; 0x25
 8001f6e:	f000 fa12 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f72:	2025      	movs	r0, #37	; 0x25
 8001f74:	f000 fa2b 	bl	80023ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f78:	e030      	b.n	8001fdc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_UART_MspInit+0x104>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d12b      	bne.n	8001fdc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_UART_MspInit+0xfc>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fbc:	230c      	movs	r3, #12
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fcc:	2307      	movs	r3, #7
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_UART_MspInit+0x100>)
 8001fd8:	f000 faa6 	bl	8002528 <HAL_GPIO_Init>
}
 8001fdc:	bf00      	nop
 8001fde:	3730      	adds	r7, #48	; 0x30
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40011000 	.word	0x40011000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40004400 	.word	0x40004400

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <HardFault_Handler+0x4>

08002000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <MemManage_Handler+0x4>

08002006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <UsageFault_Handler+0x4>

08002012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002040:	f000 f8ae 	bl	80021a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <TIM3_IRQHandler+0x10>)
 800204e:	f001 fad1 	bl	80035f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000002c 	.word	0x2000002c

0800205c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <TIM4_IRQHandler+0x10>)
 8002062:	f001 fac7 	bl	80035f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000074 	.word	0x20000074

08002070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <USART1_IRQHandler+0x10>)
 8002076:	f002 f943 	bl	8004300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200000bc 	.word	0x200000bc

08002084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <SystemInit+0x20>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <SystemInit+0x20>)
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ae:	490e      	ldr	r1, [pc, #56]	; (80020e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c4:	4c0b      	ldr	r4, [pc, #44]	; (80020f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020d2:	f7ff ffd7 	bl	8002084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d6:	f003 f80d 	bl	80050f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020da:	f7ff faef 	bl	80016bc <main>
  bx  lr    
 80020de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80020ec:	080053e4 	.word	0x080053e4
  ldr r2, =_sbss
 80020f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80020f4:	20000384 	.word	0x20000384

080020f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC_IRQHandler>
	...

080020fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <HAL_Init+0x40>)
 8002106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_Init+0x40>)
 8002112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_Init+0x40>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f000 f92b 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212a:	2000      	movs	r0, #0
 800212c:	f000 f808 	bl	8002140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002130:	f7ff fe34 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023c00 	.word	0x40023c00

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_InitTick+0x54>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_InitTick+0x58>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002156:	fbb3 f3f1 	udiv	r3, r3, r1
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f943 	bl	80023ea <HAL_SYSTICK_Config>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e00e      	b.n	800218c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b0f      	cmp	r3, #15
 8002172:	d80a      	bhi.n	800218a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002174:	2200      	movs	r2, #0
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f000 f90b 	bl	8002396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002180:	4a06      	ldr	r2, [pc, #24]	; (800219c <HAL_InitTick+0x5c>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e000      	b.n	800218c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000004 	.word	0x20000004
 8002198:	2000000c 	.word	0x2000000c
 800219c:	20000008 	.word	0x20000008

080021a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_IncTick+0x20>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x24>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_IncTick+0x24>)
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	2000000c 	.word	0x2000000c
 80021c4:	20000380 	.word	0x20000380

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <HAL_GetTick+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000380 	.word	0x20000380

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f7ff ff8e 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff29 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a8:	f7ff ff3e 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7ff ff8e 	bl	80022d4 <NVIC_EncodePriority>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff5d 	bl	8002280 <__NVIC_SetPriority>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff31 	bl	8002244 <__NVIC_EnableIRQ>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffa2 	bl	800233c <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff feda 	bl	80021c8 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d008      	beq.n	8002434 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e052      	b.n	80024da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0216 	bic.w	r2, r2, #22
 8002442:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002452:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <HAL_DMA_Abort+0x62>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0208 	bic.w	r2, r2, #8
 8002472:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002484:	e013      	b.n	80024ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002486:	f7ff fe9f 	bl	80021c8 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b05      	cmp	r3, #5
 8002492:	d90c      	bls.n	80024ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2203      	movs	r2, #3
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e015      	b.n	80024da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e4      	bne.n	8002486 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	223f      	movs	r2, #63	; 0x3f
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d004      	beq.n	8002500 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2280      	movs	r2, #128	; 0x80
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e00c      	b.n	800251a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2205      	movs	r2, #5
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	e159      	b.n	80027f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002544:	2201      	movs	r2, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	429a      	cmp	r2, r3
 800255e:	f040 8148 	bne.w	80027f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d005      	beq.n	800257a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002576:	2b02      	cmp	r3, #2
 8002578:	d130      	bne.n	80025dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b0:	2201      	movs	r2, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 0201 	and.w	r2, r3, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d017      	beq.n	8002618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d123      	bne.n	800266c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	08da      	lsrs	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3208      	adds	r2, #8
 8002666:	69b9      	ldr	r1, [r7, #24]
 8002668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a2 	beq.w	80027f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b57      	ldr	r3, [pc, #348]	; (8002810 <HAL_GPIO_Init+0x2e8>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a56      	ldr	r2, [pc, #344]	; (8002810 <HAL_GPIO_Init+0x2e8>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b54      	ldr	r3, [pc, #336]	; (8002810 <HAL_GPIO_Init+0x2e8>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ca:	4a52      	ldr	r2, [pc, #328]	; (8002814 <HAL_GPIO_Init+0x2ec>)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	220f      	movs	r2, #15
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a49      	ldr	r2, [pc, #292]	; (8002818 <HAL_GPIO_Init+0x2f0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x202>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a48      	ldr	r2, [pc, #288]	; (800281c <HAL_GPIO_Init+0x2f4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x1fe>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a47      	ldr	r2, [pc, #284]	; (8002820 <HAL_GPIO_Init+0x2f8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x1fa>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a46      	ldr	r2, [pc, #280]	; (8002824 <HAL_GPIO_Init+0x2fc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x1f6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a45      	ldr	r2, [pc, #276]	; (8002828 <HAL_GPIO_Init+0x300>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x1f2>
 8002716:	2304      	movs	r3, #4
 8002718:	e008      	b.n	800272c <HAL_GPIO_Init+0x204>
 800271a:	2307      	movs	r3, #7
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x204>
 800271e:	2303      	movs	r3, #3
 8002720:	e004      	b.n	800272c <HAL_GPIO_Init+0x204>
 8002722:	2302      	movs	r3, #2
 8002724:	e002      	b.n	800272c <HAL_GPIO_Init+0x204>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_GPIO_Init+0x204>
 800272a:	2300      	movs	r3, #0
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f002 0203 	and.w	r2, r2, #3
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	4093      	lsls	r3, r2
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800273c:	4935      	ldr	r1, [pc, #212]	; (8002814 <HAL_GPIO_Init+0x2ec>)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	3302      	adds	r3, #2
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_GPIO_Init+0x304>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276e:	4a2f      	ldr	r2, [pc, #188]	; (800282c <HAL_GPIO_Init+0x304>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_GPIO_Init+0x304>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002798:	4a24      	ldr	r2, [pc, #144]	; (800282c <HAL_GPIO_Init+0x304>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800279e:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_GPIO_Init+0x304>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c2:	4a1a      	ldr	r2, [pc, #104]	; (800282c <HAL_GPIO_Init+0x304>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_GPIO_Init+0x304>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ec:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_GPIO_Init+0x304>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	f67f aea2 	bls.w	8002544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3724      	adds	r7, #36	; 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40013800 	.word	0x40013800
 8002818:	40020000 	.word	0x40020000
 800281c:	40020400 	.word	0x40020400
 8002820:	40020800 	.word	0x40020800
 8002824:	40020c00 	.word	0x40020c00
 8002828:	40021000 	.word	0x40021000
 800282c:	40013c00 	.word	0x40013c00

08002830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
 800283c:	4613      	mov	r3, r2
 800283e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002840:	787b      	ldrb	r3, [r7, #1]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800284c:	e003      	b.n	8002856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	041a      	lsls	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	619a      	str	r2, [r3, #24]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002874:	887a      	ldrh	r2, [r7, #2]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	041a      	lsls	r2, r3, #16
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	43d9      	mvns	r1, r3
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	400b      	ands	r3, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e267      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d075      	beq.n	80029a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b6:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d00c      	beq.n	80028dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b85      	ldr	r3, [pc, #532]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d112      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ce:	4b82      	ldr	r3, [pc, #520]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028da:	d10b      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b7e      	ldr	r3, [pc, #504]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <HAL_RCC_OscConfig+0x108>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d157      	bne.n	80029a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e242      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x74>
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a75      	ldr	r2, [pc, #468]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6c      	ldr	r2, [pc, #432]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 8002930:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a68      	ldr	r2, [pc, #416]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a65      	ldr	r2, [pc, #404]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7ff fc3a 	bl	80021c8 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7ff fc36 	bl	80021c8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e207      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xc0>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff fc26 	bl	80021c8 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff fc22 	bl	80021c8 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1f3      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0xe8>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d063      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1c7      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4937      	ldr	r1, [pc, #220]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e03a      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b34      	ldr	r3, [pc, #208]	; (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7ff fbdb 	bl	80021c8 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a16:	f7ff fbd7 	bl	80021c8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1a8      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4925      	ldr	r1, [pc, #148]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7ff fbba 	bl	80021c8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7ff fbb6 	bl	80021c8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e187      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d036      	beq.n	8002af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7ff fb9a 	bl	80021c8 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7ff fb96 	bl	80021c8 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e167      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x200>
 8002ab6:	e01b      	b.n	8002af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7ff fb83 	bl	80021c8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	e00e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7ff fb7f 	bl	80021c8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d907      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e150      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	42470000 	.word	0x42470000
 8002ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ea      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8097 	beq.w	8002c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b81      	ldr	r3, [pc, #516]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a7c      	ldr	r2, [pc, #496]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b77      	ldr	r3, [pc, #476]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b74      	ldr	r3, [pc, #464]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a73      	ldr	r2, [pc, #460]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7ff fb3f 	bl	80021c8 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7ff fb3b 	bl	80021c8 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e10c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2ea>
 8002b74:	4b64      	ldr	r3, [pc, #400]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a63      	ldr	r2, [pc, #396]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	e01c      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x30c>
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a5e      	ldr	r2, [pc, #376]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002ba4:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a57      	ldr	r2, [pc, #348]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb0:	4b55      	ldr	r3, [pc, #340]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a54      	ldr	r2, [pc, #336]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f023 0304 	bic.w	r3, r3, #4
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7ff fb00 	bl	80021c8 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7ff fafc 	bl	80021c8 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0cb      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ee      	beq.n	8002bcc <HAL_RCC_OscConfig+0x334>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7ff faea 	bl	80021c8 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7ff fae6 	bl	80021c8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0b5      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ee      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a1 	beq.w	8002d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d05c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d141      	bne.n	8002cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff faba 	bl	80021c8 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7ff fab6 	bl	80021c8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e087      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	491b      	ldr	r1, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7ff fa8f 	bl	80021c8 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7ff fa8b 	bl	80021c8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e05c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x416>
 8002ccc:	e054      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7ff fa78 	bl	80021c8 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7ff fa74 	bl	80021c8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e045      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x444>
 8002cfa:	e03d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e038      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x4ec>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d028      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d121      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d11a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0cc      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d044      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e067      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4934      	ldr	r1, [pc, #208]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7ff f9a6 	bl	80021c8 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7ff f9a2 	bl	80021c8 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e04f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d20c      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f821 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f906 	bl	8002140 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	080053bc 	.word	0x080053bc
 8002f4c:	20000004 	.word	0x20000004
 8002f50:	20000008 	.word	0x20000008

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b094      	sub	sp, #80	; 0x50
 8002f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f60:	2300      	movs	r3, #0
 8002f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f64:	2300      	movs	r3, #0
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6c:	4b79      	ldr	r3, [pc, #484]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d00d      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	f200 80e1 	bhi.w	8003140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x34>
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f86:	e0db      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b73      	ldr	r3, [pc, #460]	; (8003158 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f8c:	e0db      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8e:	4b73      	ldr	r3, [pc, #460]	; (800315c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f92:	e0d8      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fc6:	4622      	mov	r2, r4
 8002fc8:	462b      	mov	r3, r5
 8002fca:	f04f 0000 	mov.w	r0, #0
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	0159      	lsls	r1, r3, #5
 8002fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd8:	0150      	lsls	r0, r2, #5
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4621      	mov	r1, r4
 8002fe0:	1a51      	subs	r1, r2, r1
 8002fe2:	6139      	str	r1, [r7, #16]
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	018b      	lsls	r3, r1, #6
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003002:	4651      	mov	r1, sl
 8003004:	018a      	lsls	r2, r1, #6
 8003006:	4651      	mov	r1, sl
 8003008:	ebb2 0801 	subs.w	r8, r2, r1
 800300c:	4659      	mov	r1, fp
 800300e:	eb63 0901 	sbc.w	r9, r3, r1
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800301e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003026:	4690      	mov	r8, r2
 8003028:	4699      	mov	r9, r3
 800302a:	4623      	mov	r3, r4
 800302c:	eb18 0303 	adds.w	r3, r8, r3
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	462b      	mov	r3, r5
 8003034:	eb49 0303 	adc.w	r3, r9, r3
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003046:	4629      	mov	r1, r5
 8003048:	024b      	lsls	r3, r1, #9
 800304a:	4621      	mov	r1, r4
 800304c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003050:	4621      	mov	r1, r4
 8003052:	024a      	lsls	r2, r1, #9
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
 800305e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003064:	f7fd f8b6 	bl	80001d4 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003070:	e058      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	2200      	movs	r2, #0
 800307a:	4618      	mov	r0, r3
 800307c:	4611      	mov	r1, r2
 800307e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
 8003088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800308c:	4642      	mov	r2, r8
 800308e:	464b      	mov	r3, r9
 8003090:	f04f 0000 	mov.w	r0, #0
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	0159      	lsls	r1, r3, #5
 800309a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309e:	0150      	lsls	r0, r2, #5
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4641      	mov	r1, r8
 80030a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030aa:	4649      	mov	r1, r9
 80030ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030c4:	ebb2 040a 	subs.w	r4, r2, sl
 80030c8:	eb63 050b 	sbc.w	r5, r3, fp
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	00eb      	lsls	r3, r5, #3
 80030d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030da:	00e2      	lsls	r2, r4, #3
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	4643      	mov	r3, r8
 80030e2:	18e3      	adds	r3, r4, r3
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	464b      	mov	r3, r9
 80030e8:	eb45 0303 	adc.w	r3, r5, r3
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030fa:	4629      	mov	r1, r5
 80030fc:	028b      	lsls	r3, r1, #10
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003104:	4621      	mov	r1, r4
 8003106:	028a      	lsls	r2, r1, #10
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310e:	2200      	movs	r2, #0
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	61fa      	str	r2, [r7, #28]
 8003114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003118:	f7fd f85c 	bl	80001d4 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetSysClockFreq+0x204>)
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003148:	4618      	mov	r0, r3
 800314a:	3750      	adds	r7, #80	; 0x50
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	00f42400 	.word	0x00f42400
 800315c:	007a1200 	.word	0x007a1200

08003160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_GetHCLKFreq+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000004 	.word	0x20000004

08003178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800317c:	f7ff fff0 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0a9b      	lsrs	r3, r3, #10
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	; (800319c <HAL_RCC_GetPCLK1Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	080053cc 	.word	0x080053cc

080031a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031a4:	f7ff ffdc 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0b5b      	lsrs	r3, r3, #13
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40023800 	.word	0x40023800
 80031c4:	080053cc 	.word	0x080053cc

080031c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e041      	b.n	800325e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe fdfc 	bl	8001dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 fcae 	bl	8003b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e03c      	b.n	80032fa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <HAL_TIM_Base_Start+0xa0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d018      	beq.n	80032c4 <HAL_TIM_Base_Start+0x5c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329a:	d013      	beq.n	80032c4 <HAL_TIM_Base_Start+0x5c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_TIM_Base_Start+0xa4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00e      	beq.n	80032c4 <HAL_TIM_Base_Start+0x5c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_TIM_Base_Start+0xa8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d009      	beq.n	80032c4 <HAL_TIM_Base_Start+0x5c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_TIM_Base_Start+0xac>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_TIM_Base_Start+0x5c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a16      	ldr	r2, [pc, #88]	; (8003318 <HAL_TIM_Base_Start+0xb0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d111      	bne.n	80032e8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d010      	beq.n	80032f8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e6:	e007      	b.n	80032f8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40014000 	.word	0x40014000

0800331c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d001      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e044      	b.n	80033be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1e      	ldr	r2, [pc, #120]	; (80033cc <HAL_TIM_Base_Start_IT+0xb0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d018      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x6c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335e:	d013      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x6c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00e      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x6c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x6c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a17      	ldr	r2, [pc, #92]	; (80033d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x6c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a16      	ldr	r2, [pc, #88]	; (80033dc <HAL_TIM_Base_Start_IT+0xc0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d111      	bne.n	80033ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b06      	cmp	r3, #6
 8003398:	d010      	beq.n	80033bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033aa:	e007      	b.n	80033bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40010000 	.word	0x40010000
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800
 80033d8:	40000c00 	.word	0x40000c00
 80033dc:	40014000 	.word	0x40014000

080033e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e041      	b.n	8003476 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f839 	bl	800347e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 fba2 	bl	8003b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_TIM_PWM_Start+0x24>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e022      	b.n	80034fe <HAL_TIM_PWM_Start+0x6a>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d109      	bne.n	80034d2 <HAL_TIM_PWM_Start+0x3e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e015      	b.n	80034fe <HAL_TIM_PWM_Start+0x6a>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d109      	bne.n	80034ec <HAL_TIM_PWM_Start+0x58>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e008      	b.n	80034fe <HAL_TIM_PWM_Start+0x6a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e068      	b.n	80035d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <HAL_TIM_PWM_Start+0x82>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003514:	e013      	b.n	800353e <HAL_TIM_PWM_Start+0xaa>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Start+0x92>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003524:	e00b      	b.n	800353e <HAL_TIM_PWM_Start+0xaa>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start+0xa2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003534:	e003      	b.n	800353e <HAL_TIM_PWM_Start+0xaa>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2201      	movs	r2, #1
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fdb4 	bl	80040b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a23      	ldr	r2, [pc, #140]	; (80035e0 <HAL_TIM_PWM_Start+0x14c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d107      	bne.n	8003566 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <HAL_TIM_PWM_Start+0x14c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x10e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003578:	d013      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x10e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a19      	ldr	r2, [pc, #100]	; (80035e4 <HAL_TIM_PWM_Start+0x150>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x10e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <HAL_TIM_PWM_Start+0x154>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x10e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a16      	ldr	r2, [pc, #88]	; (80035ec <HAL_TIM_PWM_Start+0x158>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x10e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <HAL_TIM_PWM_Start+0x15c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d111      	bne.n	80035c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b06      	cmp	r3, #6
 80035b2:	d010      	beq.n	80035d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	e007      	b.n	80035d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40014000 	.word	0x40014000

080035f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d122      	bne.n	8003650 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b02      	cmp	r3, #2
 8003616:	d11b      	bne.n	8003650 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0202 	mvn.w	r2, #2
 8003620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa77 	bl	8003b2a <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa69 	bl	8003b16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fa7a 	bl	8003b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d122      	bne.n	80036a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11b      	bne.n	80036a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0204 	mvn.w	r2, #4
 8003674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa4d 	bl	8003b2a <HAL_TIM_IC_CaptureCallback>
 8003690:	e005      	b.n	800369e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa3f 	bl	8003b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fa50 	bl	8003b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d122      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d11b      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0208 	mvn.w	r2, #8
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2204      	movs	r2, #4
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fa23 	bl	8003b2a <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa15 	bl	8003b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fa26 	bl	8003b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b10      	cmp	r3, #16
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b10      	cmp	r3, #16
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0210 	mvn.w	r2, #16
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2208      	movs	r2, #8
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9f9 	bl	8003b2a <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f9eb 	bl	8003b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f9fc 	bl	8003b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0201 	mvn.w	r2, #1
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fc fed0 	bl	8000518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d10e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fd26 	bl	80041f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	2b40      	cmp	r3, #64	; 0x40
 80037b0:	d10e      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d107      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f9c1 	bl	8003b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d10e      	bne.n	80037fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d107      	bne.n	80037fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0220 	mvn.w	r2, #32
 80037f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fcf0 	bl	80041dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800381e:	2302      	movs	r3, #2
 8003820:	e0ae      	b.n	8003980 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	f200 809f 	bhi.w	8003970 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003832:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	0800386d 	.word	0x0800386d
 800383c:	08003971 	.word	0x08003971
 8003840:	08003971 	.word	0x08003971
 8003844:	08003971 	.word	0x08003971
 8003848:	080038ad 	.word	0x080038ad
 800384c:	08003971 	.word	0x08003971
 8003850:	08003971 	.word	0x08003971
 8003854:	08003971 	.word	0x08003971
 8003858:	080038ef 	.word	0x080038ef
 800385c:	08003971 	.word	0x08003971
 8003860:	08003971 	.word	0x08003971
 8003864:	08003971 	.word	0x08003971
 8003868:	0800392f 	.word	0x0800392f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f9f8 	bl	8003c68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0208 	orr.w	r2, r2, #8
 8003886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0204 	bic.w	r2, r2, #4
 8003896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6999      	ldr	r1, [r3, #24]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	619a      	str	r2, [r3, #24]
      break;
 80038aa:	e064      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fa3e 	bl	8003d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6999      	ldr	r1, [r3, #24]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	021a      	lsls	r2, r3, #8
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	619a      	str	r2, [r3, #24]
      break;
 80038ec:	e043      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fa89 	bl	8003e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0208 	orr.w	r2, r2, #8
 8003908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0204 	bic.w	r2, r2, #4
 8003918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69d9      	ldr	r1, [r3, #28]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	61da      	str	r2, [r3, #28]
      break;
 800392c:	e023      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fad3 	bl	8003ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69d9      	ldr	r1, [r3, #28]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	021a      	lsls	r2, r3, #8
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	61da      	str	r2, [r3, #28]
      break;
 800396e:	e002      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	75fb      	strb	r3, [r7, #23]
      break;
 8003974:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800397e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_TIM_ConfigClockSource+0x1c>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e0b4      	b.n	8003b0e <HAL_TIM_ConfigClockSource+0x186>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039dc:	d03e      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0xd4>
 80039de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e2:	f200 8087 	bhi.w	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ea:	f000 8086 	beq.w	8003afa <HAL_TIM_ConfigClockSource+0x172>
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d87f      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b70      	cmp	r3, #112	; 0x70
 80039f6:	d01a      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0xa6>
 80039f8:	2b70      	cmp	r3, #112	; 0x70
 80039fa:	d87b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b60      	cmp	r3, #96	; 0x60
 80039fe:	d050      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a00:	2b60      	cmp	r3, #96	; 0x60
 8003a02:	d877      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a04:	2b50      	cmp	r3, #80	; 0x50
 8003a06:	d03c      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0xfa>
 8003a08:	2b50      	cmp	r3, #80	; 0x50
 8003a0a:	d873      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d058      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d86f      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b30      	cmp	r3, #48	; 0x30
 8003a16:	d064      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a18:	2b30      	cmp	r3, #48	; 0x30
 8003a1a:	d86b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d060      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d867      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05c      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d05a      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a2c:	e062      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6899      	ldr	r1, [r3, #8]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f000 fb19 	bl	8004074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	609a      	str	r2, [r3, #8]
      break;
 8003a5a:	e04f      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6899      	ldr	r1, [r3, #8]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f000 fb02 	bl	8004074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7e:	609a      	str	r2, [r3, #8]
      break;
 8003a80:	e03c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 fa76 	bl	8003f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2150      	movs	r1, #80	; 0x50
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 facf 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e02c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 fa95 	bl	8003fde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2160      	movs	r1, #96	; 0x60
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fabf 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e01c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 fa56 	bl	8003f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2140      	movs	r1, #64	; 0x40
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 faaf 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e00c      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f000 faa6 	bl	800403e <TIM_ITRx_SetConfig>
      break;
 8003af2:	e003      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      break;
 8003af8:	e000      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <TIM_Base_SetConfig+0xe4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00f      	beq.n	8003ba0 <TIM_Base_SetConfig+0x38>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b86:	d00b      	beq.n	8003ba0 <TIM_Base_SetConfig+0x38>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a31      	ldr	r2, [pc, #196]	; (8003c50 <TIM_Base_SetConfig+0xe8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_Base_SetConfig+0x38>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a30      	ldr	r2, [pc, #192]	; (8003c54 <TIM_Base_SetConfig+0xec>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_Base_SetConfig+0x38>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <TIM_Base_SetConfig+0xf0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d108      	bne.n	8003bb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <TIM_Base_SetConfig+0xe4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01b      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d017      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <TIM_Base_SetConfig+0xe8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a21      	ldr	r2, [pc, #132]	; (8003c54 <TIM_Base_SetConfig+0xec>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00f      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	; (8003c58 <TIM_Base_SetConfig+0xf0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <TIM_Base_SetConfig+0xf4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <TIM_Base_SetConfig+0xf8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_Base_SetConfig+0x8a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <TIM_Base_SetConfig+0xfc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d108      	bne.n	8003c04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <TIM_Base_SetConfig+0xe4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d103      	bne.n	8003c38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	615a      	str	r2, [r3, #20]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800
 8003c58:	40000c00 	.word	0x40000c00
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40014400 	.word	0x40014400
 8003c64:	40014800 	.word	0x40014800

08003c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0303 	bic.w	r3, r3, #3
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f023 0302 	bic.w	r3, r3, #2
 8003cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <TIM_OC1_SetConfig+0xc8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10c      	bne.n	8003cde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0308 	bic.w	r3, r3, #8
 8003cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <TIM_OC1_SetConfig+0xc8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d111      	bne.n	8003d0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	621a      	str	r2, [r3, #32]
}
 8003d24:	bf00      	nop
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40010000 	.word	0x40010000

08003d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0210 	bic.w	r2, r3, #16
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0320 	bic.w	r3, r3, #32
 8003d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <TIM_OC2_SetConfig+0xd4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d10d      	bne.n	8003db0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <TIM_OC2_SetConfig+0xd4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d113      	bne.n	8003de0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000

08003e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <TIM_OC3_SetConfig+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10d      	bne.n	8003e86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <TIM_OC3_SetConfig+0xd0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d113      	bne.n	8003eb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40010000 	.word	0x40010000

08003ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	031b      	lsls	r3, r3, #12
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <TIM_OC4_SetConfig+0x9c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d109      	bne.n	8003f54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40010000 	.word	0x40010000

08003f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f023 0201 	bic.w	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 030a 	bic.w	r3, r3, #10
 8003fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f023 0210 	bic.w	r2, r3, #16
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004008:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	031b      	lsls	r3, r3, #12
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800401a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	f043 0307 	orr.w	r3, r3, #7
 8004060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	609a      	str	r2, [r3, #8]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	021a      	lsls	r2, r3, #8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	431a      	orrs	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	2201      	movs	r2, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1a      	ldr	r2, [r3, #32]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	43db      	mvns	r3, r3
 80040d6:	401a      	ands	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004114:	2302      	movs	r3, #2
 8004116:	e050      	b.n	80041ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d018      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d013      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00e      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d009      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a13      	ldr	r2, [pc, #76]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d10c      	bne.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4313      	orrs	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40000c00 	.word	0x40000c00
 80041d8:	40014000 	.word	0x40014000

080041dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e03f      	b.n	8004296 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fd fe5e 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2224      	movs	r2, #36	; 0x24
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fcdf 	bl	8004c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800425c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695a      	ldr	r2, [r3, #20]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800426c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800427c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	4613      	mov	r3, r2
 80042aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d11d      	bne.n	80042f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_UART_Receive_IT+0x26>
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e016      	b.n	80042f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Receive_IT+0x38>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e00f      	b.n	80042f6 <HAL_UART_Receive_IT+0x58>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	461a      	mov	r2, r3
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fab6 	bl	800485c <UART_Start_Receive_IT>
 80042f0:	4603      	mov	r3, r0
 80042f2:	e000      	b.n	80042f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
  }
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b0ba      	sub	sp, #232	; 0xe8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800433e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_UART_IRQHandler+0x66>
 8004352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fb99 	bl	8004a96 <UART_Receive_IT>
      return;
 8004364:	e256      	b.n	8004814 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 80de 	beq.w	800452c <HAL_UART_IRQHandler+0x22c>
 8004370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800437c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004380:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80d1 	beq.w	800452c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_UART_IRQHandler+0xae>
 8004396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_UART_IRQHandler+0xd2>
 80043ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f043 0202 	orr.w	r2, r3, #2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_UART_IRQHandler+0xf6>
 80043de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f043 0204 	orr.w	r2, r3, #4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d011      	beq.n	8004426 <HAL_UART_IRQHandler+0x126>
 8004402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800440e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0208 	orr.w	r2, r3, #8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 81ed 	beq.w	800480a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_UART_IRQHandler+0x14e>
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fb24 	bl	8004a96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <HAL_UART_IRQHandler+0x17a>
 8004472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004476:	2b00      	cmp	r3, #0
 8004478:	d04f      	beq.n	800451a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fa2c 	bl	80048d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d141      	bne.n	8004512 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3314      	adds	r3, #20
 8004494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3314      	adds	r3, #20
 80044b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1d9      	bne.n	800448e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d013      	beq.n	800450a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	4a7d      	ldr	r2, [pc, #500]	; (80046dc <HAL_UART_IRQHandler+0x3dc>)
 80044e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fd fff7 	bl	80024e2 <HAL_DMA_Abort_IT>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004504:	4610      	mov	r0, r2
 8004506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e00e      	b.n	8004528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f990 	bl	8004830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	e00a      	b.n	8004528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f98c 	bl	8004830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	e006      	b.n	8004528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f988 	bl	8004830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004526:	e170      	b.n	800480a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	bf00      	nop
    return;
 800452a:	e16e      	b.n	800480a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 814a 	bne.w	80047ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8143 	beq.w	80047ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 813c 	beq.w	80047ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	f040 80b4 	bne.w	80046e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004584:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8140 	beq.w	800480e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004596:	429a      	cmp	r2, r3
 8004598:	f080 8139 	bcs.w	800480e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ae:	f000 8088 	beq.w	80046c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1d9      	bne.n	80045b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3314      	adds	r3, #20
 8004604:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800460e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004622:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004626:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800462a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e1      	bne.n	80045fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3314      	adds	r3, #20
 8004640:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800464a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800464c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3314      	adds	r3, #20
 800465a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800465e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004660:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004664:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800466c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e3      	bne.n	800463a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	330c      	adds	r3, #12
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004692:	f023 0310 	bic.w	r3, r3, #16
 8004696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80046a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e3      	bne.n	8004680 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fd fea0 	bl	8002402 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f8b6 	bl	8004844 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046d8:	e099      	b.n	800480e <HAL_UART_IRQHandler+0x50e>
 80046da:	bf00      	nop
 80046dc:	0800499f 	.word	0x0800499f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 808b 	beq.w	8004812 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8086 	beq.w	8004812 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800471c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800472a:	647a      	str	r2, [r7, #68]	; 0x44
 800472c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e3      	bne.n	8004706 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	623b      	str	r3, [r7, #32]
   return(result);
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004762:	633a      	str	r2, [r7, #48]	; 0x30
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e3      	bne.n	800473e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	60fb      	str	r3, [r7, #12]
   return(result);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0310 	bic.w	r3, r3, #16
 800479a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047a8:	61fa      	str	r2, [r7, #28]
 80047aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	69b9      	ldr	r1, [r7, #24]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	617b      	str	r3, [r7, #20]
   return(result);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e3      	bne.n	8004784 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f83e 	bl	8004844 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047c8:	e023      	b.n	8004812 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_UART_IRQHandler+0x4ea>
 80047d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8ef 	bl	80049c6 <UART_Transmit_IT>
    return;
 80047e8:	e014      	b.n	8004814 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00e      	beq.n	8004814 <HAL_UART_IRQHandler+0x514>
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f92f 	bl	8004a66 <UART_EndTransmit_IT>
    return;
 8004808:	e004      	b.n	8004814 <HAL_UART_IRQHandler+0x514>
    return;
 800480a:	bf00      	nop
 800480c:	e002      	b.n	8004814 <HAL_UART_IRQHandler+0x514>
      return;
 800480e:	bf00      	nop
 8004810:	e000      	b.n	8004814 <HAL_UART_IRQHandler+0x514>
      return;
 8004812:	bf00      	nop
  }
}
 8004814:	37e8      	adds	r7, #232	; 0xe8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop

0800481c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	88fa      	ldrh	r2, [r7, #6]
 8004874:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	88fa      	ldrh	r2, [r7, #6]
 800487a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2222      	movs	r2, #34	; 0x22
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0220 	orr.w	r2, r2, #32
 80048c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d8:	b480      	push	{r7}
 80048da:	b095      	sub	sp, #84	; 0x54
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004900:	643a      	str	r2, [r7, #64]	; 0x40
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e5      	bne.n	80048e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3314      	adds	r3, #20
 800491a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	61fb      	str	r3, [r7, #28]
   return(result);
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3314      	adds	r3, #20
 8004932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004934:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800493a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e5      	bne.n	8004914 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	2b01      	cmp	r3, #1
 800494e:	d119      	bne.n	8004984 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f023 0310 	bic.w	r3, r3, #16
 8004966:	647b      	str	r3, [r7, #68]	; 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004970:	61ba      	str	r2, [r7, #24]
 8004972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6979      	ldr	r1, [r7, #20]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	613b      	str	r3, [r7, #16]
   return(result);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e5      	bne.n	8004950 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004992:	bf00      	nop
 8004994:	3754      	adds	r7, #84	; 0x54
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff ff39 	bl	8004830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b21      	cmp	r3, #33	; 0x21
 80049d8:	d13e      	bne.n	8004a58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d114      	bne.n	8004a0e <UART_Transmit_IT+0x48>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d110      	bne.n	8004a0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	1c9a      	adds	r2, r3, #2
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]
 8004a0c:	e008      	b.n	8004a20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6211      	str	r1, [r2, #32]
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10f      	bne.n	8004a54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e000      	b.n	8004a5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fec8 	bl	800481c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b08c      	sub	sp, #48	; 0x30
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b22      	cmp	r3, #34	; 0x22
 8004aa8:	f040 80ab 	bne.w	8004c02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab4:	d117      	bne.n	8004ae6 <UART_Receive_IT+0x50>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d113      	bne.n	8004ae6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	1c9a      	adds	r2, r3, #2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ae4:	e026      	b.n	8004b34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af8:	d007      	beq.n	8004b0a <UART_Receive_IT+0x74>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <UART_Receive_IT+0x82>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e008      	b.n	8004b2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4619      	mov	r1, r3
 8004b42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d15a      	bne.n	8004bfe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0220 	bic.w	r2, r2, #32
 8004b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d135      	bne.n	8004bf4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f023 0310 	bic.w	r3, r3, #16
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	623a      	str	r2, [r7, #32]
 8004bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	69f9      	ldr	r1, [r7, #28]
 8004bb4:	6a3a      	ldr	r2, [r7, #32]
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e5      	bne.n	8004b8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d10a      	bne.n	8004be6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff fe29 	bl	8004844 <HAL_UARTEx_RxEventCallback>
 8004bf2:	e002      	b.n	8004bfa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fb fc6f 	bl	80004d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e002      	b.n	8004c04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3730      	adds	r7, #48	; 0x30
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c10:	b0c0      	sub	sp, #256	; 0x100
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	68d9      	ldr	r1, [r3, #12]
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	ea40 0301 	orr.w	r3, r0, r1
 8004c34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c64:	f021 010c 	bic.w	r1, r1, #12
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c72:	430b      	orrs	r3, r1
 8004c74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	6999      	ldr	r1, [r3, #24]
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	ea40 0301 	orr.w	r3, r0, r1
 8004c92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4b8f      	ldr	r3, [pc, #572]	; (8004ed8 <UART_SetConfig+0x2cc>)
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d005      	beq.n	8004cac <UART_SetConfig+0xa0>
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b8d      	ldr	r3, [pc, #564]	; (8004edc <UART_SetConfig+0x2d0>)
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d104      	bne.n	8004cb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cac:	f7fe fa78 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 8004cb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cb4:	e003      	b.n	8004cbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cb6:	f7fe fa5f 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 8004cba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc8:	f040 810c 	bne.w	8004ee4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cde:	4622      	mov	r2, r4
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	1891      	adds	r1, r2, r2
 8004ce4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ce6:	415b      	adcs	r3, r3
 8004ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cee:	4621      	mov	r1, r4
 8004cf0:	eb12 0801 	adds.w	r8, r2, r1
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	eb43 0901 	adc.w	r9, r3, r1
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d0e:	4690      	mov	r8, r2
 8004d10:	4699      	mov	r9, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	eb18 0303 	adds.w	r3, r8, r3
 8004d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	eb49 0303 	adc.w	r3, r9, r3
 8004d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	18db      	adds	r3, r3, r3
 8004d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d40:	4613      	mov	r3, r2
 8004d42:	eb42 0303 	adc.w	r3, r2, r3
 8004d46:	657b      	str	r3, [r7, #84]	; 0x54
 8004d48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d50:	f7fb fa40 	bl	80001d4 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4b61      	ldr	r3, [pc, #388]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	011c      	lsls	r4, r3, #4
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d84:	4641      	mov	r1, r8
 8004d86:	eb12 0a01 	adds.w	sl, r2, r1
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004da4:	4692      	mov	sl, r2
 8004da6:	469b      	mov	fp, r3
 8004da8:	4643      	mov	r3, r8
 8004daa:	eb1a 0303 	adds.w	r3, sl, r3
 8004dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004db2:	464b      	mov	r3, r9
 8004db4:	eb4b 0303 	adc.w	r3, fp, r3
 8004db8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	18db      	adds	r3, r3, r3
 8004dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	eb42 0303 	adc.w	r3, r2, r3
 8004ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004de2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004de6:	f7fb f9f5 	bl	80001d4 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	4b3b      	ldr	r3, [pc, #236]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004df2:	fba3 2301 	umull	r2, r3, r3, r1
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	2264      	movs	r2, #100	; 0x64
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	1acb      	subs	r3, r1, r3
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e06:	4b36      	ldr	r3, [pc, #216]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004e08:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e14:	441c      	add	r4, r3
 8004e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e28:	4642      	mov	r2, r8
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	1891      	adds	r1, r2, r2
 8004e2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e30:	415b      	adcs	r3, r3
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e38:	4641      	mov	r1, r8
 8004e3a:	1851      	adds	r1, r2, r1
 8004e3c:	6339      	str	r1, [r7, #48]	; 0x30
 8004e3e:	4649      	mov	r1, r9
 8004e40:	414b      	adcs	r3, r1
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e50:	4659      	mov	r1, fp
 8004e52:	00cb      	lsls	r3, r1, #3
 8004e54:	4651      	mov	r1, sl
 8004e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	00ca      	lsls	r2, r1, #3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	4642      	mov	r2, r8
 8004e66:	189b      	adds	r3, r3, r2
 8004e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	460a      	mov	r2, r1
 8004e70:	eb42 0303 	adc.w	r3, r2, r3
 8004e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	18db      	adds	r3, r3, r3
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e92:	4613      	mov	r3, r2
 8004e94:	eb42 0303 	adc.w	r3, r2, r3
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ea2:	f7fb f997 	bl	80001d4 <__aeabi_uldivmod>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004eac:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	2164      	movs	r1, #100	; 0x64
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	3332      	adds	r3, #50	; 0x32
 8004ebe:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <UART_SetConfig+0x2d4>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f003 0207 	and.w	r2, r3, #7
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4422      	add	r2, r4
 8004ed2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ed4:	e105      	b.n	80050e2 <UART_SetConfig+0x4d6>
 8004ed6:	bf00      	nop
 8004ed8:	40011000 	.word	0x40011000
 8004edc:	40011400 	.word	0x40011400
 8004ee0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ef2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	464b      	mov	r3, r9
 8004efa:	1891      	adds	r1, r2, r2
 8004efc:	6239      	str	r1, [r7, #32]
 8004efe:	415b      	adcs	r3, r3
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
 8004f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f06:	4641      	mov	r1, r8
 8004f08:	1854      	adds	r4, r2, r1
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	eb43 0501 	adc.w	r5, r3, r1
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	00eb      	lsls	r3, r5, #3
 8004f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f1e:	00e2      	lsls	r2, r4, #3
 8004f20:	4614      	mov	r4, r2
 8004f22:	461d      	mov	r5, r3
 8004f24:	4643      	mov	r3, r8
 8004f26:	18e3      	adds	r3, r4, r3
 8004f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	eb45 0303 	adc.w	r3, r5, r3
 8004f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f52:	4629      	mov	r1, r5
 8004f54:	008b      	lsls	r3, r1, #2
 8004f56:	4621      	mov	r1, r4
 8004f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	008a      	lsls	r2, r1, #2
 8004f60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f64:	f7fb f936 	bl	80001d4 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <UART_SetConfig+0x4e4>)
 8004f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	011c      	lsls	r4, r3, #4
 8004f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	1891      	adds	r1, r2, r2
 8004f8e:	61b9      	str	r1, [r7, #24]
 8004f90:	415b      	adcs	r3, r3
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f98:	4641      	mov	r1, r8
 8004f9a:	1851      	adds	r1, r2, r1
 8004f9c:	6139      	str	r1, [r7, #16]
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	414b      	adcs	r3, r1
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	00cb      	lsls	r3, r1, #3
 8004fb4:	4651      	mov	r1, sl
 8004fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fba:	4651      	mov	r1, sl
 8004fbc:	00ca      	lsls	r2, r1, #3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	189b      	adds	r3, r3, r2
 8004fc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fcc:	464b      	mov	r3, r9
 8004fce:	460a      	mov	r2, r1
 8004fd0:	eb42 0303 	adc.w	r3, r2, r3
 8004fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fe2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ff0:	4649      	mov	r1, r9
 8004ff2:	008b      	lsls	r3, r1, #2
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	008a      	lsls	r2, r1, #2
 8004ffe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005002:	f7fb f8e7 	bl	80001d4 <__aeabi_uldivmod>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <UART_SetConfig+0x4e4>)
 800500c:	fba3 1302 	umull	r1, r3, r3, r2
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	2164      	movs	r1, #100	; 0x64
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	3332      	adds	r3, #50	; 0x32
 800501e:	4a34      	ldr	r2, [pc, #208]	; (80050f0 <UART_SetConfig+0x4e4>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800502a:	441c      	add	r4, r3
 800502c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005030:	2200      	movs	r2, #0
 8005032:	673b      	str	r3, [r7, #112]	; 0x70
 8005034:	677a      	str	r2, [r7, #116]	; 0x74
 8005036:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800503a:	4642      	mov	r2, r8
 800503c:	464b      	mov	r3, r9
 800503e:	1891      	adds	r1, r2, r2
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	415b      	adcs	r3, r3
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800504a:	4641      	mov	r1, r8
 800504c:	1851      	adds	r1, r2, r1
 800504e:	6039      	str	r1, [r7, #0]
 8005050:	4649      	mov	r1, r9
 8005052:	414b      	adcs	r3, r1
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005062:	4659      	mov	r1, fp
 8005064:	00cb      	lsls	r3, r1, #3
 8005066:	4651      	mov	r1, sl
 8005068:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506c:	4651      	mov	r1, sl
 800506e:	00ca      	lsls	r2, r1, #3
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	4603      	mov	r3, r0
 8005076:	4642      	mov	r2, r8
 8005078:	189b      	adds	r3, r3, r2
 800507a:	66bb      	str	r3, [r7, #104]	; 0x68
 800507c:	464b      	mov	r3, r9
 800507e:	460a      	mov	r2, r1
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	663b      	str	r3, [r7, #96]	; 0x60
 8005090:	667a      	str	r2, [r7, #100]	; 0x64
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800509e:	4649      	mov	r1, r9
 80050a0:	008b      	lsls	r3, r1, #2
 80050a2:	4641      	mov	r1, r8
 80050a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a8:	4641      	mov	r1, r8
 80050aa:	008a      	lsls	r2, r1, #2
 80050ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050b0:	f7fb f890 	bl	80001d4 <__aeabi_uldivmod>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <UART_SetConfig+0x4e4>)
 80050ba:	fba3 1302 	umull	r1, r3, r3, r2
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2164      	movs	r1, #100	; 0x64
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	3332      	adds	r3, #50	; 0x32
 80050cc:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <UART_SetConfig+0x4e4>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f003 020f 	and.w	r2, r3, #15
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4422      	add	r2, r4
 80050e0:	609a      	str	r2, [r3, #8]
}
 80050e2:	bf00      	nop
 80050e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050e8:	46bd      	mov	sp, r7
 80050ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ee:	bf00      	nop
 80050f0:	51eb851f 	.word	0x51eb851f

080050f4 <__libc_init_array>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	4d0d      	ldr	r5, [pc, #52]	; (800512c <__libc_init_array+0x38>)
 80050f8:	4c0d      	ldr	r4, [pc, #52]	; (8005130 <__libc_init_array+0x3c>)
 80050fa:	1b64      	subs	r4, r4, r5
 80050fc:	10a4      	asrs	r4, r4, #2
 80050fe:	2600      	movs	r6, #0
 8005100:	42a6      	cmp	r6, r4
 8005102:	d109      	bne.n	8005118 <__libc_init_array+0x24>
 8005104:	4d0b      	ldr	r5, [pc, #44]	; (8005134 <__libc_init_array+0x40>)
 8005106:	4c0c      	ldr	r4, [pc, #48]	; (8005138 <__libc_init_array+0x44>)
 8005108:	f000 f82e 	bl	8005168 <_init>
 800510c:	1b64      	subs	r4, r4, r5
 800510e:	10a4      	asrs	r4, r4, #2
 8005110:	2600      	movs	r6, #0
 8005112:	42a6      	cmp	r6, r4
 8005114:	d105      	bne.n	8005122 <__libc_init_array+0x2e>
 8005116:	bd70      	pop	{r4, r5, r6, pc}
 8005118:	f855 3b04 	ldr.w	r3, [r5], #4
 800511c:	4798      	blx	r3
 800511e:	3601      	adds	r6, #1
 8005120:	e7ee      	b.n	8005100 <__libc_init_array+0xc>
 8005122:	f855 3b04 	ldr.w	r3, [r5], #4
 8005126:	4798      	blx	r3
 8005128:	3601      	adds	r6, #1
 800512a:	e7f2      	b.n	8005112 <__libc_init_array+0x1e>
 800512c:	080053dc 	.word	0x080053dc
 8005130:	080053dc 	.word	0x080053dc
 8005134:	080053dc 	.word	0x080053dc
 8005138:	080053e0 	.word	0x080053e0

0800513c <memcpy>:
 800513c:	440a      	add	r2, r1
 800513e:	4291      	cmp	r1, r2
 8005140:	f100 33ff 	add.w	r3, r0, #4294967295
 8005144:	d100      	bne.n	8005148 <memcpy+0xc>
 8005146:	4770      	bx	lr
 8005148:	b510      	push	{r4, lr}
 800514a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800514e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005152:	4291      	cmp	r1, r2
 8005154:	d1f9      	bne.n	800514a <memcpy+0xe>
 8005156:	bd10      	pop	{r4, pc}

08005158 <memset>:
 8005158:	4402      	add	r2, r0
 800515a:	4603      	mov	r3, r0
 800515c:	4293      	cmp	r3, r2
 800515e:	d100      	bne.n	8005162 <memset+0xa>
 8005160:	4770      	bx	lr
 8005162:	f803 1b01 	strb.w	r1, [r3], #1
 8005166:	e7f9      	b.n	800515c <memset+0x4>

08005168 <_init>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr

08005174 <_fini>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr
