
PROT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e8c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007238  08007238  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007238  08007238  00017238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007240  08007240  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  20000010  08007258  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  08007258  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108ba  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f1  00000000  00000000  000308fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  000329f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00033818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001748b  00000000  00000000  00034588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109d9  00000000  00000000  0004ba13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988e3  00000000  00000000  0005c3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4ccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c24  00000000  00000000  000f4d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007008 	.word	0x08007008

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08007008 	.word	0x08007008

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_UART_RxCpltCallback>:
void calibrarVal(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

	indRX_W++;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	3301      	adds	r3, #1
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004ec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t *) &buf_rx[indRX_W], 1);
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <HAL_UART_RxCpltCallback+0x34>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_UART_RxCpltCallback+0x38>)
 80004f8:	4413      	add	r3, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_UART_RxCpltCallback+0x3c>)
 8000500:	f005 fe1d 	bl	800613e <HAL_UART_Receive_IT>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200005fd 	.word	0x200005fd
 8000510:	200001ec 	.word	0x200001ec
 8000514:	20000164 	.word	0x20000164

08000518 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

	//indADC++;
	if(indADC==32){
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_ADC_ConvCpltCallback+0x24>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b20      	cmp	r3, #32
 8000528:	d102      	bne.n	8000530 <HAL_ADC_ConvCpltCallback+0x18>
		indADC=0;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_ADC_ConvCpltCallback+0x24>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
	}
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000601 	.word	0x20000601

08000540 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM4){//ENTRA CADA 10 MS
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d13c      	bne.n	80005cc <HAL_TIM_PeriodElapsedCallback+0x8c>
			indADC++;
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	3301      	adds	r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800055e:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADCData,8*32);
 8000560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000564:	491d      	ldr	r1, [pc, #116]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000566:	481e      	ldr	r0, [pc, #120]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000568:	f002 fe62 	bl	8003230 <HAL_ADC_Start_DMA>

			if(indADC==32){
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b20      	cmp	r3, #32
 8000574:	d102      	bne.n	800057c <HAL_TIM_PeriodElapsedCallback+0x3c>
					indADC=0;
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
				}

			time100ms--;
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	3b01      	subs	r3, #1
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000588:	701a      	strb	r2, [r3, #0]
			if(!time100ms){
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d107      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x64>
				time100ms=10;
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000596:	220a      	movs	r2, #10
 8000598:	701a      	strb	r2, [r3, #0]
				ON100MS = 1;
 800059a:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800059c:	7813      	ldrb	r3, [r2, #0]
 800059e:	f043 0302 	orr.w	r3, r3, #2
 80005a2:	7013      	strb	r3, [r2, #0]
			}
			time10ms--;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	3b01      	subs	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005b0:	701a      	strb	r2, [r3, #0]
			if(!time10ms){
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d107      	bne.n	80005cc <HAL_TIM_PeriodElapsedCallback+0x8c>
				time10ms=1;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
				ON10MS = 1;
 80005c2:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80005c4:	7813      	ldrb	r3, [r2, #0]
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	7013      	strb	r3, [r2, #0]
			}
		}
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40000800 	.word	0x40000800
 80005d8:	20000601 	.word	0x20000601
 80005dc:	200003ec 	.word	0x200003ec
 80005e0:	2000002c 	.word	0x2000002c
 80005e4:	200005fb 	.word	0x200005fb
 80005e8:	20000654 	.word	0x20000654
 80005ec:	200005fc 	.word	0x200005fc

080005f0 <uart>:

void uart(){
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

	if((huart1.Instance->SR & UART_FLAG_TXE)==UART_FLAG_TXE){
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <uart+0x40>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	2b80      	cmp	r3, #128	; 0x80
 8000600:	d110      	bne.n	8000624 <uart+0x34>
		huart1.Instance->DR=buf_tx[indTX_R];
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <uart+0x44>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <uart+0x48>)
 800060c:	5c9b      	ldrb	r3, [r3, r2]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <uart+0x40>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
		indTX_R++;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <uart+0x44>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	3301      	adds	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <uart+0x44>)
 8000622:	701a      	strb	r2, [r3, #0]
	}

}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000164 	.word	0x20000164
 8000634:	20000600 	.word	0x20000600
 8000638:	200002ec 	.word	0x200002ec

0800063c <initEsp>:

void initEsp(){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

	if(readyToSend){
 8000640:	4b73      	ldr	r3, [pc, #460]	; (8000810 <initEsp+0x1d4>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	f000 80dc 	beq.w	8000808 <initEsp+0x1cc>
		switch(AT){
 8000650:	4b70      	ldr	r3, [pc, #448]	; (8000814 <initEsp+0x1d8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b07      	cmp	r3, #7
 8000656:	f200 80d8 	bhi.w	800080a <initEsp+0x1ce>
 800065a:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <initEsp+0x24>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	08000681 	.word	0x08000681
 8000664:	080006b7 	.word	0x080006b7
 8000668:	080006ed 	.word	0x080006ed
 800066c:	08000723 	.word	0x08000723
 8000670:	08000759 	.word	0x08000759
 8000674:	0800078f 	.word	0x0800078f
 8000678:	080007c5 	.word	0x080007c5
 800067c:	080007fb 	.word	0x080007fb
			case 0:
				memcpy((uint8_t*)&buf_tx[indTX_W],AT_com,4);
 8000680:	4b65      	ldr	r3, [pc, #404]	; (8000818 <initEsp+0x1dc>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	4b64      	ldr	r3, [pc, #400]	; (800081c <initEsp+0x1e0>)
 800068a:	4413      	add	r3, r2
 800068c:	2204      	movs	r2, #4
 800068e:	4964      	ldr	r1, [pc, #400]	; (8000820 <initEsp+0x1e4>)
 8000690:	4618      	mov	r0, r3
 8000692:	f006 fca3 	bl	8006fdc <memcpy>
				indTX_W+=4;
 8000696:	4b60      	ldr	r3, [pc, #384]	; (8000818 <initEsp+0x1dc>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	3304      	adds	r3, #4
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b5d      	ldr	r3, [pc, #372]	; (8000818 <initEsp+0x1dc>)
 80006a2:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 80006a4:	4b5f      	ldr	r3, [pc, #380]	; (8000824 <initEsp+0x1e8>)
 80006a6:	220a      	movs	r2, #10
 80006a8:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 80006aa:	4a59      	ldr	r2, [pc, #356]	; (8000810 <initEsp+0x1d4>)
 80006ac:	7813      	ldrb	r3, [r2, #0]
 80006ae:	f36f 1304 	bfc	r3, #4, #1
 80006b2:	7013      	strb	r3, [r2, #0]
			break;
 80006b4:	e0a9      	b.n	800080a <initEsp+0x1ce>
			case 1:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWQAP,10);
 80006b6:	4b58      	ldr	r3, [pc, #352]	; (8000818 <initEsp+0x1dc>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	4b57      	ldr	r3, [pc, #348]	; (800081c <initEsp+0x1e0>)
 80006c0:	4413      	add	r3, r2
 80006c2:	220a      	movs	r2, #10
 80006c4:	4958      	ldr	r1, [pc, #352]	; (8000828 <initEsp+0x1ec>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 fc88 	bl	8006fdc <memcpy>
				indTX_W+=10;
 80006cc:	4b52      	ldr	r3, [pc, #328]	; (8000818 <initEsp+0x1dc>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	330a      	adds	r3, #10
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b50      	ldr	r3, [pc, #320]	; (8000818 <initEsp+0x1dc>)
 80006d8:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 80006da:	4b52      	ldr	r3, [pc, #328]	; (8000824 <initEsp+0x1e8>)
 80006dc:	220a      	movs	r2, #10
 80006de:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 80006e0:	4a4b      	ldr	r2, [pc, #300]	; (8000810 <initEsp+0x1d4>)
 80006e2:	7813      	ldrb	r3, [r2, #0]
 80006e4:	f36f 1304 	bfc	r3, #4, #1
 80006e8:	7013      	strb	r3, [r2, #0]
			break;
 80006ea:	e08e      	b.n	800080a <initEsp+0x1ce>
			case 2:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWMODE,13);
 80006ec:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <initEsp+0x1dc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b49      	ldr	r3, [pc, #292]	; (800081c <initEsp+0x1e0>)
 80006f6:	4413      	add	r3, r2
 80006f8:	220d      	movs	r2, #13
 80006fa:	494c      	ldr	r1, [pc, #304]	; (800082c <initEsp+0x1f0>)
 80006fc:	4618      	mov	r0, r3
 80006fe:	f006 fc6d 	bl	8006fdc <memcpy>
				indTX_W+=13;
 8000702:	4b45      	ldr	r3, [pc, #276]	; (8000818 <initEsp+0x1dc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	330d      	adds	r3, #13
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b42      	ldr	r3, [pc, #264]	; (8000818 <initEsp+0x1dc>)
 800070e:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 8000710:	4b44      	ldr	r3, [pc, #272]	; (8000824 <initEsp+0x1e8>)
 8000712:	220a      	movs	r2, #10
 8000714:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000716:	4a3e      	ldr	r2, [pc, #248]	; (8000810 <initEsp+0x1d4>)
 8000718:	7813      	ldrb	r3, [r2, #0]
 800071a:	f36f 1304 	bfc	r3, #4, #1
 800071e:	7013      	strb	r3, [r2, #0]
			break;
 8000720:	e073      	b.n	800080a <initEsp+0x1ce>
			case 3:
				memcpy((uint8_t*)&buf_tx[indTX_W],CWJAP_casa,36);
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <initEsp+0x1dc>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	4b3c      	ldr	r3, [pc, #240]	; (800081c <initEsp+0x1e0>)
 800072c:	4413      	add	r3, r2
 800072e:	2224      	movs	r2, #36	; 0x24
 8000730:	493f      	ldr	r1, [pc, #252]	; (8000830 <initEsp+0x1f4>)
 8000732:	4618      	mov	r0, r3
 8000734:	f006 fc52 	bl	8006fdc <memcpy>
				indTX_W+=36;
 8000738:	4b37      	ldr	r3, [pc, #220]	; (8000818 <initEsp+0x1dc>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	3324      	adds	r3, #36	; 0x24
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b35      	ldr	r3, [pc, #212]	; (8000818 <initEsp+0x1dc>)
 8000744:	701a      	strb	r2, [r3, #0]
				timeout2 = 50;
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <initEsp+0x1e8>)
 8000748:	2232      	movs	r2, #50	; 0x32
 800074a:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 800074c:	4a30      	ldr	r2, [pc, #192]	; (8000810 <initEsp+0x1d4>)
 800074e:	7813      	ldrb	r3, [r2, #0]
 8000750:	f36f 1304 	bfc	r3, #4, #1
 8000754:	7013      	strb	r3, [r2, #0]
			break;
 8000756:	e058      	b.n	800080a <initEsp+0x1ce>
			case 4:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIPMUX,13);
 8000758:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <initEsp+0x1dc>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	4b2e      	ldr	r3, [pc, #184]	; (800081c <initEsp+0x1e0>)
 8000762:	4413      	add	r3, r2
 8000764:	220d      	movs	r2, #13
 8000766:	4933      	ldr	r1, [pc, #204]	; (8000834 <initEsp+0x1f8>)
 8000768:	4618      	mov	r0, r3
 800076a:	f006 fc37 	bl	8006fdc <memcpy>
				indTX_W+=13;
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <initEsp+0x1dc>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	330d      	adds	r3, #13
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <initEsp+0x1dc>)
 800077a:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <initEsp+0x1e8>)
 800077e:	220a      	movs	r2, #10
 8000780:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 8000782:	4a23      	ldr	r2, [pc, #140]	; (8000810 <initEsp+0x1d4>)
 8000784:	7813      	ldrb	r3, [r2, #0]
 8000786:	f36f 1304 	bfc	r3, #4, #1
 800078a:	7013      	strb	r3, [r2, #0]
			break;
 800078c:	e03d      	b.n	800080a <initEsp+0x1ce>
			case 5:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIFSR,10);
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <initEsp+0x1dc>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	461a      	mov	r2, r3
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <initEsp+0x1e0>)
 8000798:	4413      	add	r3, r2
 800079a:	220a      	movs	r2, #10
 800079c:	4926      	ldr	r1, [pc, #152]	; (8000838 <initEsp+0x1fc>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 fc1c 	bl	8006fdc <memcpy>
				indTX_W+=10;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <initEsp+0x1dc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	330a      	adds	r3, #10
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <initEsp+0x1dc>)
 80007b0:	701a      	strb	r2, [r3, #0]
				timeout2 = 10;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <initEsp+0x1e8>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 80007b8:	4a15      	ldr	r2, [pc, #84]	; (8000810 <initEsp+0x1d4>)
 80007ba:	7813      	ldrb	r3, [r2, #0]
 80007bc:	f36f 1304 	bfc	r3, #4, #1
 80007c0:	7013      	strb	r3, [r2, #0]
			break;
 80007c2:	e022      	b.n	800080a <initEsp+0x1ce>
			case 6:
				memcpy((uint8_t*)&buf_tx[indTX_W],CIPSTART,46);
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <initEsp+0x1dc>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <initEsp+0x1e0>)
 80007ce:	4413      	add	r3, r2
 80007d0:	222e      	movs	r2, #46	; 0x2e
 80007d2:	491a      	ldr	r1, [pc, #104]	; (800083c <initEsp+0x200>)
 80007d4:	4618      	mov	r0, r3
 80007d6:	f006 fc01 	bl	8006fdc <memcpy>
				indTX_W+=46;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <initEsp+0x1dc>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	332e      	adds	r3, #46	; 0x2e
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <initEsp+0x1dc>)
 80007e6:	701a      	strb	r2, [r3, #0]
				timeout2 = 20;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <initEsp+0x1e8>)
 80007ea:	2214      	movs	r2, #20
 80007ec:	701a      	strb	r2, [r3, #0]
				readyToSend = 0;
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <initEsp+0x1d4>)
 80007f0:	7813      	ldrb	r3, [r2, #0]
 80007f2:	f36f 1304 	bfc	r3, #4, #1
 80007f6:	7013      	strb	r3, [r2, #0]
			break;
 80007f8:	e007      	b.n	800080a <initEsp+0x1ce>
			case 7:
				duty++;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <initEsp+0x204>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <initEsp+0x204>)
 8000804:	701a      	strb	r2, [r3, #0]
			break;
 8000806:	e000      	b.n	800080a <initEsp+0x1ce>
		}

	}
 8000808:	bf00      	nop

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000654 	.word	0x20000654
 8000814:	20000605 	.word	0x20000605
 8000818:	200005ff 	.word	0x200005ff
 800081c:	200002ec 	.word	0x200002ec
 8000820:	08007028 	.word	0x08007028
 8000824:	2000060a 	.word	0x2000060a
 8000828:	0800703c 	.word	0x0800703c
 800082c:	0800705c 	.word	0x0800705c
 8000830:	08007080 	.word	0x08007080
 8000834:	0800710c 	.word	0x0800710c
 8000838:	080070f0 	.word	0x080070f0
 800083c:	08007130 	.word	0x08007130
 8000840:	20000604 	.word	0x20000604

08000844 <recibirmensaje>:

void recibirmensaje(){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

	switch(AT){
 8000848:	4ba2      	ldr	r3, [pc, #648]	; (8000ad4 <recibirmensaje+0x290>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b08      	cmp	r3, #8
 800084e:	f200 861d 	bhi.w	800148c <recibirmensaje+0xc48>
 8000852:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <recibirmensaje+0x14>)
 8000854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000858:	0800087d 	.word	0x0800087d
 800085c:	080008f7 	.word	0x080008f7
 8000860:	0800096b 	.word	0x0800096b
 8000864:	080009e5 	.word	0x080009e5
 8000868:	08000a39 	.word	0x08000a39
 800086c:	08000ab3 	.word	0x08000ab3
 8000870:	08000c77 	.word	0x08000c77
 8000874:	08000d09 	.word	0x08000d09
 8000878:	08001203 	.word	0x08001203
		case 0:
			if(buf_rx[indRX_R]==AT_ans[coincidencias]){
 800087c:	4b96      	ldr	r3, [pc, #600]	; (8000ad8 <recibirmensaje+0x294>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	461a      	mov	r2, r3
 8000884:	4b95      	ldr	r3, [pc, #596]	; (8000adc <recibirmensaje+0x298>)
 8000886:	5c9b      	ldrb	r3, [r3, r2]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b95      	ldr	r3, [pc, #596]	; (8000ae0 <recibirmensaje+0x29c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4b94      	ldr	r3, [pc, #592]	; (8000ae4 <recibirmensaje+0x2a0>)
 8000892:	5c5b      	ldrb	r3, [r3, r1]
 8000894:	429a      	cmp	r2, r3
 8000896:	d11a      	bne.n	80008ce <recibirmensaje+0x8a>
				coincidencias++;
 8000898:	4b91      	ldr	r3, [pc, #580]	; (8000ae0 <recibirmensaje+0x29c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b8f      	ldr	r3, [pc, #572]	; (8000ae0 <recibirmensaje+0x29c>)
 80008a2:	701a      	strb	r2, [r3, #0]

				if(coincidencias>6){
 80008a4:	4b8e      	ldr	r3, [pc, #568]	; (8000ae0 <recibirmensaje+0x29c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b06      	cmp	r3, #6
 80008aa:	f240 85f1 	bls.w	8001490 <recibirmensaje+0xc4c>
					//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
					coincidencias = 0;
 80008ae:	4b8c      	ldr	r3, [pc, #560]	; (8000ae0 <recibirmensaje+0x29c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
					AT++;
 80008b4:	4b87      	ldr	r3, [pc, #540]	; (8000ad4 <recibirmensaje+0x290>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b85      	ldr	r3, [pc, #532]	; (8000ad4 <recibirmensaje+0x290>)
 80008be:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 80008c0:	4a89      	ldr	r2, [pc, #548]	; (8000ae8 <recibirmensaje+0x2a4>)
 80008c2:	7813      	ldrb	r3, [r2, #0]
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 80008ca:	f000 bde1 	b.w	8001490 <recibirmensaje+0xc4c>
				if(!timeout2){
 80008ce:	4b87      	ldr	r3, [pc, #540]	; (8000aec <recibirmensaje+0x2a8>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f040 85dc 	bne.w	8001490 <recibirmensaje+0xc4c>
					indRX_R=indRX_W;
 80008d8:	4b85      	ldr	r3, [pc, #532]	; (8000af0 <recibirmensaje+0x2ac>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b7e      	ldr	r3, [pc, #504]	; (8000ad8 <recibirmensaje+0x294>)
 80008e0:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 80008e2:	4b7f      	ldr	r3, [pc, #508]	; (8000ae0 <recibirmensaje+0x29c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 80008e8:	4a7f      	ldr	r2, [pc, #508]	; (8000ae8 <recibirmensaje+0x2a4>)
 80008ea:	7813      	ldrb	r3, [r2, #0]
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	7013      	strb	r3, [r2, #0]
					break;
 80008f2:	f000 bddc 	b.w	80014ae <recibirmensaje+0xc6a>
		case 1:
			if(buf_rx[indRX_R]==ANS_CWQAP[coincidencias]){
 80008f6:	4b78      	ldr	r3, [pc, #480]	; (8000ad8 <recibirmensaje+0x294>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b77      	ldr	r3, [pc, #476]	; (8000adc <recibirmensaje+0x298>)
 8000900:	5c9b      	ldrb	r3, [r3, r2]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b76      	ldr	r3, [pc, #472]	; (8000ae0 <recibirmensaje+0x29c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	4b7a      	ldr	r3, [pc, #488]	; (8000af4 <recibirmensaje+0x2b0>)
 800090c:	5c5b      	ldrb	r3, [r3, r1]
 800090e:	429a      	cmp	r2, r3
 8000910:	d118      	bne.n	8000944 <recibirmensaje+0x100>
				coincidencias++;
 8000912:	4b73      	ldr	r3, [pc, #460]	; (8000ae0 <recibirmensaje+0x29c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b71      	ldr	r3, [pc, #452]	; (8000ae0 <recibirmensaje+0x29c>)
 800091c:	701a      	strb	r2, [r3, #0]

				if(coincidencias>14){
 800091e:	4b70      	ldr	r3, [pc, #448]	; (8000ae0 <recibirmensaje+0x29c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b0e      	cmp	r3, #14
 8000924:	d921      	bls.n	800096a <recibirmensaje+0x126>
					//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
					coincidencias = 0;
 8000926:	4b6e      	ldr	r3, [pc, #440]	; (8000ae0 <recibirmensaje+0x29c>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
					AT++;
 800092c:	4b69      	ldr	r3, [pc, #420]	; (8000ad4 <recibirmensaje+0x290>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b67      	ldr	r3, [pc, #412]	; (8000ad4 <recibirmensaje+0x290>)
 8000936:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000938:	4a6b      	ldr	r2, [pc, #428]	; (8000ae8 <recibirmensaje+0x2a4>)
 800093a:	7813      	ldrb	r3, [r2, #0]
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	7013      	strb	r3, [r2, #0]
 8000942:	e012      	b.n	800096a <recibirmensaje+0x126>
				}
			}else{
				if(!timeout2){
 8000944:	4b69      	ldr	r3, [pc, #420]	; (8000aec <recibirmensaje+0x2a8>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d10e      	bne.n	800096a <recibirmensaje+0x126>
					indRX_R=indRX_W;
 800094c:	4b68      	ldr	r3, [pc, #416]	; (8000af0 <recibirmensaje+0x2ac>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b61      	ldr	r3, [pc, #388]	; (8000ad8 <recibirmensaje+0x294>)
 8000954:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 8000956:	4b62      	ldr	r3, [pc, #392]	; (8000ae0 <recibirmensaje+0x29c>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 800095c:	4a62      	ldr	r2, [pc, #392]	; (8000ae8 <recibirmensaje+0x2a4>)
 800095e:	7813      	ldrb	r3, [r2, #0]
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	7013      	strb	r3, [r2, #0]
					break;
 8000966:	f000 bda2 	b.w	80014ae <recibirmensaje+0xc6a>
					}
				}
			}
		break;*/
		case 2:
			if(buf_rx[indRX_R]==ANS_CWMODE[coincidencias]){
 800096a:	4b5b      	ldr	r3, [pc, #364]	; (8000ad8 <recibirmensaje+0x294>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	4b5a      	ldr	r3, [pc, #360]	; (8000adc <recibirmensaje+0x298>)
 8000974:	5c9b      	ldrb	r3, [r3, r2]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b59      	ldr	r3, [pc, #356]	; (8000ae0 <recibirmensaje+0x29c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	4b5e      	ldr	r3, [pc, #376]	; (8000af8 <recibirmensaje+0x2b4>)
 8000980:	5c5b      	ldrb	r3, [r3, r1]
 8000982:	429a      	cmp	r2, r3
 8000984:	d11a      	bne.n	80009bc <recibirmensaje+0x178>
				coincidencias++;
 8000986:	4b56      	ldr	r3, [pc, #344]	; (8000ae0 <recibirmensaje+0x29c>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	3301      	adds	r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b54      	ldr	r3, [pc, #336]	; (8000ae0 <recibirmensaje+0x29c>)
 8000990:	701a      	strb	r2, [r3, #0]

				if(coincidencias>17){
 8000992:	4b53      	ldr	r3, [pc, #332]	; (8000ae0 <recibirmensaje+0x29c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b11      	cmp	r3, #17
 8000998:	f240 857c 	bls.w	8001494 <recibirmensaje+0xc50>
					coincidencias = 0;
 800099c:	4b50      	ldr	r3, [pc, #320]	; (8000ae0 <recibirmensaje+0x29c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
					AT++;
 80009a2:	4b4c      	ldr	r3, [pc, #304]	; (8000ad4 <recibirmensaje+0x290>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b4a      	ldr	r3, [pc, #296]	; (8000ad4 <recibirmensaje+0x290>)
 80009ac:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 80009ae:	4a4e      	ldr	r2, [pc, #312]	; (8000ae8 <recibirmensaje+0x2a4>)
 80009b0:	7813      	ldrb	r3, [r2, #0]
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 80009b8:	f000 bd6c 	b.w	8001494 <recibirmensaje+0xc50>
				if(!timeout2){
 80009bc:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <recibirmensaje+0x2a8>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	f040 8567 	bne.w	8001494 <recibirmensaje+0xc50>
					indRX_R=indRX_W;
 80009c6:	4b4a      	ldr	r3, [pc, #296]	; (8000af0 <recibirmensaje+0x2ac>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <recibirmensaje+0x294>)
 80009ce:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 80009d0:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <recibirmensaje+0x29c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 80009d6:	4a44      	ldr	r2, [pc, #272]	; (8000ae8 <recibirmensaje+0x2a4>)
 80009d8:	7813      	ldrb	r3, [r2, #0]
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	7013      	strb	r3, [r2, #0]
					break;
 80009e0:	f000 bd65 	b.w	80014ae <recibirmensaje+0xc6a>
		case 3:
			if(buf_rx[indRX_R]==ANS_CWJAP_casa[coincidencias]){
 80009e4:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <recibirmensaje+0x294>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <recibirmensaje+0x298>)
 80009ee:	5c9b      	ldrb	r3, [r3, r2]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <recibirmensaje+0x29c>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	4619      	mov	r1, r3
 80009f8:	4b40      	ldr	r3, [pc, #256]	; (8000afc <recibirmensaje+0x2b8>)
 80009fa:	5c5b      	ldrb	r3, [r3, r1]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	f040 854b 	bne.w	8001498 <recibirmensaje+0xc54>
				coincidencias++;
 8000a02:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <recibirmensaje+0x29c>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <recibirmensaje+0x29c>)
 8000a0c:	701a      	strb	r2, [r3, #0]

				if(coincidencias>68){
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <recibirmensaje+0x29c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b44      	cmp	r3, #68	; 0x44
 8000a14:	f240 8540 	bls.w	8001498 <recibirmensaje+0xc54>
					coincidencias = 0;
 8000a18:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <recibirmensaje+0x29c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
					AT++;
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <recibirmensaje+0x290>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <recibirmensaje+0x290>)
 8000a28:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000a2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ae8 <recibirmensaje+0x2a4>)
 8000a2c:	7813      	ldrb	r3, [r2, #0]
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	7013      	strb	r3, [r2, #0]
				}
			}
		break;
 8000a34:	f000 bd30 	b.w	8001498 <recibirmensaje+0xc54>
		case 4:
			if(buf_rx[indRX_R]==ANS_CIPMUX[coincidencias]){
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <recibirmensaje+0x294>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <recibirmensaje+0x298>)
 8000a42:	5c9b      	ldrb	r3, [r3, r2]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <recibirmensaje+0x29c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <recibirmensaje+0x2bc>)
 8000a4e:	5c5b      	ldrb	r3, [r3, r1]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d11a      	bne.n	8000a8a <recibirmensaje+0x246>
				coincidencias++;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <recibirmensaje+0x29c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <recibirmensaje+0x29c>)
 8000a5e:	701a      	strb	r2, [r3, #0]

				if(coincidencias>17){
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <recibirmensaje+0x29c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b11      	cmp	r3, #17
 8000a66:	f240 8519 	bls.w	800149c <recibirmensaje+0xc58>
					coincidencias = 0;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <recibirmensaje+0x29c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
					AT+=2;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <recibirmensaje+0x290>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	3302      	adds	r3, #2
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <recibirmensaje+0x290>)
 8000a7a:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <recibirmensaje+0x2a4>)
 8000a7e:	7813      	ldrb	r3, [r2, #0]
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	7013      	strb	r3, [r2, #0]
					coincidencias = 0;
					readyToSend=1;
					break;
				}
			}
		break;
 8000a86:	f000 bd09 	b.w	800149c <recibirmensaje+0xc58>
				if(!timeout2){
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <recibirmensaje+0x2a8>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f040 8504 	bne.w	800149c <recibirmensaje+0xc58>
					indRX_R=indRX_W;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <recibirmensaje+0x2ac>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <recibirmensaje+0x294>)
 8000a9c:	701a      	strb	r2, [r3, #0]
					coincidencias = 0;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <recibirmensaje+0x29c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8000aa4:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <recibirmensaje+0x2a4>)
 8000aa6:	7813      	ldrb	r3, [r2, #0]
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	7013      	strb	r3, [r2, #0]
					break;
 8000aae:	f000 bcfe 	b.w	80014ae <recibirmensaje+0xc6a>
		case 5:
			switch(decodeCIF){
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <recibirmensaje+0x2c0>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	f200 84f2 	bhi.w	80014a0 <recibirmensaje+0xc5c>
 8000abc:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <recibirmensaje+0x280>)
 8000abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac2:	bf00      	nop
 8000ac4:	08000b09 	.word	0x08000b09
 8000ac8:	08000b75 	.word	0x08000b75
 8000acc:	08000bb9 	.word	0x08000bb9
 8000ad0:	08000c0b 	.word	0x08000c0b
 8000ad4:	20000605 	.word	0x20000605
 8000ad8:	200005fe 	.word	0x200005fe
 8000adc:	200001ec 	.word	0x200001ec
 8000ae0:	20000602 	.word	0x20000602
 8000ae4:	08007030 	.word	0x08007030
 8000ae8:	20000654 	.word	0x20000654
 8000aec:	2000060a 	.word	0x2000060a
 8000af0:	200005fd 	.word	0x200005fd
 8000af4:	08007048 	.word	0x08007048
 8000af8:	0800706c 	.word	0x0800706c
 8000afc:	080070a8 	.word	0x080070a8
 8000b00:	0800711c 	.word	0x0800711c
 8000b04:	20000607 	.word	0x20000607
			case 0:
				if(buf_rx[indRX_R]==CIFSR[coincidencias]){
 8000b08:	4b9d      	ldr	r3, [pc, #628]	; (8000d80 <recibirmensaje+0x53c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b9c      	ldr	r3, [pc, #624]	; (8000d84 <recibirmensaje+0x540>)
 8000b12:	5c9b      	ldrb	r3, [r3, r2]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b9c      	ldr	r3, [pc, #624]	; (8000d88 <recibirmensaje+0x544>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4b9b      	ldr	r3, [pc, #620]	; (8000d8c <recibirmensaje+0x548>)
 8000b1e:	5c5b      	ldrb	r3, [r3, r1]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d114      	bne.n	8000b4e <recibirmensaje+0x30a>
					coincidencias++;
 8000b24:	4b98      	ldr	r3, [pc, #608]	; (8000d88 <recibirmensaje+0x544>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b96      	ldr	r3, [pc, #600]	; (8000d88 <recibirmensaje+0x544>)
 8000b2e:	701a      	strb	r2, [r3, #0]

					if(coincidencias>8){
 8000b30:	4b95      	ldr	r3, [pc, #596]	; (8000d88 <recibirmensaje+0x544>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b08      	cmp	r3, #8
 8000b36:	f240 8092 	bls.w	8000c5e <recibirmensaje+0x41a>
						coincidencias = 0;
 8000b3a:	4b93      	ldr	r3, [pc, #588]	; (8000d88 <recibirmensaje+0x544>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
						decodeCIF++;
 8000b40:	4b93      	ldr	r3, [pc, #588]	; (8000d90 <recibirmensaje+0x54c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b91      	ldr	r3, [pc, #580]	; (8000d90 <recibirmensaje+0x54c>)
 8000b4a:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
						readyToSend=1;
						break;
					}
				}
			break;
 8000b4c:	e087      	b.n	8000c5e <recibirmensaje+0x41a>
					if(!timeout2){
 8000b4e:	4b91      	ldr	r3, [pc, #580]	; (8000d94 <recibirmensaje+0x550>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f040 8083 	bne.w	8000c5e <recibirmensaje+0x41a>
						indRX_R=indRX_W;
 8000b58:	4b8f      	ldr	r3, [pc, #572]	; (8000d98 <recibirmensaje+0x554>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b88      	ldr	r3, [pc, #544]	; (8000d80 <recibirmensaje+0x53c>)
 8000b60:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
 8000b62:	4b89      	ldr	r3, [pc, #548]	; (8000d88 <recibirmensaje+0x544>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
						readyToSend=1;
 8000b68:	4a8c      	ldr	r2, [pc, #560]	; (8000d9c <recibirmensaje+0x558>)
 8000b6a:	7813      	ldrb	r3, [r2, #0]
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	7013      	strb	r3, [r2, #0]
						break;
 8000b72:	e07e      	b.n	8000c72 <recibirmensaje+0x42e>
			case 1:
				if(buf_rx[indRX_R]==CIFSR_STAIP[coincidencias]){
 8000b74:	4b82      	ldr	r3, [pc, #520]	; (8000d80 <recibirmensaje+0x53c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b81      	ldr	r3, [pc, #516]	; (8000d84 <recibirmensaje+0x540>)
 8000b7e:	5c9b      	ldrb	r3, [r3, r2]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b81      	ldr	r3, [pc, #516]	; (8000d88 <recibirmensaje+0x544>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	4b85      	ldr	r3, [pc, #532]	; (8000da0 <recibirmensaje+0x55c>)
 8000b8a:	5c5b      	ldrb	r3, [r3, r1]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d169      	bne.n	8000c64 <recibirmensaje+0x420>
					coincidencias++;
 8000b90:	4b7d      	ldr	r3, [pc, #500]	; (8000d88 <recibirmensaje+0x544>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b7b      	ldr	r3, [pc, #492]	; (8000d88 <recibirmensaje+0x544>)
 8000b9a:	701a      	strb	r2, [r3, #0]

					if(coincidencias>10){
 8000b9c:	4b7a      	ldr	r3, [pc, #488]	; (8000d88 <recibirmensaje+0x544>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b0a      	cmp	r3, #10
 8000ba2:	d95f      	bls.n	8000c64 <recibirmensaje+0x420>
						coincidencias = 0;
 8000ba4:	4b78      	ldr	r3, [pc, #480]	; (8000d88 <recibirmensaje+0x544>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
						decodeCIF++;
 8000baa:	4b79      	ldr	r3, [pc, #484]	; (8000d90 <recibirmensaje+0x54c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b77      	ldr	r3, [pc, #476]	; (8000d90 <recibirmensaje+0x54c>)
 8000bb4:	701a      	strb	r2, [r3, #0]
						//AT++;
						//readyToSend = 1;
					}
				}
			break;
 8000bb6:	e055      	b.n	8000c64 <recibirmensaje+0x420>
			case 2:
				espIP[coincidencias]=buf_rx[indRX_R];
 8000bb8:	4b71      	ldr	r3, [pc, #452]	; (8000d80 <recibirmensaje+0x53c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4b71      	ldr	r3, [pc, #452]	; (8000d88 <recibirmensaje+0x544>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b6f      	ldr	r3, [pc, #444]	; (8000d84 <recibirmensaje+0x540>)
 8000bc8:	5c5b      	ldrb	r3, [r3, r1]
 8000bca:	b2d9      	uxtb	r1, r3
 8000bcc:	4b75      	ldr	r3, [pc, #468]	; (8000da4 <recibirmensaje+0x560>)
 8000bce:	5499      	strb	r1, [r3, r2]
				coincidencias++;
 8000bd0:	4b6d      	ldr	r3, [pc, #436]	; (8000d88 <recibirmensaje+0x544>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b6b      	ldr	r3, [pc, #428]	; (8000d88 <recibirmensaje+0x544>)
 8000bda:	701a      	strb	r2, [r3, #0]
				if((buf_rx[indRX_R]=='"')&&(largoIP>1)){
 8000bdc:	4b68      	ldr	r3, [pc, #416]	; (8000d80 <recibirmensaje+0x53c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b67      	ldr	r3, [pc, #412]	; (8000d84 <recibirmensaje+0x540>)
 8000be6:	5c9b      	ldrb	r3, [r3, r2]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b22      	cmp	r3, #34	; 0x22
 8000bec:	d13d      	bne.n	8000c6a <recibirmensaje+0x426>
 8000bee:	4b6e      	ldr	r3, [pc, #440]	; (8000da8 <recibirmensaje+0x564>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d939      	bls.n	8000c6a <recibirmensaje+0x426>
					coincidencias=0;
 8000bf6:	4b64      	ldr	r3, [pc, #400]	; (8000d88 <recibirmensaje+0x544>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
					decodeCIF++;
 8000bfc:	4b64      	ldr	r3, [pc, #400]	; (8000d90 <recibirmensaje+0x54c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b62      	ldr	r3, [pc, #392]	; (8000d90 <recibirmensaje+0x54c>)
 8000c06:	701a      	strb	r2, [r3, #0]
				}
			break;
 8000c08:	e02f      	b.n	8000c6a <recibirmensaje+0x426>
			case 3:
				if(buf_rx[indRX_R]==OK[coincidencias]){
 8000c0a:	4b5d      	ldr	r3, [pc, #372]	; (8000d80 <recibirmensaje+0x53c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b5c      	ldr	r3, [pc, #368]	; (8000d84 <recibirmensaje+0x540>)
 8000c14:	5c9b      	ldrb	r3, [r3, r2]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b5b      	ldr	r3, [pc, #364]	; (8000d88 <recibirmensaje+0x544>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4b63      	ldr	r3, [pc, #396]	; (8000dac <recibirmensaje+0x568>)
 8000c20:	5c5b      	ldrb	r3, [r3, r1]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d124      	bne.n	8000c70 <recibirmensaje+0x42c>
					coincidencias++;
 8000c26:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <recibirmensaje+0x544>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <recibirmensaje+0x544>)
 8000c30:	701a      	strb	r2, [r3, #0]

					if(coincidencias>4){
 8000c32:	4b55      	ldr	r3, [pc, #340]	; (8000d88 <recibirmensaje+0x544>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d91a      	bls.n	8000c70 <recibirmensaje+0x42c>
						coincidencias = 0;
 8000c3a:	4b53      	ldr	r3, [pc, #332]	; (8000d88 <recibirmensaje+0x544>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
						decodeCIF=0;
 8000c40:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <recibirmensaje+0x54c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
						AT++;
 8000c46:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <recibirmensaje+0x56c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <recibirmensaje+0x56c>)
 8000c50:	701a      	strb	r2, [r3, #0]
						readyToSend = 1;
 8000c52:	4a52      	ldr	r2, [pc, #328]	; (8000d9c <recibirmensaje+0x558>)
 8000c54:	7813      	ldrb	r3, [r2, #0]
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	7013      	strb	r3, [r2, #0]
					}
				}
			break;
 8000c5c:	e008      	b.n	8000c70 <recibirmensaje+0x42c>
			break;
 8000c5e:	bf00      	nop
 8000c60:	f000 bc1e 	b.w	80014a0 <recibirmensaje+0xc5c>
			break;
 8000c64:	bf00      	nop
 8000c66:	f000 bc1b 	b.w	80014a0 <recibirmensaje+0xc5c>
			break;
 8000c6a:	bf00      	nop
 8000c6c:	f000 bc18 	b.w	80014a0 <recibirmensaje+0xc5c>
			break;
 8000c70:	bf00      	nop
			}
		break;
 8000c72:	f000 bc15 	b.w	80014a0 <recibirmensaje+0xc5c>
		case 6:
			if(buf_rx[indRX_R]==ANS_CIPSTART[coincidencias]){
 8000c76:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <recibirmensaje+0x53c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <recibirmensaje+0x540>)
 8000c80:	5c9b      	ldrb	r3, [r3, r2]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b40      	ldr	r3, [pc, #256]	; (8000d88 <recibirmensaje+0x544>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <recibirmensaje+0x570>)
 8000c8c:	5c5b      	ldrb	r3, [r3, r1]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d127      	bne.n	8000ce2 <recibirmensaje+0x49e>
				coincidencias++;
 8000c92:	4b3d      	ldr	r3, [pc, #244]	; (8000d88 <recibirmensaje+0x544>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b3b      	ldr	r3, [pc, #236]	; (8000d88 <recibirmensaje+0x544>)
 8000c9c:	701a      	strb	r2, [r3, #0]

				if(coincidencias>44){
 8000c9e:	4b3a      	ldr	r3, [pc, #232]	; (8000d88 <recibirmensaje+0x544>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ca4:	f240 83fe 	bls.w	80014a4 <recibirmensaje+0xc60>
					coincidencias = 0;
 8000ca8:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <recibirmensaje+0x544>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
					coincidencias2 = 0;
 8000cae:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <recibirmensaje+0x574>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
					AT=8;
 8000cb4:	4b3e      	ldr	r3, [pc, #248]	; (8000db0 <recibirmensaje+0x56c>)
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	701a      	strb	r2, [r3, #0]
					readyToSend = 1;
 8000cba:	4a38      	ldr	r2, [pc, #224]	; (8000d9c <recibirmensaje+0x558>)
 8000cbc:	7813      	ldrb	r3, [r2, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	7013      	strb	r3, [r2, #0]
					espConnected=1;
 8000cc4:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <recibirmensaje+0x578>)
 8000cc6:	7813      	ldrb	r3, [r2, #0]
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cce:	2120      	movs	r1, #32
 8000cd0:	483b      	ldr	r0, [pc, #236]	; (8000dc0 <recibirmensaje+0x57c>)
 8000cd2:	f003 fd16 	bl	8004702 <HAL_GPIO_TogglePin>
					sendALIVE=1;
 8000cd6:	4a39      	ldr	r2, [pc, #228]	; (8000dbc <recibirmensaje+0x578>)
 8000cd8:	7813      	ldrb	r3, [r2, #0]
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	7013      	strb	r3, [r2, #0]
						readyToSend=1;
						break;
					}
				}

		break;
 8000ce0:	e3e0      	b.n	80014a4 <recibirmensaje+0xc60>
					if(!timeout2){
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <recibirmensaje+0x550>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 83dc 	bne.w	80014a4 <recibirmensaje+0xc60>
						indRX_R=indRX_W;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <recibirmensaje+0x554>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <recibirmensaje+0x53c>)
 8000cf4:	701a      	strb	r2, [r3, #0]
						coincidencias = 0;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <recibirmensaje+0x544>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
						readyToSend=1;
 8000cfc:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <recibirmensaje+0x558>)
 8000cfe:	7813      	ldrb	r3, [r2, #0]
 8000d00:	f043 0310 	orr.w	r3, r3, #16
 8000d04:	7013      	strb	r3, [r2, #0]
						break;
 8000d06:	e3d2      	b.n	80014ae <recibirmensaje+0xc6a>
		case 7:
			switch(decoCIPSEND){
 8000d08:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <recibirmensaje+0x580>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b07      	cmp	r3, #7
 8000d0e:	f200 83cb 	bhi.w	80014a8 <recibirmensaje+0xc64>
 8000d12:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <recibirmensaje+0x4d4>)
 8000d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d18:	08000d39 	.word	0x08000d39
 8000d1c:	08000e0d 	.word	0x08000e0d
 8000d20:	08000e95 	.word	0x08000e95
 8000d24:	08000ec7 	.word	0x08000ec7
 8000d28:	08000f67 	.word	0x08000f67
 8000d2c:	08000ff3 	.word	0x08000ff3
 8000d30:	080010d3 	.word	0x080010d3
 8000d34:	08001147 	.word	0x08001147
				case 0:
					if(buf_rx[indRX_R]==CIPSEND[coincidencias]){
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <recibirmensaje+0x53c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <recibirmensaje+0x540>)
 8000d42:	5c9b      	ldrb	r3, [r3, r2]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <recibirmensaje+0x544>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <recibirmensaje+0x584>)
 8000d4e:	5c5b      	ldrb	r3, [r3, r1]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d13b      	bne.n	8000dcc <recibirmensaje+0x588>
						coincidencias++;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <recibirmensaje+0x544>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <recibirmensaje+0x544>)
 8000d5e:	701a      	strb	r2, [r3, #0]

						if(coincidencias>9){
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <recibirmensaje+0x544>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	f240 823c 	bls.w	80011e2 <recibirmensaje+0x99e>
							coincidencias = 0;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <recibirmensaje+0x544>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <recibirmensaje+0x580>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <recibirmensaje+0x580>)
 8000d7a:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8000d7c:	e231      	b.n	80011e2 <recibirmensaje+0x99e>
 8000d7e:	bf00      	nop
 8000d80:	200005fe 	.word	0x200005fe
 8000d84:	200001ec 	.word	0x200001ec
 8000d88:	20000602 	.word	0x20000602
 8000d8c:	080070f0 	.word	0x080070f0
 8000d90:	20000607 	.word	0x20000607
 8000d94:	2000060a 	.word	0x2000060a
 8000d98:	200005fd 	.word	0x200005fd
 8000d9c:	20000654 	.word	0x20000654
 8000da0:	080070fc 	.word	0x080070fc
 8000da4:	200005ec 	.word	0x200005ec
 8000da8:	2000060d 	.word	0x2000060d
 8000dac:	080071c4 	.word	0x080071c4
 8000db0:	20000605 	.word	0x20000605
 8000db4:	08007160 	.word	0x08007160
 8000db8:	20000603 	.word	0x20000603
 8000dbc:	20000658 	.word	0x20000658
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	20000606 	.word	0x20000606
 8000dc8:	08007190 	.word	0x08007190
						if(!timeout2){
 8000dcc:	4ba1      	ldr	r3, [pc, #644]	; (8001054 <recibirmensaje+0x810>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f040 8206 	bne.w	80011e2 <recibirmensaje+0x99e>
							indRX_R=indRX_W;
 8000dd6:	4ba0      	ldr	r3, [pc, #640]	; (8001058 <recibirmensaje+0x814>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b9f      	ldr	r3, [pc, #636]	; (800105c <recibirmensaje+0x818>)
 8000dde:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8000de0:	4b9f      	ldr	r3, [pc, #636]	; (8001060 <recibirmensaje+0x81c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000de6:	4a9f      	ldr	r2, [pc, #636]	; (8001064 <recibirmensaje+0x820>)
 8000de8:	7813      	ldrb	r3, [r2, #0]
 8000dea:	f043 0310 	orr.w	r3, r3, #16
 8000dee:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8000df0:	4a9c      	ldr	r2, [pc, #624]	; (8001064 <recibirmensaje+0x820>)
 8000df2:	7813      	ldrb	r3, [r2, #0]
 8000df4:	f36f 1345 	bfc	r3, #5, #1
 8000df8:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8000dfa:	4a9b      	ldr	r2, [pc, #620]	; (8001068 <recibirmensaje+0x824>)
 8000dfc:	7813      	ldrb	r3, [r2, #0]
 8000dfe:	f36f 0341 	bfc	r3, #1, #1
 8000e02:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8000e04:	4b99      	ldr	r3, [pc, #612]	; (800106c <recibirmensaje+0x828>)
 8000e06:	221e      	movs	r2, #30
 8000e08:	701a      	strb	r2, [r3, #0]
							break;
 8000e0a:	e1f9      	b.n	8001200 <recibirmensaje+0x9bc>
				case 1:
					if((buf_rx[indRX_R]==bytesToSend+'0')&&((bytesToSend<10))){//reviso q sean menos de 10 bytes
 8000e0c:	4b93      	ldr	r3, [pc, #588]	; (800105c <recibirmensaje+0x818>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b96      	ldr	r3, [pc, #600]	; (8001070 <recibirmensaje+0x82c>)
 8000e16:	5c9b      	ldrb	r3, [r3, r2]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b95      	ldr	r3, [pc, #596]	; (8001074 <recibirmensaje+0x830>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3330      	adds	r3, #48	; 0x30
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d10a      	bne.n	8000e3c <recibirmensaje+0x5f8>
 8000e26:	4b93      	ldr	r3, [pc, #588]	; (8001074 <recibirmensaje+0x830>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b09      	cmp	r3, #9
 8000e2c:	d806      	bhi.n	8000e3c <recibirmensaje+0x5f8>
						decoCIPSEND+=2;
 8000e2e:	4b92      	ldr	r3, [pc, #584]	; (8001078 <recibirmensaje+0x834>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	3302      	adds	r3, #2
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b90      	ldr	r3, [pc, #576]	; (8001078 <recibirmensaje+0x834>)
 8000e38:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
							bytesToSend_aux=bytesToSend/10;
							bytesToSend_aux*=10;
						}
					}
				break;
 8000e3a:	e1d4      	b.n	80011e6 <recibirmensaje+0x9a2>
						if(buf_rx[indRX_R]==bytesToSend/10+'0'){
 8000e3c:	4b87      	ldr	r3, [pc, #540]	; (800105c <recibirmensaje+0x818>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b8a      	ldr	r3, [pc, #552]	; (8001070 <recibirmensaje+0x82c>)
 8000e46:	5c9b      	ldrb	r3, [r3, r2]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4b89      	ldr	r3, [pc, #548]	; (8001074 <recibirmensaje+0x830>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4a8a      	ldr	r2, [pc, #552]	; (800107c <recibirmensaje+0x838>)
 8000e52:	fba2 2303 	umull	r2, r3, r2, r3
 8000e56:	08db      	lsrs	r3, r3, #3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	3330      	adds	r3, #48	; 0x30
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	f040 81c2 	bne.w	80011e6 <recibirmensaje+0x9a2>
							decoCIPSEND++;
 8000e62:	4b85      	ldr	r3, [pc, #532]	; (8001078 <recibirmensaje+0x834>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b83      	ldr	r3, [pc, #524]	; (8001078 <recibirmensaje+0x834>)
 8000e6c:	701a      	strb	r2, [r3, #0]
							bytesToSend_aux=bytesToSend/10;
 8000e6e:	4b81      	ldr	r3, [pc, #516]	; (8001074 <recibirmensaje+0x830>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	4a82      	ldr	r2, [pc, #520]	; (800107c <recibirmensaje+0x838>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b80      	ldr	r3, [pc, #512]	; (8001080 <recibirmensaje+0x83c>)
 8000e7e:	701a      	strb	r2, [r3, #0]
							bytesToSend_aux*=10;
 8000e80:	4b7f      	ldr	r3, [pc, #508]	; (8001080 <recibirmensaje+0x83c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b7c      	ldr	r3, [pc, #496]	; (8001080 <recibirmensaje+0x83c>)
 8000e90:	701a      	strb	r2, [r3, #0]
				break;
 8000e92:	e1a8      	b.n	80011e6 <recibirmensaje+0x9a2>
				case 2:
					if(buf_rx[indRX_R]==bytesToSend-bytesToSend_aux+'0'){
 8000e94:	4b71      	ldr	r3, [pc, #452]	; (800105c <recibirmensaje+0x818>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b74      	ldr	r3, [pc, #464]	; (8001070 <recibirmensaje+0x82c>)
 8000e9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b73      	ldr	r3, [pc, #460]	; (8001074 <recibirmensaje+0x830>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4b75      	ldr	r3, [pc, #468]	; (8001080 <recibirmensaje+0x83c>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	3330      	adds	r3, #48	; 0x30
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	f040 8199 	bne.w	80011ea <recibirmensaje+0x9a6>
						decoCIPSEND++;
 8000eb8:	4b6f      	ldr	r3, [pc, #444]	; (8001078 <recibirmensaje+0x834>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b6d      	ldr	r3, [pc, #436]	; (8001078 <recibirmensaje+0x834>)
 8000ec2:	701a      	strb	r2, [r3, #0]
					}
				break;
 8000ec4:	e191      	b.n	80011ea <recibirmensaje+0x9a6>
				case 3:
					if(buf_rx[indRX_R]==CIPSEND2[coincidencias]){
 8000ec6:	4b65      	ldr	r3, [pc, #404]	; (800105c <recibirmensaje+0x818>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b68      	ldr	r3, [pc, #416]	; (8001070 <recibirmensaje+0x82c>)
 8000ed0:	5c9b      	ldrb	r3, [r3, r2]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b62      	ldr	r3, [pc, #392]	; (8001060 <recibirmensaje+0x81c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4b6a      	ldr	r3, [pc, #424]	; (8001084 <recibirmensaje+0x840>)
 8000edc:	5c5b      	ldrb	r3, [r3, r1]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d11e      	bne.n	8000f20 <recibirmensaje+0x6dc>
						coincidencias++;
 8000ee2:	4b5f      	ldr	r3, [pc, #380]	; (8001060 <recibirmensaje+0x81c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <recibirmensaje+0x81c>)
 8000eec:	701a      	strb	r2, [r3, #0]

						if(coincidencias>7){
 8000eee:	4b5c      	ldr	r3, [pc, #368]	; (8001060 <recibirmensaje+0x81c>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b07      	cmp	r3, #7
 8000ef4:	f240 817b 	bls.w	80011ee <recibirmensaje+0x9aa>
							coincidencias = 0;
 8000ef8:	4b59      	ldr	r3, [pc, #356]	; (8001060 <recibirmensaje+0x81c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8000efe:	4b5e      	ldr	r3, [pc, #376]	; (8001078 <recibirmensaje+0x834>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b5c      	ldr	r3, [pc, #368]	; (8001078 <recibirmensaje+0x834>)
 8000f08:	701a      	strb	r2, [r3, #0]
							//AT++;
							readyToSend = 1;
 8000f0a:	4a56      	ldr	r2, [pc, #344]	; (8001064 <recibirmensaje+0x820>)
 8000f0c:	7813      	ldrb	r3, [r2, #0]
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=1;
 8000f14:	4a53      	ldr	r2, [pc, #332]	; (8001064 <recibirmensaje+0x820>)
 8000f16:	7813      	ldrb	r3, [r2, #0]
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8000f1e:	e166      	b.n	80011ee <recibirmensaje+0x9aa>
						if(!timeout2){
 8000f20:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <recibirmensaje+0x810>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f040 8162 	bne.w	80011ee <recibirmensaje+0x9aa>
							decoCIPSEND=0;
 8000f2a:	4b53      	ldr	r3, [pc, #332]	; (8001078 <recibirmensaje+0x834>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8000f30:	4b49      	ldr	r3, [pc, #292]	; (8001058 <recibirmensaje+0x814>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b49      	ldr	r3, [pc, #292]	; (800105c <recibirmensaje+0x818>)
 8000f38:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8000f3a:	4b49      	ldr	r3, [pc, #292]	; (8001060 <recibirmensaje+0x81c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000f40:	4a48      	ldr	r2, [pc, #288]	; (8001064 <recibirmensaje+0x820>)
 8000f42:	7813      	ldrb	r3, [r2, #0]
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8000f4a:	4a46      	ldr	r2, [pc, #280]	; (8001064 <recibirmensaje+0x820>)
 8000f4c:	7813      	ldrb	r3, [r2, #0]
 8000f4e:	f36f 1345 	bfc	r3, #5, #1
 8000f52:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8000f54:	4a44      	ldr	r2, [pc, #272]	; (8001068 <recibirmensaje+0x824>)
 8000f56:	7813      	ldrb	r3, [r2, #0]
 8000f58:	f36f 0341 	bfc	r3, #1, #1
 8000f5c:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8000f5e:	4b43      	ldr	r3, [pc, #268]	; (800106c <recibirmensaje+0x828>)
 8000f60:	221e      	movs	r2, #30
 8000f62:	701a      	strb	r2, [r3, #0]
							break;
 8000f64:	e14c      	b.n	8001200 <recibirmensaje+0x9bc>
				case 4:
					if(buf_rx[indRX_R]==CIPSEND3[coincidencias]){
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <recibirmensaje+0x818>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <recibirmensaje+0x82c>)
 8000f70:	5c9b      	ldrb	r3, [r3, r2]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <recibirmensaje+0x81c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4b43      	ldr	r3, [pc, #268]	; (8001088 <recibirmensaje+0x844>)
 8000f7c:	5c5b      	ldrb	r3, [r3, r1]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d114      	bne.n	8000fac <recibirmensaje+0x768>
						coincidencias++;
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <recibirmensaje+0x81c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b35      	ldr	r3, [pc, #212]	; (8001060 <recibirmensaje+0x81c>)
 8000f8c:	701a      	strb	r2, [r3, #0]

						if(coincidencias>3){
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <recibirmensaje+0x81c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	f240 812d 	bls.w	80011f2 <recibirmensaje+0x9ae>
							coincidencias = 0;
 8000f98:	4b31      	ldr	r3, [pc, #196]	; (8001060 <recibirmensaje+0x81c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
							decoCIPSEND++;
 8000f9e:	4b36      	ldr	r3, [pc, #216]	; (8001078 <recibirmensaje+0x834>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b34      	ldr	r3, [pc, #208]	; (8001078 <recibirmensaje+0x834>)
 8000fa8:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8000faa:	e122      	b.n	80011f2 <recibirmensaje+0x9ae>
						if(!timeout2){
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <recibirmensaje+0x810>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f040 811e 	bne.w	80011f2 <recibirmensaje+0x9ae>
							decoCIPSEND=0;
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <recibirmensaje+0x834>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <recibirmensaje+0x814>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <recibirmensaje+0x818>)
 8000fc4:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <recibirmensaje+0x81c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <recibirmensaje+0x820>)
 8000fce:	7813      	ldrb	r3, [r2, #0]
 8000fd0:	f043 0310 	orr.w	r3, r3, #16
 8000fd4:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8000fd6:	4a23      	ldr	r2, [pc, #140]	; (8001064 <recibirmensaje+0x820>)
 8000fd8:	7813      	ldrb	r3, [r2, #0]
 8000fda:	f36f 1345 	bfc	r3, #5, #1
 8000fde:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <recibirmensaje+0x824>)
 8000fe2:	7813      	ldrb	r3, [r2, #0]
 8000fe4:	f36f 0341 	bfc	r3, #1, #1
 8000fe8:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <recibirmensaje+0x828>)
 8000fec:	221e      	movs	r2, #30
 8000fee:	701a      	strb	r2, [r3, #0]
							break;
 8000ff0:	e106      	b.n	8001200 <recibirmensaje+0x9bc>
				case 5:
					if((buf_rx[indRX_R]==bytesToSend+'0')&&((bytesToSend<10))){//reviso q sean menos de 10 bytes
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <recibirmensaje+0x818>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <recibirmensaje+0x82c>)
 8000ffc:	5c9b      	ldrb	r3, [r3, r2]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <recibirmensaje+0x830>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3330      	adds	r3, #48	; 0x30
 8001008:	429a      	cmp	r2, r3
 800100a:	d10a      	bne.n	8001022 <recibirmensaje+0x7de>
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <recibirmensaje+0x830>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b09      	cmp	r3, #9
 8001012:	d806      	bhi.n	8001022 <recibirmensaje+0x7de>
						decoCIPSEND+=2;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <recibirmensaje+0x834>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	3302      	adds	r3, #2
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <recibirmensaje+0x834>)
 800101e:	701a      	strb	r2, [r3, #0]
								timeToSendAlive=30;
								break;
							}
						}
					}
				break;
 8001020:	e0e9      	b.n	80011f6 <recibirmensaje+0x9b2>
						if(buf_rx[indRX_R]==bytesToSend/10+'0'){
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <recibirmensaje+0x818>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <recibirmensaje+0x82c>)
 800102c:	5c9b      	ldrb	r3, [r3, r2]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4619      	mov	r1, r3
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <recibirmensaje+0x830>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4a11      	ldr	r2, [pc, #68]	; (800107c <recibirmensaje+0x838>)
 8001038:	fba2 2303 	umull	r2, r3, r2, r3
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3330      	adds	r3, #48	; 0x30
 8001042:	4299      	cmp	r1, r3
 8001044:	d122      	bne.n	800108c <recibirmensaje+0x848>
							decoCIPSEND++;
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <recibirmensaje+0x834>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <recibirmensaje+0x834>)
 8001050:	701a      	strb	r2, [r3, #0]
				break;
 8001052:	e0d0      	b.n	80011f6 <recibirmensaje+0x9b2>
 8001054:	2000060a 	.word	0x2000060a
 8001058:	200005fd 	.word	0x200005fd
 800105c:	200005fe 	.word	0x200005fe
 8001060:	20000602 	.word	0x20000602
 8001064:	20000654 	.word	0x20000654
 8001068:	20000658 	.word	0x20000658
 800106c:	20000610 	.word	0x20000610
 8001070:	200001ec 	.word	0x200001ec
 8001074:	2000060e 	.word	0x2000060e
 8001078:	20000606 	.word	0x20000606
 800107c:	cccccccd 	.word	0xcccccccd
 8001080:	2000060f 	.word	0x2000060f
 8001084:	0800719c 	.word	0x0800719c
 8001088:	080071a8 	.word	0x080071a8
							if(!timeout2){
 800108c:	4ba4      	ldr	r3, [pc, #656]	; (8001320 <recibirmensaje+0xadc>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	f040 80b0 	bne.w	80011f6 <recibirmensaje+0x9b2>
								decoCIPSEND=0;
 8001096:	4ba3      	ldr	r3, [pc, #652]	; (8001324 <recibirmensaje+0xae0>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
								indRX_R=indRX_W;
 800109c:	4ba2      	ldr	r3, [pc, #648]	; (8001328 <recibirmensaje+0xae4>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4ba2      	ldr	r3, [pc, #648]	; (800132c <recibirmensaje+0xae8>)
 80010a4:	701a      	strb	r2, [r3, #0]
								coincidencias = 0;
 80010a6:	4ba2      	ldr	r3, [pc, #648]	; (8001330 <recibirmensaje+0xaec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
								readyToSend=1;
 80010ac:	4aa1      	ldr	r2, [pc, #644]	; (8001334 <recibirmensaje+0xaf0>)
 80010ae:	7813      	ldrb	r3, [r2, #0]
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	7013      	strb	r3, [r2, #0]
								espReadyToRecieve=0;
 80010b6:	4a9f      	ldr	r2, [pc, #636]	; (8001334 <recibirmensaje+0xaf0>)
 80010b8:	7813      	ldrb	r3, [r2, #0]
 80010ba:	f36f 1345 	bfc	r3, #5, #1
 80010be:	7013      	strb	r3, [r2, #0]
								sendALIVE=0;
 80010c0:	4a9d      	ldr	r2, [pc, #628]	; (8001338 <recibirmensaje+0xaf4>)
 80010c2:	7813      	ldrb	r3, [r2, #0]
 80010c4:	f36f 0341 	bfc	r3, #1, #1
 80010c8:	7013      	strb	r3, [r2, #0]
								timeToSendAlive=30;
 80010ca:	4b9c      	ldr	r3, [pc, #624]	; (800133c <recibirmensaje+0xaf8>)
 80010cc:	221e      	movs	r2, #30
 80010ce:	701a      	strb	r2, [r3, #0]
								break;
 80010d0:	e096      	b.n	8001200 <recibirmensaje+0x9bc>
				case 6:
					if(buf_rx[indRX_R]==bytesToSend-bytesToSend_aux+'0'){
 80010d2:	4b96      	ldr	r3, [pc, #600]	; (800132c <recibirmensaje+0xae8>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	4b99      	ldr	r3, [pc, #612]	; (8001340 <recibirmensaje+0xafc>)
 80010dc:	5c9b      	ldrb	r3, [r3, r2]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b98      	ldr	r3, [pc, #608]	; (8001344 <recibirmensaje+0xb00>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	4b97      	ldr	r3, [pc, #604]	; (8001348 <recibirmensaje+0xb04>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	1acb      	subs	r3, r1, r3
 80010ee:	3330      	adds	r3, #48	; 0x30
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d106      	bne.n	8001102 <recibirmensaje+0x8be>
						decoCIPSEND++;
 80010f4:	4b8b      	ldr	r3, [pc, #556]	; (8001324 <recibirmensaje+0xae0>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b89      	ldr	r3, [pc, #548]	; (8001324 <recibirmensaje+0xae0>)
 80010fe:	701a      	strb	r2, [r3, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 8001100:	e07b      	b.n	80011fa <recibirmensaje+0x9b6>
						if(!timeout2){
 8001102:	4b87      	ldr	r3, [pc, #540]	; (8001320 <recibirmensaje+0xadc>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d177      	bne.n	80011fa <recibirmensaje+0x9b6>
							decoCIPSEND=0;
 800110a:	4b86      	ldr	r3, [pc, #536]	; (8001324 <recibirmensaje+0xae0>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 8001110:	4b85      	ldr	r3, [pc, #532]	; (8001328 <recibirmensaje+0xae4>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b85      	ldr	r3, [pc, #532]	; (800132c <recibirmensaje+0xae8>)
 8001118:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <recibirmensaje+0xaec>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8001120:	4a84      	ldr	r2, [pc, #528]	; (8001334 <recibirmensaje+0xaf0>)
 8001122:	7813      	ldrb	r3, [r2, #0]
 8001124:	f043 0310 	orr.w	r3, r3, #16
 8001128:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 800112a:	4a82      	ldr	r2, [pc, #520]	; (8001334 <recibirmensaje+0xaf0>)
 800112c:	7813      	ldrb	r3, [r2, #0]
 800112e:	f36f 1345 	bfc	r3, #5, #1
 8001132:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 8001134:	4a80      	ldr	r2, [pc, #512]	; (8001338 <recibirmensaje+0xaf4>)
 8001136:	7813      	ldrb	r3, [r2, #0]
 8001138:	f36f 0341 	bfc	r3, #1, #1
 800113c:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 800113e:	4b7f      	ldr	r3, [pc, #508]	; (800133c <recibirmensaje+0xaf8>)
 8001140:	221e      	movs	r2, #30
 8001142:	701a      	strb	r2, [r3, #0]
							break;
 8001144:	e05c      	b.n	8001200 <recibirmensaje+0x9bc>
				case 7:
					if(buf_rx[indRX_R]==CIPSEND4[coincidencias]){
 8001146:	4b79      	ldr	r3, [pc, #484]	; (800132c <recibirmensaje+0xae8>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	4b7c      	ldr	r3, [pc, #496]	; (8001340 <recibirmensaje+0xafc>)
 8001150:	5c9b      	ldrb	r3, [r3, r2]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b76      	ldr	r3, [pc, #472]	; (8001330 <recibirmensaje+0xaec>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4b7c      	ldr	r3, [pc, #496]	; (800134c <recibirmensaje+0xb08>)
 800115c:	5c5b      	ldrb	r3, [r3, r1]
 800115e:	429a      	cmp	r2, r3
 8001160:	d11d      	bne.n	800119e <recibirmensaje+0x95a>
						coincidencias++;
 8001162:	4b73      	ldr	r3, [pc, #460]	; (8001330 <recibirmensaje+0xaec>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b71      	ldr	r3, [pc, #452]	; (8001330 <recibirmensaje+0xaec>)
 800116c:	701a      	strb	r2, [r3, #0]

						if(coincidencias>17){
 800116e:	4b70      	ldr	r3, [pc, #448]	; (8001330 <recibirmensaje+0xaec>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b11      	cmp	r3, #17
 8001174:	d943      	bls.n	80011fe <recibirmensaje+0x9ba>
							coincidencias = 0;
 8001176:	4b6e      	ldr	r3, [pc, #440]	; (8001330 <recibirmensaje+0xaec>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
							decoCIPSEND=0;
 800117c:	4b69      	ldr	r3, [pc, #420]	; (8001324 <recibirmensaje+0xae0>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
							AT=8;
 8001182:	4b73      	ldr	r3, [pc, #460]	; (8001350 <recibirmensaje+0xb0c>)
 8001184:	2208      	movs	r2, #8
 8001186:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 8001188:	4a6a      	ldr	r2, [pc, #424]	; (8001334 <recibirmensaje+0xaf0>)
 800118a:	7813      	ldrb	r3, [r2, #0]
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 8001192:	4a68      	ldr	r2, [pc, #416]	; (8001334 <recibirmensaje+0xaf0>)
 8001194:	7813      	ldrb	r3, [r2, #0]
 8001196:	f36f 1345 	bfc	r3, #5, #1
 800119a:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
							timeToSendAlive=30;
							break;
						}
					}
				break;
 800119c:	e02f      	b.n	80011fe <recibirmensaje+0x9ba>
						if(!timeout2){
 800119e:	4b60      	ldr	r3, [pc, #384]	; (8001320 <recibirmensaje+0xadc>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d12b      	bne.n	80011fe <recibirmensaje+0x9ba>
							decoCIPSEND=0;
 80011a6:	4b5f      	ldr	r3, [pc, #380]	; (8001324 <recibirmensaje+0xae0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
 80011ac:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <recibirmensaje+0xae4>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b5e      	ldr	r3, [pc, #376]	; (800132c <recibirmensaje+0xae8>)
 80011b4:	701a      	strb	r2, [r3, #0]
							coincidencias = 0;
 80011b6:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <recibirmensaje+0xaec>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
							readyToSend=1;
 80011bc:	4a5d      	ldr	r2, [pc, #372]	; (8001334 <recibirmensaje+0xaf0>)
 80011be:	7813      	ldrb	r3, [r2, #0]
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	7013      	strb	r3, [r2, #0]
							espReadyToRecieve=0;
 80011c6:	4a5b      	ldr	r2, [pc, #364]	; (8001334 <recibirmensaje+0xaf0>)
 80011c8:	7813      	ldrb	r3, [r2, #0]
 80011ca:	f36f 1345 	bfc	r3, #5, #1
 80011ce:	7013      	strb	r3, [r2, #0]
							sendALIVE=0;
 80011d0:	4a59      	ldr	r2, [pc, #356]	; (8001338 <recibirmensaje+0xaf4>)
 80011d2:	7813      	ldrb	r3, [r2, #0]
 80011d4:	f36f 0341 	bfc	r3, #1, #1
 80011d8:	7013      	strb	r3, [r2, #0]
							timeToSendAlive=30;
 80011da:	4b58      	ldr	r3, [pc, #352]	; (800133c <recibirmensaje+0xaf8>)
 80011dc:	221e      	movs	r2, #30
 80011de:	701a      	strb	r2, [r3, #0]
							break;
 80011e0:	e00e      	b.n	8001200 <recibirmensaje+0x9bc>
				break;
 80011e2:	bf00      	nop
 80011e4:	e160      	b.n	80014a8 <recibirmensaje+0xc64>
				break;
 80011e6:	bf00      	nop
 80011e8:	e15e      	b.n	80014a8 <recibirmensaje+0xc64>
				break;
 80011ea:	bf00      	nop
 80011ec:	e15c      	b.n	80014a8 <recibirmensaje+0xc64>
				break;
 80011ee:	bf00      	nop
 80011f0:	e15a      	b.n	80014a8 <recibirmensaje+0xc64>
				break;
 80011f2:	bf00      	nop
 80011f4:	e158      	b.n	80014a8 <recibirmensaje+0xc64>
				break;
 80011f6:	bf00      	nop
 80011f8:	e156      	b.n	80014a8 <recibirmensaje+0xc64>
				break;
 80011fa:	bf00      	nop
 80011fc:	e154      	b.n	80014a8 <recibirmensaje+0xc64>
				break;
 80011fe:	bf00      	nop
			}
		break;
 8001200:	e152      	b.n	80014a8 <recibirmensaje+0xc64>
		case 8:
			switch(decoIPD){
 8001202:	4b54      	ldr	r3, [pc, #336]	; (8001354 <recibirmensaje+0xb10>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b05      	cmp	r3, #5
 8001208:	f200 8150 	bhi.w	80014ac <recibirmensaje+0xc68>
 800120c:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <recibirmensaje+0x9d0>)
 800120e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001212:	bf00      	nop
 8001214:	0800122d 	.word	0x0800122d
 8001218:	0800128f 	.word	0x0800128f
 800121c:	080012b1 	.word	0x080012b1
 8001220:	08001365 	.word	0x08001365
 8001224:	0800139f 	.word	0x0800139f
 8001228:	080013f1 	.word	0x080013f1
				case 0:
					if(buf_rx[indRX_R]==IPD[coincidencias]){
 800122c:	4b3f      	ldr	r3, [pc, #252]	; (800132c <recibirmensaje+0xae8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	4b42      	ldr	r3, [pc, #264]	; (8001340 <recibirmensaje+0xafc>)
 8001236:	5c9b      	ldrb	r3, [r3, r2]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <recibirmensaje+0xaec>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	4b45      	ldr	r3, [pc, #276]	; (8001358 <recibirmensaje+0xb14>)
 8001242:	5c5b      	ldrb	r3, [r3, r1]
 8001244:	429a      	cmp	r2, r3
 8001246:	d114      	bne.n	8001272 <recibirmensaje+0xa2e>
						coincidencias++;
 8001248:	4b39      	ldr	r3, [pc, #228]	; (8001330 <recibirmensaje+0xaec>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b37      	ldr	r3, [pc, #220]	; (8001330 <recibirmensaje+0xaec>)
 8001252:	701a      	strb	r2, [r3, #0]

						if(coincidencias>4){
 8001254:	4b36      	ldr	r3, [pc, #216]	; (8001330 <recibirmensaje+0xaec>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b04      	cmp	r3, #4
 800125a:	f240 8111 	bls.w	8001480 <recibirmensaje+0xc3c>
							coincidencias = 0;
 800125e:	4b34      	ldr	r3, [pc, #208]	; (8001330 <recibirmensaje+0xaec>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
							decoIPD++;
 8001264:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <recibirmensaje+0xb10>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b39      	ldr	r3, [pc, #228]	; (8001354 <recibirmensaje+0xb10>)
 800126e:	701a      	strb	r2, [r3, #0]
							indRX_R=indRX_W;
							coincidencias=0;
							break;
						}
					}
				break;
 8001270:	e106      	b.n	8001480 <recibirmensaje+0xc3c>
						if(coincidencias>0){
 8001272:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <recibirmensaje+0xaec>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8102 	beq.w	8001480 <recibirmensaje+0xc3c>
							indRX_R=indRX_W;
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <recibirmensaje+0xae4>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <recibirmensaje+0xae8>)
 8001284:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <recibirmensaje+0xaec>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
							break;
 800128c:	e0fd      	b.n	800148a <recibirmensaje+0xc46>
				case 1:
					if(buf_rx[indRX_R]==':'){
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <recibirmensaje+0xae8>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <recibirmensaje+0xafc>)
 8001298:	5c9b      	ldrb	r3, [r3, r2]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b3a      	cmp	r3, #58	; 0x3a
 800129e:	f040 80f1 	bne.w	8001484 <recibirmensaje+0xc40>
						decoIPD++;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <recibirmensaje+0xb10>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <recibirmensaje+0xb10>)
 80012ac:	701a      	strb	r2, [r3, #0]
					}
				break;
 80012ae:	e0e9      	b.n	8001484 <recibirmensaje+0xc40>
				case 2:
					if(buf_rx[indRX_R]==UNER[coincidencias]){
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <recibirmensaje+0xae8>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <recibirmensaje+0xafc>)
 80012ba:	5c9b      	ldrb	r3, [r3, r2]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <recibirmensaje+0xaec>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <recibirmensaje+0xb18>)
 80012c6:	5c5b      	ldrb	r3, [r3, r1]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d117      	bne.n	80012fc <recibirmensaje+0xab8>
						coincidencias++;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <recibirmensaje+0xaec>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <recibirmensaje+0xaec>)
 80012d6:	701a      	strb	r2, [r3, #0]

						if(coincidencias>3){
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <recibirmensaje+0xaec>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	f240 80d3 	bls.w	8001488 <recibirmensaje+0xc44>
							coincidencias = 0;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <recibirmensaje+0xaec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
							decoIPD++;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <recibirmensaje+0xb10>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <recibirmensaje+0xb10>)
 80012f2:	701a      	strb	r2, [r3, #0]
							cks='U'^'N'^'E'^'R';
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <recibirmensaje+0xb1c>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
							decoIPD=0;
							break;
						}
					}
				break;
 80012fa:	e0c5      	b.n	8001488 <recibirmensaje+0xc44>
						if(coincidencias>0){
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <recibirmensaje+0xaec>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80c1 	beq.w	8001488 <recibirmensaje+0xc44>
							indRX_R=indRX_W;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <recibirmensaje+0xae4>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <recibirmensaje+0xae8>)
 800130e:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <recibirmensaje+0xaec>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <recibirmensaje+0xb10>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
							break;
 800131c:	e0b5      	b.n	800148a <recibirmensaje+0xc46>
 800131e:	bf00      	nop
 8001320:	2000060a 	.word	0x2000060a
 8001324:	20000606 	.word	0x20000606
 8001328:	200005fd 	.word	0x200005fd
 800132c:	200005fe 	.word	0x200005fe
 8001330:	20000602 	.word	0x20000602
 8001334:	20000654 	.word	0x20000654
 8001338:	20000658 	.word	0x20000658
 800133c:	20000610 	.word	0x20000610
 8001340:	200001ec 	.word	0x200001ec
 8001344:	2000060e 	.word	0x2000060e
 8001348:	2000060f 	.word	0x2000060f
 800134c:	080071b0 	.word	0x080071b0
 8001350:	20000605 	.word	0x20000605
 8001354:	20000608 	.word	0x20000608
 8001358:	080071cc 	.word	0x080071cc
 800135c:	080071d4 	.word	0x080071d4
 8001360:	20000611 	.word	0x20000611
				case 3:
					bytesUNERprotocol=buf_rx[indRX_R];
 8001364:	4b56      	ldr	r3, [pc, #344]	; (80014c0 <recibirmensaje+0xc7c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <recibirmensaje+0xc80>)
 800136e:	5c9b      	ldrb	r3, [r3, r2]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <recibirmensaje+0xc84>)
 8001374:	701a      	strb	r2, [r3, #0]
					decoIPD++;
 8001376:	4b55      	ldr	r3, [pc, #340]	; (80014cc <recibirmensaje+0xc88>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b53      	ldr	r3, [pc, #332]	; (80014cc <recibirmensaje+0xc88>)
 8001380:	701a      	strb	r2, [r3, #0]
					cks^=buf_rx[indRX_R];
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <recibirmensaje+0xc7c>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <recibirmensaje+0xc80>)
 800138c:	5c9b      	ldrb	r3, [r3, r2]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <recibirmensaje+0xc8c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4053      	eors	r3, r2
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <recibirmensaje+0xc8c>)
 800139a:	701a      	strb	r2, [r3, #0]
				break;
 800139c:	e075      	b.n	800148a <recibirmensaje+0xc46>
				case 4:
					if(buf_rx[indRX_R]==':'){
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <recibirmensaje+0xc7c>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <recibirmensaje+0xc80>)
 80013a8:	5c9b      	ldrb	r3, [r3, r2]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b3a      	cmp	r3, #58	; 0x3a
 80013ae:	d113      	bne.n	80013d8 <recibirmensaje+0xb94>
						decoIPD++;
 80013b0:	4b46      	ldr	r3, [pc, #280]	; (80014cc <recibirmensaje+0xc88>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b44      	ldr	r3, [pc, #272]	; (80014cc <recibirmensaje+0xc88>)
 80013ba:	701a      	strb	r2, [r3, #0]
						cks^=buf_rx[indRX_R];
 80013bc:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <recibirmensaje+0xc7c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <recibirmensaje+0xc80>)
 80013c6:	5c9b      	ldrb	r3, [r3, r2]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <recibirmensaje+0xc8c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	4053      	eors	r3, r2
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <recibirmensaje+0xc8c>)
 80013d4:	701a      	strb	r2, [r3, #0]
						indRX_R=indRX_W;
						coincidencias=0;
						decoIPD=0;
						break;
					}
				break;
 80013d6:	e058      	b.n	800148a <recibirmensaje+0xc46>
						indRX_R=indRX_W;
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <recibirmensaje+0xc90>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <recibirmensaje+0xc7c>)
 80013e0:	701a      	strb	r2, [r3, #0]
						coincidencias=0;
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <recibirmensaje+0xc94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
						decoIPD=0;
 80013e8:	4b38      	ldr	r3, [pc, #224]	; (80014cc <recibirmensaje+0xc88>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
						break;
 80013ee:	e04c      	b.n	800148a <recibirmensaje+0xc46>
				case 5:
					if(contByte==1){
 80013f0:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <recibirmensaje+0xc98>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d104      	bne.n	8001402 <recibirmensaje+0xbbe>
						cmdPosInBuf=indRX_R;
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <recibirmensaje+0xc7c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <recibirmensaje+0xc9c>)
 8001400:	701a      	strb	r2, [r3, #0]
					}
					if(contByte<bytesUNERprotocol){
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <recibirmensaje+0xc98>)
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <recibirmensaje+0xc84>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d213      	bcs.n	8001436 <recibirmensaje+0xbf2>
						cks^=buf_rx[indRX_R];
 800140e:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <recibirmensaje+0xc7c>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <recibirmensaje+0xc80>)
 8001418:	5c9b      	ldrb	r3, [r3, r2]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <recibirmensaje+0xc8c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4053      	eors	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <recibirmensaje+0xc8c>)
 8001426:	701a      	strb	r2, [r3, #0]
						contByte++;
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <recibirmensaje+0xc98>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <recibirmensaje+0xc98>)
 8001432:	701a      	strb	r2, [r3, #0]
							contByte=1;
							coincidencias=0;
							decoIPD=0;
						}
					}
				break;
 8001434:	e029      	b.n	800148a <recibirmensaje+0xc46>
						if(cks==buf_rx[indRX_R]){
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <recibirmensaje+0xc7c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <recibirmensaje+0xc80>)
 8001440:	5c9b      	ldrb	r3, [r3, r2]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <recibirmensaje+0xc8c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d10f      	bne.n	800146c <recibirmensaje+0xc28>
							DecodeComands((uint8_t*)&buf_rx, cmdPosInBuf);
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <recibirmensaje+0xc9c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	481c      	ldr	r0, [pc, #112]	; (80014c4 <recibirmensaje+0xc80>)
 8001454:	f000 f94e 	bl	80016f4 <DecodeComands>
							contByte=1;
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <recibirmensaje+0xc98>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <recibirmensaje+0xc94>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <recibirmensaje+0xc88>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
				break;
 800146a:	e00e      	b.n	800148a <recibirmensaje+0xc46>
							contByte=1;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <recibirmensaje+0xc98>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
							coincidencias=0;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <recibirmensaje+0xc94>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
							decoIPD=0;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <recibirmensaje+0xc88>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
				break;
 800147e:	e004      	b.n	800148a <recibirmensaje+0xc46>
				break;
 8001480:	bf00      	nop
 8001482:	e013      	b.n	80014ac <recibirmensaje+0xc68>
				break;
 8001484:	bf00      	nop
 8001486:	e011      	b.n	80014ac <recibirmensaje+0xc68>
				break;
 8001488:	bf00      	nop
			}
		break;
 800148a:	e00f      	b.n	80014ac <recibirmensaje+0xc68>
		default:

		break;
 800148c:	bf00      	nop
 800148e:	e00e      	b.n	80014ae <recibirmensaje+0xc6a>
		break;
 8001490:	bf00      	nop
 8001492:	e00c      	b.n	80014ae <recibirmensaje+0xc6a>
		break;
 8001494:	bf00      	nop
 8001496:	e00a      	b.n	80014ae <recibirmensaje+0xc6a>
		break;
 8001498:	bf00      	nop
 800149a:	e008      	b.n	80014ae <recibirmensaje+0xc6a>
		break;
 800149c:	bf00      	nop
 800149e:	e006      	b.n	80014ae <recibirmensaje+0xc6a>
		break;
 80014a0:	bf00      	nop
 80014a2:	e004      	b.n	80014ae <recibirmensaje+0xc6a>
		break;
 80014a4:	bf00      	nop
 80014a6:	e002      	b.n	80014ae <recibirmensaje+0xc6a>
		break;
 80014a8:	bf00      	nop
 80014aa:	e000      	b.n	80014ae <recibirmensaje+0xc6a>
		break;
 80014ac:	bf00      	nop
	}
	indRX_R++;
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <recibirmensaje+0xc7c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b01      	ldr	r3, [pc, #4]	; (80014c0 <recibirmensaje+0xc7c>)
 80014ba:	701a      	strb	r2, [r3, #0]
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200005fe 	.word	0x200005fe
 80014c4:	200001ec 	.word	0x200001ec
 80014c8:	20000612 	.word	0x20000612
 80014cc:	20000608 	.word	0x20000608
 80014d0:	20000611 	.word	0x20000611
 80014d4:	200005fd 	.word	0x200005fd
 80014d8:	20000602 	.word	0x20000602
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000613 	.word	0x20000613

080014e4 <udpCom>:

void udpCom(uint8_t cmd){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]

	if(readyToSend){
 80014ee:	4b74      	ldr	r3, [pc, #464]	; (80016c0 <udpCom+0x1dc>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80db 	beq.w	80016b4 <udpCom+0x1d0>
		switch(cmd){
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <udpCom+0x26>
 8001504:	2b01      	cmp	r3, #1
 8001506:	d06c      	beq.n	80015e2 <udpCom+0xfe>
					readyToSend = 0;
				}
			break;*/
		}
	}
}
 8001508:	e0d5      	b.n	80016b6 <udpCom+0x1d2>
				if(!espReadyToRecieve){
 800150a:	4b6d      	ldr	r3, [pc, #436]	; (80016c0 <udpCom+0x1dc>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d132      	bne.n	800157e <udpCom+0x9a>
					AT=7;
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <udpCom+0x1e0>)
 800151a:	2207      	movs	r2, #7
 800151c:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],CIPSEND,11);
 800151e:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <udpCom+0x1e4>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4b69      	ldr	r3, [pc, #420]	; (80016cc <udpCom+0x1e8>)
 8001528:	4413      	add	r3, r2
 800152a:	220b      	movs	r2, #11
 800152c:	4968      	ldr	r1, [pc, #416]	; (80016d0 <udpCom+0x1ec>)
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fd54 	bl	8006fdc <memcpy>
					indTX_W+=11;
 8001534:	4b64      	ldr	r3, [pc, #400]	; (80016c8 <udpCom+0x1e4>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	330b      	adds	r3, #11
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b62      	ldr	r3, [pc, #392]	; (80016c8 <udpCom+0x1e4>)
 8001540:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],"8\r\n",3);
 8001542:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <udpCom+0x1e4>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	4b60      	ldr	r3, [pc, #384]	; (80016cc <udpCom+0x1e8>)
 800154c:	4413      	add	r3, r2
 800154e:	2203      	movs	r2, #3
 8001550:	4960      	ldr	r1, [pc, #384]	; (80016d4 <udpCom+0x1f0>)
 8001552:	4618      	mov	r0, r3
 8001554:	f005 fd42 	bl	8006fdc <memcpy>
					indTX_W+=3;
 8001558:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <udpCom+0x1e4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	3303      	adds	r3, #3
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b59      	ldr	r3, [pc, #356]	; (80016c8 <udpCom+0x1e4>)
 8001564:	701a      	strb	r2, [r3, #0]
					bytesToSend=8;
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <udpCom+0x1f4>)
 8001568:	2208      	movs	r2, #8
 800156a:	701a      	strb	r2, [r3, #0]
					timeout2 = 8;
 800156c:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <udpCom+0x1f8>)
 800156e:	2208      	movs	r2, #8
 8001570:	701a      	strb	r2, [r3, #0]
					readyToSend = 0;
 8001572:	4a53      	ldr	r2, [pc, #332]	; (80016c0 <udpCom+0x1dc>)
 8001574:	7813      	ldrb	r3, [r2, #0]
 8001576:	f36f 1304 	bfc	r3, #4, #1
 800157a:	7013      	strb	r3, [r2, #0]
			break;
 800157c:	e09b      	b.n	80016b6 <udpCom+0x1d2>
					memcpy((uint8_t*)&buf_tx[indTX_W],ALIVE,7);
 800157e:	4b52      	ldr	r3, [pc, #328]	; (80016c8 <udpCom+0x1e4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	4b51      	ldr	r3, [pc, #324]	; (80016cc <udpCom+0x1e8>)
 8001588:	4413      	add	r3, r2
 800158a:	4a55      	ldr	r2, [pc, #340]	; (80016e0 <udpCom+0x1fc>)
 800158c:	6810      	ldr	r0, [r2, #0]
 800158e:	6018      	str	r0, [r3, #0]
 8001590:	8891      	ldrh	r1, [r2, #4]
 8001592:	7992      	ldrb	r2, [r2, #6]
 8001594:	8099      	strh	r1, [r3, #4]
 8001596:	719a      	strb	r2, [r3, #6]
					indTX_W+=7;
 8001598:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <udpCom+0x1e4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	3307      	adds	r3, #7
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b49      	ldr	r3, [pc, #292]	; (80016c8 <udpCom+0x1e4>)
 80015a4:	701a      	strb	r2, [r3, #0]
					buf_tx[indTX_W]='U'^'N'^'E'^'R'^0x02^':'^0xF0;
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <udpCom+0x1e4>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <udpCom+0x1e8>)
 80015b0:	21c4      	movs	r1, #196	; 0xc4
 80015b2:	5499      	strb	r1, [r3, r2]
					indTX_W+=1;
 80015b4:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <udpCom+0x1e4>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b42      	ldr	r3, [pc, #264]	; (80016c8 <udpCom+0x1e4>)
 80015c0:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 80015c2:	4a3f      	ldr	r2, [pc, #252]	; (80016c0 <udpCom+0x1dc>)
 80015c4:	7813      	ldrb	r3, [r2, #0]
 80015c6:	f36f 1345 	bfc	r3, #5, #1
 80015ca:	7013      	strb	r3, [r2, #0]
					sendALIVE=0;
 80015cc:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <udpCom+0x200>)
 80015ce:	7813      	ldrb	r3, [r2, #0]
 80015d0:	f36f 0341 	bfc	r3, #1, #1
 80015d4:	7013      	strb	r3, [r2, #0]
					readyToSend = 0;
 80015d6:	4a3a      	ldr	r2, [pc, #232]	; (80016c0 <udpCom+0x1dc>)
 80015d8:	7813      	ldrb	r3, [r2, #0]
 80015da:	f36f 1304 	bfc	r3, #4, #1
 80015de:	7013      	strb	r3, [r2, #0]
			break;
 80015e0:	e069      	b.n	80016b6 <udpCom+0x1d2>
				if(!espReadyToRecieve){
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <udpCom+0x1dc>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d132      	bne.n	8001656 <udpCom+0x172>
					AT=7;
 80015f0:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <udpCom+0x1e0>)
 80015f2:	2207      	movs	r2, #7
 80015f4:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],CIPSEND,11);
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <udpCom+0x1e4>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b33      	ldr	r3, [pc, #204]	; (80016cc <udpCom+0x1e8>)
 8001600:	4413      	add	r3, r2
 8001602:	220b      	movs	r2, #11
 8001604:	4932      	ldr	r1, [pc, #200]	; (80016d0 <udpCom+0x1ec>)
 8001606:	4618      	mov	r0, r3
 8001608:	f005 fce8 	bl	8006fdc <memcpy>
					indTX_W+=11;
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <udpCom+0x1e4>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	330b      	adds	r3, #11
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <udpCom+0x1e4>)
 8001618:	701a      	strb	r2, [r3, #0]
					memcpy((uint8_t*)&buf_tx[indTX_W],"9\r\n",3);
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <udpCom+0x1e4>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <udpCom+0x1e8>)
 8001624:	4413      	add	r3, r2
 8001626:	2203      	movs	r2, #3
 8001628:	492f      	ldr	r1, [pc, #188]	; (80016e8 <udpCom+0x204>)
 800162a:	4618      	mov	r0, r3
 800162c:	f005 fcd6 	bl	8006fdc <memcpy>
					indTX_W+=3;
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <udpCom+0x1e4>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	3303      	adds	r3, #3
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <udpCom+0x1e4>)
 800163c:	701a      	strb	r2, [r3, #0]
					bytesToSend=9;
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <udpCom+0x1f4>)
 8001640:	2209      	movs	r2, #9
 8001642:	701a      	strb	r2, [r3, #0]
					timeout2 = 20;
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <udpCom+0x1f8>)
 8001646:	2214      	movs	r2, #20
 8001648:	701a      	strb	r2, [r3, #0]
					readyToSend = 0;
 800164a:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <udpCom+0x1dc>)
 800164c:	7813      	ldrb	r3, [r2, #0]
 800164e:	f36f 1304 	bfc	r3, #4, #1
 8001652:	7013      	strb	r3, [r2, #0]
			break;
 8001654:	e02f      	b.n	80016b6 <udpCom+0x1d2>
					memcpy((uint8_t*)&buf_tx[indTX_W],ACK_D0,9);
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <udpCom+0x1e4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <udpCom+0x1e8>)
 8001660:	4413      	add	r3, r2
 8001662:	4922      	ldr	r1, [pc, #136]	; (80016ec <udpCom+0x208>)
 8001664:	461a      	mov	r2, r3
 8001666:	460b      	mov	r3, r1
 8001668:	cb03      	ldmia	r3!, {r0, r1}
 800166a:	6010      	str	r0, [r2, #0]
 800166c:	6051      	str	r1, [r2, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	7213      	strb	r3, [r2, #8]
					indTX_W+=9;
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <udpCom+0x1e4>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	3309      	adds	r3, #9
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <udpCom+0x1e4>)
 800167e:	701a      	strb	r2, [r3, #0]
					buf_tx[indTX_W]='U'^'N'^'E'^'R'^0x03^':'^0xD0^0x0D;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <udpCom+0x1e4>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <udpCom+0x1e8>)
 800168a:	21e8      	movs	r1, #232	; 0xe8
 800168c:	5499      	strb	r1, [r3, r2]
					indTX_W+=1;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <udpCom+0x1e4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	3301      	adds	r3, #1
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <udpCom+0x1e4>)
 800169a:	701a      	strb	r2, [r3, #0]
					espReadyToRecieve=0;
 800169c:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <udpCom+0x1dc>)
 800169e:	7813      	ldrb	r3, [r2, #0]
 80016a0:	f36f 1345 	bfc	r3, #5, #1
 80016a4:	7013      	strb	r3, [r2, #0]
					duty++;
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <udpCom+0x20c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <udpCom+0x20c>)
 80016b0:	701a      	strb	r2, [r3, #0]
			break;
 80016b2:	e000      	b.n	80016b6 <udpCom+0x1d2>
	}
 80016b4:	bf00      	nop
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000654 	.word	0x20000654
 80016c4:	20000605 	.word	0x20000605
 80016c8:	200005ff 	.word	0x200005ff
 80016cc:	200002ec 	.word	0x200002ec
 80016d0:	08007190 	.word	0x08007190
 80016d4:	08007020 	.word	0x08007020
 80016d8:	2000060e 	.word	0x2000060e
 80016dc:	2000060a 	.word	0x2000060a
 80016e0:	080071dc 	.word	0x080071dc
 80016e4:	20000658 	.word	0x20000658
 80016e8:	08007024 	.word	0x08007024
 80016ec:	080071e4 	.word	0x080071e4
 80016f0:	20000604 	.word	0x20000604

080016f4 <DecodeComands>:

void DecodeComands(uint8_t *buffer,uint8_t indexCMD){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]

	uint8_t i=1;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]

		switch(buffer[indexCMD]){
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2bf1      	cmp	r3, #241	; 0xf1
 800170e:	d079      	beq.n	8001804 <DecodeComands+0x110>
 8001710:	2bf1      	cmp	r3, #241	; 0xf1
 8001712:	f300 822d 	bgt.w	8001b70 <DecodeComands+0x47c>
 8001716:	2bf0      	cmp	r3, #240	; 0xf0
 8001718:	f000 8145 	beq.w	80019a6 <DecodeComands+0x2b2>
 800171c:	2bf0      	cmp	r3, #240	; 0xf0
 800171e:	f300 8227 	bgt.w	8001b70 <DecodeComands+0x47c>
 8001722:	2bd5      	cmp	r3, #213	; 0xd5
 8001724:	d05b      	beq.n	80017de <DecodeComands+0xea>
 8001726:	2bd5      	cmp	r3, #213	; 0xd5
 8001728:	f300 8222 	bgt.w	8001b70 <DecodeComands+0x47c>
 800172c:	2bc0      	cmp	r3, #192	; 0xc0
 800172e:	dc49      	bgt.n	80017c4 <DecodeComands+0xd0>
 8001730:	2ba1      	cmp	r3, #161	; 0xa1
 8001732:	f2c0 821d 	blt.w	8001b70 <DecodeComands+0x47c>
 8001736:	3ba1      	subs	r3, #161	; 0xa1
 8001738:	2b1f      	cmp	r3, #31
 800173a:	f200 8219 	bhi.w	8001b70 <DecodeComands+0x47c>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <DecodeComands+0x50>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001b6f 	.word	0x08001b6f
 8001748:	08001b71 	.word	0x08001b71
 800174c:	08001b71 	.word	0x08001b71
 8001750:	08001b71 	.word	0x08001b71
 8001754:	08001b61 	.word	0x08001b61
 8001758:	08001b71 	.word	0x08001b71
 800175c:	08001b71 	.word	0x08001b71
 8001760:	08001b71 	.word	0x08001b71
 8001764:	08001b71 	.word	0x08001b71
 8001768:	08001b71 	.word	0x08001b71
 800176c:	08001b71 	.word	0x08001b71
 8001770:	08001b71 	.word	0x08001b71
 8001774:	08001b71 	.word	0x08001b71
 8001778:	08001b71 	.word	0x08001b71
 800177c:	08001b71 	.word	0x08001b71
 8001780:	08001b71 	.word	0x08001b71
 8001784:	08001b71 	.word	0x08001b71
 8001788:	08001b71 	.word	0x08001b71
 800178c:	080017cd 	.word	0x080017cd
 8001790:	08001b71 	.word	0x08001b71
 8001794:	08001b71 	.word	0x08001b71
 8001798:	08001b71 	.word	0x08001b71
 800179c:	08001b71 	.word	0x08001b71
 80017a0:	08001b71 	.word	0x08001b71
 80017a4:	08001b71 	.word	0x08001b71
 80017a8:	08001b71 	.word	0x08001b71
 80017ac:	08001b71 	.word	0x08001b71
 80017b0:	08001b71 	.word	0x08001b71
 80017b4:	08001b71 	.word	0x08001b71
 80017b8:	08001b71 	.word	0x08001b71
 80017bc:	08001b71 	.word	0x08001b71
 80017c0:	0800187f 	.word	0x0800187f
 80017c4:	2bd0      	cmp	r3, #208	; 0xd0
 80017c6:	f000 810b 	beq.w	80019e0 <DecodeComands+0x2ec>
			case 0xA5: //Calibrar ADC
				calibADC = 1;
				CALIBRADO =0;
			break;
		}
}
 80017ca:	e1d1      	b.n	8001b70 <DecodeComands+0x47c>
					comandoActual=0xB3;
 80017cc:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <DecodeComands+0x2c8>)
 80017ce:	22b3      	movs	r2, #179	; 0xb3
 80017d0:	701a      	strb	r2, [r3, #0]
					stop=1;
 80017d2:	4a7b      	ldr	r2, [pc, #492]	; (80019c0 <DecodeComands+0x2cc>)
 80017d4:	7813      	ldrb	r3, [r2, #0]
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	7013      	strb	r3, [r2, #0]
			break;
 80017dc:	e1c8      	b.n	8001b70 <DecodeComands+0x47c>
					PWM_motor2.u32=200;
 80017de:	4b79      	ldr	r3, [pc, #484]	; (80019c4 <DecodeComands+0x2d0>)
 80017e0:	22c8      	movs	r2, #200	; 0xc8
 80017e2:	601a      	str	r2, [r3, #0]
					PWM_motor1.u32=200;
 80017e4:	4b78      	ldr	r3, [pc, #480]	; (80019c8 <DecodeComands+0x2d4>)
 80017e6:	22c8      	movs	r2, #200	; 0xc8
 80017e8:	601a      	str	r2, [r3, #0]
					race=1;
 80017ea:	4a75      	ldr	r2, [pc, #468]	; (80019c0 <DecodeComands+0x2cc>)
 80017ec:	7813      	ldrb	r3, [r2, #0]
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	7013      	strb	r3, [r2, #0]
					timeoutPID=2;
 80017f4:	4b75      	ldr	r3, [pc, #468]	; (80019cc <DecodeComands+0x2d8>)
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
					calcPID(200,200);
 80017fa:	21c8      	movs	r1, #200	; 0xc8
 80017fc:	20c8      	movs	r0, #200	; 0xc8
 80017fe:	f000 fb0b 	bl	8001e18 <calcPID>
			break;
 8001802:	e1b5      	b.n	8001b70 <DecodeComands+0x47c>
					PWM_motor1.u8[0]=buffer[indexCMD+i];
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	4413      	add	r3, r2
 800180a:	461a      	mov	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	781a      	ldrb	r2, [r3, #0]
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <DecodeComands+0x2d4>)
 8001814:	701a      	strb	r2, [r3, #0]
					i++;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	3301      	adds	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[1]=buffer[indexCMD+i];
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	4413      	add	r3, r2
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <DecodeComands+0x2d4>)
 800182c:	705a      	strb	r2, [r3, #1]
					i++;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	3301      	adds	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[2]=buffer[indexCMD+i];
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	4413      	add	r3, r2
 800183a:	461a      	mov	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <DecodeComands+0x2d4>)
 8001844:	709a      	strb	r2, [r3, #2]
					i++;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	3301      	adds	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[3]=buffer[indexCMD+i];
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	4413      	add	r3, r2
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <DecodeComands+0x2d4>)
 800185c:	70da      	strb	r2, [r3, #3]
					PWM_motor2.u32=PWM_motor1.u32;
 800185e:	4b5a      	ldr	r3, [pc, #360]	; (80019c8 <DecodeComands+0x2d4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <DecodeComands+0x2d0>)
 8001864:	6013      	str	r3, [r2, #0]
					comandoActual=0xF1;
 8001866:	4b55      	ldr	r3, [pc, #340]	; (80019bc <DecodeComands+0x2c8>)
 8001868:	22f1      	movs	r2, #241	; 0xf1
 800186a:	701a      	strb	r2, [r3, #0]
					race=1;
 800186c:	4a54      	ldr	r2, [pc, #336]	; (80019c0 <DecodeComands+0x2cc>)
 800186e:	7813      	ldrb	r3, [r2, #0]
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	7013      	strb	r3, [r2, #0]
					timeoutPID=2;
 8001876:	4b55      	ldr	r3, [pc, #340]	; (80019cc <DecodeComands+0x2d8>)
 8001878:	2202      	movs	r2, #2
 800187a:	701a      	strb	r2, [r3, #0]
			break;
 800187c:	e178      	b.n	8001b70 <DecodeComands+0x47c>
					Kp.u8[0]=buffer[indexCMD+i];
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	4413      	add	r3, r2
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <DecodeComands+0x2dc>)
 800188e:	701a      	strb	r2, [r3, #0]
					i++;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	3301      	adds	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
					Kp.u8[1]=buffer[indexCMD+i];
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	4413      	add	r3, r2
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <DecodeComands+0x2dc>)
 80018a6:	705a      	strb	r2, [r3, #1]
					i++;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	3301      	adds	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
					Kp.u8[2]=buffer[indexCMD+i];
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	4413      	add	r3, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <DecodeComands+0x2dc>)
 80018be:	709a      	strb	r2, [r3, #2]
					i++;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	3301      	adds	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
					Kp.u8[3]=buffer[indexCMD+i];
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	4413      	add	r3, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	781a      	ldrb	r2, [r3, #0]
 80018d4:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <DecodeComands+0x2dc>)
 80018d6:	70da      	strb	r2, [r3, #3]
					i++;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	3301      	adds	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
					Kp.u8[0]=buffer[indexCMD+i];
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	4413      	add	r3, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <DecodeComands+0x2dc>)
 80018ee:	701a      	strb	r2, [r3, #0]
					i++;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	3301      	adds	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
					Kd.u8[1]=buffer[indexCMD+i];
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	4413      	add	r3, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <DecodeComands+0x2e0>)
 8001906:	705a      	strb	r2, [r3, #1]
					i++;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	3301      	adds	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
					Kd.u8[2]=buffer[indexCMD+i];
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	4413      	add	r3, r2
 8001914:	461a      	mov	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <DecodeComands+0x2e0>)
 800191e:	709a      	strb	r2, [r3, #2]
					i++;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	3301      	adds	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
					Kd.u8[3]=buffer[indexCMD+i];
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	4413      	add	r3, r2
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <DecodeComands+0x2e0>)
 8001936:	70da      	strb	r2, [r3, #3]
					i++;
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	3301      	adds	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
					Ki.u8[0]=buffer[indexCMD+i];
 800193e:	78fa      	ldrb	r2, [r7, #3]
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	4413      	add	r3, r2
 8001944:	461a      	mov	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	781a      	ldrb	r2, [r3, #0]
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <DecodeComands+0x2e4>)
 800194e:	701a      	strb	r2, [r3, #0]
					i++;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	3301      	adds	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
					Ki.u8[1]=buffer[indexCMD+i];
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	4413      	add	r3, r2
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <DecodeComands+0x2e4>)
 8001966:	705a      	strb	r2, [r3, #1]
					i++;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	3301      	adds	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
					Ki.u8[2]=buffer[indexCMD+i];
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	4413      	add	r3, r2
 8001974:	461a      	mov	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <DecodeComands+0x2e4>)
 800197e:	709a      	strb	r2, [r3, #2]
					i++;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	3301      	adds	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
					Ki.u8[3]=buffer[indexCMD+i];
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	4413      	add	r3, r2
 800198c:	461a      	mov	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <DecodeComands+0x2e4>)
 8001996:	70da      	strb	r2, [r3, #3]
					i++;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	3301      	adds	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
					comandoActual=0xC0;
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <DecodeComands+0x2c8>)
 80019a0:	22c0      	movs	r2, #192	; 0xc0
 80019a2:	701a      	strb	r2, [r3, #0]
			break;
 80019a4:	e0e4      	b.n	8001b70 <DecodeComands+0x47c>
					sendALIVE=1;
 80019a6:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <DecodeComands+0x2e8>)
 80019a8:	7813      	ldrb	r3, [r2, #0]
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	7013      	strb	r3, [r2, #0]
					readyToSend=1;
 80019b0:	4a03      	ldr	r2, [pc, #12]	; (80019c0 <DecodeComands+0x2cc>)
 80019b2:	7813      	ldrb	r3, [r2, #0]
 80019b4:	f043 0310 	orr.w	r3, r3, #16
 80019b8:	7013      	strb	r3, [r2, #0]
			break;
 80019ba:	e0d9      	b.n	8001b70 <DecodeComands+0x47c>
 80019bc:	20000614 	.word	0x20000614
 80019c0:	20000654 	.word	0x20000654
 80019c4:	2000061c 	.word	0x2000061c
 80019c8:	20000618 	.word	0x20000618
 80019cc:	2000060c 	.word	0x2000060c
 80019d0:	20000648 	.word	0x20000648
 80019d4:	2000064c 	.word	0x2000064c
 80019d8:	20000650 	.word	0x20000650
 80019dc:	20000658 	.word	0x20000658
					PWM_motor1.u8[0]=buffer[indexCMD+i];
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	4413      	add	r3, r2
 80019e6:	461a      	mov	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	4b62      	ldr	r3, [pc, #392]	; (8001b78 <DecodeComands+0x484>)
 80019f0:	701a      	strb	r2, [r3, #0]
					i++;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	3301      	adds	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[1]=buffer[indexCMD+i];
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	4413      	add	r3, r2
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	781a      	ldrb	r2, [r3, #0]
 8001a06:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <DecodeComands+0x484>)
 8001a08:	705a      	strb	r2, [r3, #1]
					i++;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[2]=buffer[indexCMD+i];
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	4413      	add	r3, r2
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <DecodeComands+0x484>)
 8001a20:	709a      	strb	r2, [r3, #2]
					i++;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	3301      	adds	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
					PWM_motor1.u8[3]=buffer[indexCMD+i];
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <DecodeComands+0x484>)
 8001a38:	70da      	strb	r2, [r3, #3]
					i++;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[0]=buffer[indexCMD+i];
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	4413      	add	r3, r2
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <DecodeComands+0x488>)
 8001a50:	701a      	strb	r2, [r3, #0]
					i++;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	3301      	adds	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[1]=buffer[indexCMD+i];
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	4b45      	ldr	r3, [pc, #276]	; (8001b7c <DecodeComands+0x488>)
 8001a68:	705a      	strb	r2, [r3, #1]
					i++;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[2]=buffer[indexCMD+i];
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	4413      	add	r3, r2
 8001a76:	461a      	mov	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <DecodeComands+0x488>)
 8001a80:	709a      	strb	r2, [r3, #2]
					i++;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	3301      	adds	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
					PWM_motor2.u8[3]=buffer[indexCMD+i];
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <DecodeComands+0x488>)
 8001a98:	70da      	strb	r2, [r3, #3]
					i++;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[0]=buffer[indexCMD+i];
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <DecodeComands+0x48c>)
 8001ab0:	701a      	strb	r2, [r3, #0]
					i++;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[1]=buffer[indexCMD+i];
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	4413      	add	r3, r2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <DecodeComands+0x48c>)
 8001ac8:	705a      	strb	r2, [r3, #1]
					i++;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	3301      	adds	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[2]=buffer[indexCMD+i];
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <DecodeComands+0x48c>)
 8001ae0:	709a      	strb	r2, [r3, #2]
					i++;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
					jobTime.u8[3]=buffer[indexCMD+i];
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	4413      	add	r3, r2
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <DecodeComands+0x48c>)
 8001af8:	70da      	strb	r2, [r3, #3]
					i++;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	3301      	adds	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
					jobTime.u32=jobTime.u32/100;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <DecodeComands+0x48c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <DecodeComands+0x490>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <DecodeComands+0x48c>)
 8001b0e:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <DecodeComands+0x494>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,PWM_motor1.u32);
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <DecodeComands+0x494>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <DecodeComands+0x484>)
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,PWM_motor2.u32);
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <DecodeComands+0x494>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <DecodeComands+0x488>)
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <DecodeComands+0x494>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
					race=1;
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <DecodeComands+0x498>)
 8001b36:	7813      	ldrb	r3, [r2, #0]
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	7013      	strb	r3, [r2, #0]
					killRace=1;
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <DecodeComands+0x498>)
 8001b40:	7813      	ldrb	r3, [r2, #0]
 8001b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b46:	7013      	strb	r3, [r2, #0]
					duty=2;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <DecodeComands+0x49c>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
					comandoActual=0xD0;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <DecodeComands+0x4a0>)
 8001b50:	22d0      	movs	r2, #208	; 0xd0
 8001b52:	701a      	strb	r2, [r3, #0]
					readyToSend=1;
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <DecodeComands+0x498>)
 8001b56:	7813      	ldrb	r3, [r2, #0]
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	7013      	strb	r3, [r2, #0]
			break;
 8001b5e:	e007      	b.n	8001b70 <DecodeComands+0x47c>
				calibADC = 1;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <DecodeComands+0x4a4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
				CALIBRADO =0;
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <DecodeComands+0x4a8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
			break;
 8001b6c:	e000      	b.n	8001b70 <DecodeComands+0x47c>
		break;
 8001b6e:	bf00      	nop
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000618 	.word	0x20000618
 8001b7c:	2000061c 	.word	0x2000061c
 8001b80:	20000620 	.word	0x20000620
 8001b84:	51eb851f 	.word	0x51eb851f
 8001b88:	200000d4 	.word	0x200000d4
 8001b8c:	20000654 	.word	0x20000654
 8001b90:	20000604 	.word	0x20000604
 8001b94:	20000614 	.word	0x20000614
 8001b98:	20000001 	.word	0x20000001
 8001b9c:	20000615 	.word	0x20000615

08001ba0 <findLine>:
uint8_t posMINCenter=0,posMINRight=0,posMINLeft=0;
uint16_t sensorValue=0;
float xMin=0,fx2_fx3,fx2_fx1,x2_x1,x2_x3,x2_x1cuad,x2_x3cuad,denominador, numerador, cuenta;
uint8_t f=0;

void findLine(_sWork *BUFADC){
 8001ba0:	b480      	push	{r7}
 8001ba2:	b08d      	sub	sp, #52	; 0x34
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

	float aux[10];

		sensorValue = BUFADC[0].i32;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4b89      	ldr	r3, [pc, #548]	; (8001dd4 <findLine+0x234>)
 8001bb0:	801a      	strh	r2, [r3, #0]


		posMINCenter=1;
 8001bb2:	4b89      	ldr	r3, [pc, #548]	; (8001dd8 <findLine+0x238>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
		while(f<8){					//ENCUENTRO LA MENOR LECTURA
 8001bb8:	e032      	b.n	8001c20 <findLine+0x80>
			if(sensorValue > BUFADC[f].i32){
 8001bba:	4b86      	ldr	r3, [pc, #536]	; (8001dd4 <findLine+0x234>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4b86      	ldr	r3, [pc, #536]	; (8001ddc <findLine+0x23c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4299      	cmp	r1, r3
 8001bce:	dd0e      	ble.n	8001bee <findLine+0x4e>
				sensorValue=BUFADC[f].i32;
 8001bd0:	4b82      	ldr	r3, [pc, #520]	; (8001ddc <findLine+0x23c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b7d      	ldr	r3, [pc, #500]	; (8001dd4 <findLine+0x234>)
 8001be0:	801a      	strh	r2, [r3, #0]
				posMINCenter=f+1;
 8001be2:	4b7e      	ldr	r3, [pc, #504]	; (8001ddc <findLine+0x23c>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b7b      	ldr	r3, [pc, #492]	; (8001dd8 <findLine+0x238>)
 8001bec:	701a      	strb	r2, [r3, #0]
			}
			aux[f+1]=BUFADC[f].i32;
 8001bee:	4b7b      	ldr	r3, [pc, #492]	; (8001ddc <findLine+0x23c>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <findLine+0x23c>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	ee07 2a90 	vmov	s15, r2
 8001c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	3330      	adds	r3, #48	; 0x30
 8001c0c:	443b      	add	r3, r7
 8001c0e:	3b28      	subs	r3, #40	; 0x28
 8001c10:	edc3 7a00 	vstr	s15, [r3]
			f++;
 8001c14:	4b71      	ldr	r3, [pc, #452]	; (8001ddc <findLine+0x23c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <findLine+0x23c>)
 8001c1e:	701a      	strb	r2, [r3, #0]
		while(f<8){					//ENCUENTRO LA MENOR LECTURA
 8001c20:	4b6e      	ldr	r3, [pc, #440]	; (8001ddc <findLine+0x23c>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b07      	cmp	r3, #7
 8001c26:	d9c8      	bls.n	8001bba <findLine+0x1a>
		}
		f=0;
 8001c28:	4b6c      	ldr	r3, [pc, #432]	; (8001ddc <findLine+0x23c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
		//posMINCenter+=1;
		aux[0]=aux[2];
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	60bb      	str	r3, [r7, #8]
		aux[9]=aux[7];
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c

		posMINRight=posMINCenter+1;
 8001c36:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <findLine+0x238>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <findLine+0x240>)
 8001c40:	701a      	strb	r2, [r3, #0]
		posMINLeft=posMINCenter-1;
 8001c42:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <findLine+0x238>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <findLine+0x244>)
 8001c4c:	701a      	strb	r2, [r3, #0]

		fx2_fx3=aux[posMINCenter]-aux[posMINRight];
 8001c4e:	4b62      	ldr	r3, [pc, #392]	; (8001dd8 <findLine+0x238>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	3330      	adds	r3, #48	; 0x30
 8001c56:	443b      	add	r3, r7
 8001c58:	3b28      	subs	r3, #40	; 0x28
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	4b60      	ldr	r3, [pc, #384]	; (8001de0 <findLine+0x240>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	3330      	adds	r3, #48	; 0x30
 8001c66:	443b      	add	r3, r7
 8001c68:	3b28      	subs	r3, #40	; 0x28
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c72:	4b5d      	ldr	r3, [pc, #372]	; (8001de8 <findLine+0x248>)
 8001c74:	edc3 7a00 	vstr	s15, [r3]
		fx2_fx1=aux[posMINCenter]-aux[posMINLeft];
 8001c78:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <findLine+0x238>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	3330      	adds	r3, #48	; 0x30
 8001c80:	443b      	add	r3, r7
 8001c82:	3b28      	subs	r3, #40	; 0x28
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <findLine+0x244>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	3330      	adds	r3, #48	; 0x30
 8001c90:	443b      	add	r3, r7
 8001c92:	3b28      	subs	r3, #40	; 0x28
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <findLine+0x24c>)
 8001c9e:	edc3 7a00 	vstr	s15, [r3]

		x2_x1=COORD_SENSORES[posMINCenter]-COORD_SENSORES[posMINLeft];
 8001ca2:	4b4d      	ldr	r3, [pc, #308]	; (8001dd8 <findLine+0x238>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <findLine+0x250>)
 8001caa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001cae:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <findLine+0x244>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	; (8001df0 <findLine+0x250>)
 8001cb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	4b4b      	ldr	r3, [pc, #300]	; (8001df4 <findLine+0x254>)
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
		x2_x1cuad=(x2_x1*x2_x1);
 8001cca:	4b4a      	ldr	r3, [pc, #296]	; (8001df4 <findLine+0x254>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <findLine+0x254>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <findLine+0x258>)
 8001cdc:	edc3 7a00 	vstr	s15, [r3]
		x2_x3=COORD_SENSORES[posMINCenter]-COORD_SENSORES[posMINRight];
 8001ce0:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <findLine+0x238>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <findLine+0x250>)
 8001ce8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001cec:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <findLine+0x240>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <findLine+0x250>)
 8001cf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d02:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <findLine+0x25c>)
 8001d04:	edc3 7a00 	vstr	s15, [r3]
		x2_x3cuad=(x2_x3*x2_x3);
 8001d08:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <findLine+0x25c>)
 8001d0a:	ed93 7a00 	vldr	s14, [r3]
 8001d0e:	4b3b      	ldr	r3, [pc, #236]	; (8001dfc <findLine+0x25c>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <findLine+0x260>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]

		numerador=((x2_x1cuad*fx2_fx3) - (x2_x3cuad*fx2_fx1));
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <findLine+0x258>)
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <findLine+0x248>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2e:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <findLine+0x260>)
 8001d30:	edd3 6a00 	vldr	s13, [r3]
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <findLine+0x24c>)
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d42:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <findLine+0x264>)
 8001d44:	edc3 7a00 	vstr	s15, [r3]
		denominador=(2*((x2_x1*fx2_fx3)-(x2_x3*fx2_fx1)));
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <findLine+0x254>)
 8001d4a:	ed93 7a00 	vldr	s14, [r3]
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <findLine+0x248>)
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <findLine+0x25c>)
 8001d5a:	edd3 6a00 	vldr	s13, [r3]
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <findLine+0x24c>)
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <findLine+0x268>)
 8001d72:	edc3 7a00 	vstr	s15, [r3]
		cuenta=numerador / denominador;
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <findLine+0x264>)
 8001d78:	edd3 6a00 	vldr	s13, [r3]
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <findLine+0x268>)
 8001d7e:	ed93 7a00 	vldr	s14, [r3]
 8001d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <findLine+0x26c>)
 8001d88:	edc3 7a00 	vstr	s15, [r3]
		if(denominador!=0){
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <findLine+0x268>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d015      	beq.n	8001dc8 <findLine+0x228>
			xMin=COORD_SENSORES[posMINCenter]-cuenta;
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <findLine+0x238>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <findLine+0x250>)
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <findLine+0x26c>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <findLine+0x270>)
 8001dbc:	edc3 7a00 	vstr	s15, [r3]
			error.f=xMin;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <findLine+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <findLine+0x274>)
 8001dc6:	6013      	str	r3, [r2, #0]
		}
		//return -xMin;

}
 8001dc8:	bf00      	nop
 8001dca:	3734      	adds	r7, #52	; 0x34
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20000694 	.word	0x20000694
 8001dd8:	20000690 	.word	0x20000690
 8001ddc:	200006c0 	.word	0x200006c0
 8001de0:	20000691 	.word	0x20000691
 8001de4:	20000692 	.word	0x20000692
 8001de8:	2000069c 	.word	0x2000069c
 8001dec:	200006a0 	.word	0x200006a0
 8001df0:	080071f0 	.word	0x080071f0
 8001df4:	200006a4 	.word	0x200006a4
 8001df8:	200006ac 	.word	0x200006ac
 8001dfc:	200006a8 	.word	0x200006a8
 8001e00:	200006b0 	.word	0x200006b0
 8001e04:	200006b8 	.word	0x200006b8
 8001e08:	200006b4 	.word	0x200006b4
 8001e0c:	200006bc 	.word	0x200006bc
 8001e10:	20000698 	.word	0x20000698
 8001e14:	20000624 	.word	0x20000624

08001e18 <calcPID>:

void calcPID(uint32_t pwmBase1,uint32_t pwmBase2){
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]

	float pwm1,pwm2;

		integral+=error.f;
 8001e22:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <calcPID+0x134>)
 8001e24:	ed93 7a00 	vldr	s14, [r3]
 8001e28:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <calcPID+0x138>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <calcPID+0x138>)
 8001e34:	edc3 7a00 	vstr	s15, [r3]

		if(integral > 1000){
 8001e38:	4b45      	ldr	r3, [pc, #276]	; (8001f50 <calcPID+0x138>)
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001f54 <calcPID+0x13c>
 8001e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4a:	dd03      	ble.n	8001e54 <calcPID+0x3c>
				integral = 0;
 8001e4c:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <calcPID+0x138>)
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
		}

		derivativo=error.f-lastError;
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <calcPID+0x134>)
 8001e56:	ed93 7a00 	vldr	s14, [r3]
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <calcPID+0x140>)
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e64:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <calcPID+0x144>)
 8001e66:	edc3 7a00 	vstr	s15, [r3]
		turn= (Kp.f*error.f) + (Kd.f*derivativo) + (Ki.f*integral);
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <calcPID+0x148>)
 8001e6c:	ed93 7a00 	vldr	s14, [r3]
 8001e70:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <calcPID+0x134>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <calcPID+0x14c>)
 8001e7c:	edd3 6a00 	vldr	s13, [r3]
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <calcPID+0x144>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e8e:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <calcPID+0x150>)
 8001e90:	edd3 6a00 	vldr	s13, [r3]
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <calcPID+0x138>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <calcPID+0x154>)
 8001ea4:	edc3 7a00 	vstr	s15, [r3]
		pwm1=pwmBase1-turn;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <calcPID+0x154>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebc:	edc7 7a03 	vstr	s15, [r7, #12]
		pwm2=pwmBase2+turn;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eca:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <calcPID+0x154>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed4:	edc7 7a02 	vstr	s15, [r7, #8]



		if(pwm1>400){
 8001ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001edc:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001f70 <calcPID+0x158>
 8001ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	dd01      	ble.n	8001eee <calcPID+0xd6>
			pwm1=400;
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <calcPID+0x15c>)
 8001eec:	60fb      	str	r3, [r7, #12]
		}
		if(pwm2>400){
 8001eee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ef2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001f70 <calcPID+0x158>
 8001ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	dd01      	ble.n	8001f04 <calcPID+0xec>
			pwm2=400;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <calcPID+0x15c>)
 8001f02:	60bb      	str	r3, [r7, #8]
		}

		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <calcPID+0x160>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pwm1);
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <calcPID+0x160>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f18:	ee17 2a90 	vmov	r2, s15
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm2);
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <calcPID+0x160>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f2a:	ee17 2a90 	vmov	r2, s15
 8001f2e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <calcPID+0x160>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2200      	movs	r2, #0
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
		lastError=error.f;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <calcPID+0x134>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <calcPID+0x140>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	20000624 	.word	0x20000624
 8001f50:	2000065c 	.word	0x2000065c
 8001f54:	447a0000 	.word	0x447a0000
 8001f58:	20000668 	.word	0x20000668
 8001f5c:	20000660 	.word	0x20000660
 8001f60:	20000648 	.word	0x20000648
 8001f64:	2000064c 	.word	0x2000064c
 8001f68:	20000650 	.word	0x20000650
 8001f6c:	20000664 	.word	0x20000664
 8001f70:	43c80000 	.word	0x43c80000
 8001f74:	43c80000 	.word	0x43c80000
 8001f78:	200000d4 	.word	0x200000d4

08001f7c <calibrarADC>:

void calibrarADC(){
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0

	for (uint8_t i = 1; i < 8; i++) {
 8001f82:	2301      	movs	r3, #1
 8001f84:	71fb      	strb	r3, [r7, #7]
 8001f86:	e013      	b.n	8001fb0 <calibrarADC+0x34>
			Constante_Relacion[i] = (valueADC[0].f)/(valueADC[i].f);
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <calibrarADC+0xc4>)
 8001f8a:	edd3 6a00 	vldr	s13, [r3]
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	4a2b      	ldr	r2, [pc, #172]	; (8002040 <calibrarADC+0xc4>)
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa0:	4a28      	ldr	r2, [pc, #160]	; (8002044 <calibrarADC+0xc8>)
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 1; i < 8; i++) {
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	3301      	adds	r3, #1
 8001fae:	71fb      	strb	r3, [r7, #7]
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	2b07      	cmp	r3, #7
 8001fb4:	d9e8      	bls.n	8001f88 <calibrarADC+0xc>
			//bufADCCAL[i].f = (bufADC[i].f)*(Constante_Relacion[i]);
		}

		valorsensormax = valueADC[0].f;
 8001fb6:	4b22      	ldr	r3, [pc, #136]	; (8002040 <calibrarADC+0xc4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a23      	ldr	r2, [pc, #140]	; (8002048 <calibrarADC+0xcc>)
 8001fbc:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 1; i < 8; i++) {
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	71bb      	strb	r3, [r7, #6]
 8001fc2:	e029      	b.n	8002018 <calibrarADC+0x9c>
			if(valorsensormax < (valueADC[i].f * Constante_Relacion[i])){
 8001fc4:	79bb      	ldrb	r3, [r7, #6]
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <calibrarADC+0xc4>)
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	ed93 7a00 	vldr	s14, [r3]
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <calibrarADC+0xc8>)
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <calibrarADC+0xcc>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	dd10      	ble.n	8002012 <calibrarADC+0x96>
				valorsensormax = (valueADC[i].f * Constante_Relacion[i]);
 8001ff0:	79bb      	ldrb	r3, [r7, #6]
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <calibrarADC+0xc4>)
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	79bb      	ldrb	r3, [r7, #6]
 8001ffe:	4a11      	ldr	r2, [pc, #68]	; (8002044 <calibrarADC+0xc8>)
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <calibrarADC+0xcc>)
 800200e:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 1; i < 8; i++) {
 8002012:	79bb      	ldrb	r3, [r7, #6]
 8002014:	3301      	adds	r3, #1
 8002016:	71bb      	strb	r3, [r7, #6]
 8002018:	79bb      	ldrb	r3, [r7, #6]
 800201a:	2b07      	cmp	r3, #7
 800201c:	d9d2      	bls.n	8001fc4 <calibrarADC+0x48>
			}
		}
		valorsensormax = valorsensormax * 0.75;
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <calibrarADC+0xcc>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <calibrarADC+0xcc>)
 800202e:	edc3 7a00 	vstr	s15, [r3]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000628 	.word	0x20000628
 8002044:	2000066c 	.word	0x2000066c
 8002048:	2000068c 	.word	0x2000068c

0800204c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002050:	f000 ff28 	bl	8002ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002054:	f000 f9bc 	bl	80023d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002058:	f000 fc32 	bl	80028c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800205c:	f000 fc10 	bl	8002880 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002060:	f000 fbe4 	bl	800282c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002064:	f000 fb6a 	bl	800273c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002068:	f000 fbb6 	bl	80027d8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800206c:	f000 fad0 	bl	8002610 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002070:	f000 fa1a 	bl	80024a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8002074:	4882      	ldr	r0, [pc, #520]	; (8002280 <main+0x234>)
 8002076:	f003 f8a1 	bl	80051bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 800207a:	4882      	ldr	r0, [pc, #520]	; (8002284 <main+0x238>)
 800207c:	f003 f844 	bl	8005108 <HAL_TIM_Base_Start>
  //HAL_ADC_Start_IT(&hadc1);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002080:	2100      	movs	r1, #0
 8002082:	4880      	ldr	r0, [pc, #512]	; (8002284 <main+0x238>)
 8002084:	f003 f956 	bl	8005334 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002088:	2104      	movs	r1, #4
 800208a:	487e      	ldr	r0, [pc, #504]	; (8002284 <main+0x238>)
 800208c:	f003 f952 	bl	8005334 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002090:	2108      	movs	r1, #8
 8002092:	487c      	ldr	r0, [pc, #496]	; (8002284 <main+0x238>)
 8002094:	f003 f94e 	bl	8005334 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002098:	210c      	movs	r1, #12
 800209a:	487a      	ldr	r0, [pc, #488]	; (8002284 <main+0x238>)
 800209c:	f003 f94a 	bl	8005334 <HAL_TIM_PWM_Start>

  timeout2=30;
 80020a0:	4b79      	ldr	r3, [pc, #484]	; (8002288 <main+0x23c>)
 80020a2:	221e      	movs	r2, #30
 80020a4:	701a      	strb	r2, [r3, #0]
  //timeOut3=10;
  timeToSendAlive=30;
 80020a6:	4b79      	ldr	r3, [pc, #484]	; (800228c <main+0x240>)
 80020a8:	221e      	movs	r2, #30
 80020aa:	701a      	strb	r2, [r3, #0]
  timeout1=30;
 80020ac:	4b78      	ldr	r3, [pc, #480]	; (8002290 <main+0x244>)
 80020ae:	221e      	movs	r2, #30
 80020b0:	701a      	strb	r2, [r3, #0]
  timeoutADC=0;
 80020b2:	4b78      	ldr	r3, [pc, #480]	; (8002294 <main+0x248>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
  readyToSend=1;
 80020b8:	4a77      	ldr	r2, [pc, #476]	; (8002298 <main+0x24c>)
 80020ba:	7813      	ldrb	r3, [r2, #0]
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	7013      	strb	r3, [r2, #0]
  race=0;
 80020c2:	4a75      	ldr	r2, [pc, #468]	; (8002298 <main+0x24c>)
 80020c4:	7813      	ldrb	r3, [r2, #0]
 80020c6:	f36f 0300 	bfc	r3, #0, #1
 80020ca:	7013      	strb	r3, [r2, #0]
  killRace=0;
 80020cc:	4a72      	ldr	r2, [pc, #456]	; (8002298 <main+0x24c>)
 80020ce:	7813      	ldrb	r3, [r2, #0]
 80020d0:	f36f 1386 	bfc	r3, #6, #1
 80020d4:	7013      	strb	r3, [r2, #0]
  stop=0;
 80020d6:	4a70      	ldr	r2, [pc, #448]	; (8002298 <main+0x24c>)
 80020d8:	7813      	ldrb	r3, [r2, #0]
 80020da:	f36f 03c3 	bfc	r3, #3, #1
 80020de:	7013      	strb	r3, [r2, #0]
  duty=0;
 80020e0:	4b6e      	ldr	r3, [pc, #440]	; (800229c <main+0x250>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
  espConnected=0;
 80020e6:	4a6e      	ldr	r2, [pc, #440]	; (80022a0 <main+0x254>)
 80020e8:	7813      	ldrb	r3, [r2, #0]
 80020ea:	f36f 0300 	bfc	r3, #0, #1
 80020ee:	7013      	strb	r3, [r2, #0]
  sendALIVE=0;
 80020f0:	4a6b      	ldr	r2, [pc, #428]	; (80022a0 <main+0x254>)
 80020f2:	7813      	ldrb	r3, [r2, #0]
 80020f4:	f36f 0341 	bfc	r3, #1, #1
 80020f8:	7013      	strb	r3, [r2, #0]

  PWM_motor1.u32=0;
 80020fa:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <main+0x258>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
  PWM_motor2.u32=0;
 8002100:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <main+0x25c>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
  time100ms=10;
 8002106:	4b69      	ldr	r3, [pc, #420]	; (80022ac <main+0x260>)
 8002108:	220a      	movs	r2, #10
 800210a:	701a      	strb	r2, [r3, #0]
  time10ms=1;
 800210c:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <main+0x264>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(ON100MS){
 8002112:	4b61      	ldr	r3, [pc, #388]	; (8002298 <main+0x24c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d032      	beq.n	8002186 <main+0x13a>
	  	 		ON100MS=0;
 8002120:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <main+0x24c>)
 8002122:	7813      	ldrb	r3, [r2, #0]
 8002124:	f36f 0341 	bfc	r3, #1, #1
 8002128:	7013      	strb	r3, [r2, #0]
	  	 	  	if(timeout1>0)
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <main+0x244>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <main+0xf2>
	  	 	  		timeout1--;
 8002132:	4b57      	ldr	r3, [pc, #348]	; (8002290 <main+0x244>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	3b01      	subs	r3, #1
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b55      	ldr	r3, [pc, #340]	; (8002290 <main+0x244>)
 800213c:	701a      	strb	r2, [r3, #0]
	  	 		if(timeout2>0)
 800213e:	4b52      	ldr	r3, [pc, #328]	; (8002288 <main+0x23c>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <main+0x106>
	  	 			timeout2--;
 8002146:	4b50      	ldr	r3, [pc, #320]	; (8002288 <main+0x23c>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3b01      	subs	r3, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b4e      	ldr	r3, [pc, #312]	; (8002288 <main+0x23c>)
 8002150:	701a      	strb	r2, [r3, #0]
	  	 		if(jobTime.u32>0)
 8002152:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <main+0x268>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <main+0x118>
	  	 			jobTime.u32--;
 800215a:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <main+0x268>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3b01      	subs	r3, #1
 8002160:	4a54      	ldr	r2, [pc, #336]	; (80022b4 <main+0x268>)
 8002162:	6013      	str	r3, [r2, #0]
	  	 		if((timeToSendAlive>0)&&(espConnected))
 8002164:	4b49      	ldr	r3, [pc, #292]	; (800228c <main+0x240>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <main+0x13a>
 800216c:	4b4c      	ldr	r3, [pc, #304]	; (80022a0 <main+0x254>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <main+0x13a>
	  	 			timeToSendAlive--;
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <main+0x240>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	3b01      	subs	r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b42      	ldr	r3, [pc, #264]	; (800228c <main+0x240>)
 8002184:	701a      	strb	r2, [r3, #0]
	  	  }

	  if(ON10MS){
 8002186:	4b44      	ldr	r3, [pc, #272]	; (8002298 <main+0x24c>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d018      	beq.n	80021c6 <main+0x17a>
		  ON10MS=0;
 8002194:	4a40      	ldr	r2, [pc, #256]	; (8002298 <main+0x24c>)
 8002196:	7813      	ldrb	r3, [r2, #0]
 8002198:	f36f 0382 	bfc	r3, #2, #1
 800219c:	7013      	strb	r3, [r2, #0]
		  if(timeoutADC>0){
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <main+0x248>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <main+0x166>
			  timeoutADC--;
 80021a6:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <main+0x248>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <main+0x248>)
 80021b0:	701a      	strb	r2, [r3, #0]
		  }
		  if(timeoutPID>0){
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <main+0x26c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <main+0x17a>
		  		timeoutPID--;
 80021ba:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <main+0x26c>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	3b01      	subs	r3, #1
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <main+0x26c>)
 80021c4:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  	  if( (!timeToSendAlive) && (espConnected) ){
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <main+0x240>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <main+0x1b4>
 80021ce:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <main+0x254>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d011      	beq.n	8002200 <main+0x1b4>
	  		  sendALIVE=1;
 80021dc:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <main+0x254>)
 80021de:	7813      	ldrb	r3, [r2, #0]
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	7013      	strb	r3, [r2, #0]
	  		  espReadyToRecieve=0;
 80021e6:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <main+0x24c>)
 80021e8:	7813      	ldrb	r3, [r2, #0]
 80021ea:	f36f 1345 	bfc	r3, #5, #1
 80021ee:	7013      	strb	r3, [r2, #0]
	  		  timeToSendAlive=50;
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <main+0x240>)
 80021f2:	2232      	movs	r2, #50	; 0x32
 80021f4:	701a      	strb	r2, [r3, #0]
	  		  readyToSend=1;
 80021f6:	4a28      	ldr	r2, [pc, #160]	; (8002298 <main+0x24c>)
 80021f8:	7813      	ldrb	r3, [r2, #0]
 80021fa:	f043 0310 	orr.w	r3, r3, #16
 80021fe:	7013      	strb	r3, [r2, #0]
	  	  }

	  	  if(sendALIVE){
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <main+0x254>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <main+0x1c8>
	  	  	udpCom(0);
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff f968 	bl	80014e4 <udpCom>
	  	  }

	  	  if(calibADC && !CALIBRADO){
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <main+0x270>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <main+0x1e2>
 800221c:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <main+0x274>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d104      	bne.n	800222e <main+0x1e2>
	  		calibrarADC();
 8002224:	f7ff feaa 	bl	8001f7c <calibrarADC>
	  		CALIBRADO=1;
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <main+0x274>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
	  	  }

	  	switch(duty){
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <main+0x250>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d021      	beq.n	800227a <main+0x22e>
 8002236:	2b02      	cmp	r3, #2
 8002238:	dc4b      	bgt.n	80022d2 <main+0x286>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <main+0x1f8>
 800223e:	2b01      	cmp	r3, #1
 8002240:	d018      	beq.n	8002274 <main+0x228>
 8002242:	e046      	b.n	80022d2 <main+0x286>
	  		case 0:
	  			if(!timeout1){
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <main+0x244>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d141      	bne.n	80022d0 <main+0x284>
	  				initEsp();
 800224c:	f7fe f9f6 	bl	800063c <initEsp>
	  				HAL_UART_Receive_IT(&huart1, (uint8_t *)&buf_rx[indRX_W], 1);
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <main+0x278>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <main+0x27c>)
 800225a:	4413      	add	r3, r2
 800225c:	2201      	movs	r2, #1
 800225e:	4619      	mov	r1, r3
 8002260:	481a      	ldr	r0, [pc, #104]	; (80022cc <main+0x280>)
 8002262:	f003 ff6c 	bl	800613e <HAL_UART_Receive_IT>
	  				duty++;
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <main+0x250>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <main+0x250>)
 8002270:	701a      	strb	r2, [r3, #0]
	  			}
	  		break;
 8002272:	e02d      	b.n	80022d0 <main+0x284>
	  		case 1:
	  			initEsp();
 8002274:	f7fe f9e2 	bl	800063c <initEsp>
	  		break;
 8002278:	e02b      	b.n	80022d2 <main+0x286>
	  		case 2:
	  			//udpCom(0);
	  			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  		break;
 800227a:	bf00      	nop
 800227c:	e029      	b.n	80022d2 <main+0x286>
 800227e:	bf00      	nop
 8002280:	2000011c 	.word	0x2000011c
 8002284:	200000d4 	.word	0x200000d4
 8002288:	2000060a 	.word	0x2000060a
 800228c:	20000610 	.word	0x20000610
 8002290:	20000609 	.word	0x20000609
 8002294:	2000060b 	.word	0x2000060b
 8002298:	20000654 	.word	0x20000654
 800229c:	20000604 	.word	0x20000604
 80022a0:	20000658 	.word	0x20000658
 80022a4:	20000618 	.word	0x20000618
 80022a8:	2000061c 	.word	0x2000061c
 80022ac:	200005fb 	.word	0x200005fb
 80022b0:	200005fc 	.word	0x200005fc
 80022b4:	20000620 	.word	0x20000620
 80022b8:	2000060c 	.word	0x2000060c
 80022bc:	20000001 	.word	0x20000001
 80022c0:	20000615 	.word	0x20000615
 80022c4:	200005fd 	.word	0x200005fd
 80022c8:	200001ec 	.word	0x200001ec
 80022cc:	20000164 	.word	0x20000164
	  		break;
 80022d0:	bf00      	nop
	  	}

	  	if(!timeoutADC){
 80022d2:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <main+0x354>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <main+0x29a>
	  		  	calibrarVal();
	  		  	findLine(valueADCCAL);
	  		}else{
	  			findLine(valueADC);
	  		}*/
	  		findLine(valueADC);
 80022da:	4832      	ldr	r0, [pc, #200]	; (80023a4 <main+0x358>)
 80022dc:	f7ff fc60 	bl	8001ba0 <findLine>
	  		timeoutADC=3;
 80022e0:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <main+0x354>)
 80022e2:	2203      	movs	r2, #3
 80022e4:	701a      	strb	r2, [r3, #0]
	  	}

	  	if((race)&&(!timeoutPID)){
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <main+0x35c>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00e      	beq.n	8002312 <main+0x2c6>
 80022f4:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <main+0x360>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10a      	bne.n	8002312 <main+0x2c6>
	  		  	calcPID(PWM_motor1.u32,PWM_motor2.u32);
 80022fc:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <main+0x364>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a2c      	ldr	r2, [pc, #176]	; (80023b4 <main+0x368>)
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fd86 	bl	8001e18 <calcPID>
	  		  	timeoutPID=2;
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <main+0x360>)
 800230e:	2202      	movs	r2, #2
 8002310:	701a      	strb	r2, [r3, #0]
	  	}


	  		if( ( ( (!jobTime.u32) && (killRace) ) ) || (stop) ) {
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <main+0x36c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <main+0x2dc>
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <main+0x35c>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d106      	bne.n	8002336 <main+0x2ea>
 8002328:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <main+0x35c>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01e      	beq.n	8002374 <main+0x328>
	  				  stop=0;
 8002336:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <main+0x35c>)
 8002338:	7813      	ldrb	r3, [r2, #0]
 800233a:	f36f 03c3 	bfc	r3, #3, #1
 800233e:	7013      	strb	r3, [r2, #0]
	  				  race=0;
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <main+0x35c>)
 8002342:	7813      	ldrb	r3, [r2, #0]
 8002344:	f36f 0300 	bfc	r3, #0, #1
 8002348:	7013      	strb	r3, [r2, #0]
	  				  killRace=0;
 800234a:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <main+0x35c>)
 800234c:	7813      	ldrb	r3, [r2, #0]
 800234e:	f36f 1386 	bfc	r3, #6, #1
 8002352:	7013      	strb	r3, [r2, #0]
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <main+0x370>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	635a      	str	r2, [r3, #52]	; 0x34
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <main+0x370>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2200      	movs	r2, #0
 8002362:	639a      	str	r2, [r3, #56]	; 0x38
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8002364:	4b15      	ldr	r3, [pc, #84]	; (80023bc <main+0x370>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2200      	movs	r2, #0
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
	  				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <main+0x370>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
	  		}

	  		if(indTX_R!=indTX_W){
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <main+0x374>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <main+0x378>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <main+0x33c>
	  			uart();
 8002384:	f7fe f934 	bl	80005f0 <uart>
	  		}

	  		if(indRX_R!=indRX_W){
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <main+0x37c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <main+0x380>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	429a      	cmp	r2, r3
 8002396:	f43f aebc 	beq.w	8002112 <main+0xc6>
	  			recibirmensaje();
 800239a:	f7fe fa53 	bl	8000844 <recibirmensaje>
	  if(ON100MS){
 800239e:	e6b8      	b.n	8002112 <main+0xc6>
 80023a0:	2000060b 	.word	0x2000060b
 80023a4:	20000628 	.word	0x20000628
 80023a8:	20000654 	.word	0x20000654
 80023ac:	2000060c 	.word	0x2000060c
 80023b0:	20000618 	.word	0x20000618
 80023b4:	2000061c 	.word	0x2000061c
 80023b8:	20000620 	.word	0x20000620
 80023bc:	200000d4 	.word	0x200000d4
 80023c0:	20000600 	.word	0x20000600
 80023c4:	200005ff 	.word	0x200005ff
 80023c8:	200005fe 	.word	0x200005fe
 80023cc:	200005fd 	.word	0x200005fd

080023d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b094      	sub	sp, #80	; 0x50
 80023d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023d6:	f107 0320 	add.w	r3, r7, #32
 80023da:	2230      	movs	r2, #48	; 0x30
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f004 fe0a 	bl	8006ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <SystemClock_Config+0xd0>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <SystemClock_Config+0xd0>)
 80023fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002402:	6413      	str	r3, [r2, #64]	; 0x40
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <SystemClock_Config+0xd0>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002410:	2300      	movs	r3, #0
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <SystemClock_Config+0xd4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800241c:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <SystemClock_Config+0xd4>)
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <SystemClock_Config+0xd4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002434:	2301      	movs	r3, #1
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002438:	2310      	movs	r3, #16
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800243c:	2302      	movs	r3, #2
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002440:	2300      	movs	r3, #0
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002444:	2310      	movs	r3, #16
 8002446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002448:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800244c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800244e:	2304      	movs	r3, #4
 8002450:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002452:	2307      	movs	r3, #7
 8002454:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002456:	f107 0320 	add.w	r3, r7, #32
 800245a:	4618      	mov	r0, r3
 800245c:	f002 f96c 	bl	8004738 <HAL_RCC_OscConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002466:	f000 fa99 	bl	800299c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800246a:	230f      	movs	r3, #15
 800246c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800246e:	2302      	movs	r3, #2
 8002470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	2102      	movs	r1, #2
 8002486:	4618      	mov	r0, r3
 8002488:	f002 fbce 	bl	8004c28 <HAL_RCC_ClockConfig>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002492:	f000 fa83 	bl	800299c <Error_Handler>
  }
}
 8002496:	bf00      	nop
 8002498:	3750      	adds	r7, #80	; 0x50
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40007000 	.word	0x40007000

080024a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024ae:	463b      	mov	r3, r7
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024ba:	4b52      	ldr	r3, [pc, #328]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024bc:	4a52      	ldr	r2, [pc, #328]	; (8002608 <MX_ADC1_Init+0x160>)
 80024be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024c8:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80024ce:	4b4d      	ldr	r3, [pc, #308]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024da:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024e2:	4b48      	ldr	r3, [pc, #288]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024e8:	4b46      	ldr	r3, [pc, #280]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024ea:	4a48      	ldr	r2, [pc, #288]	; (800260c <MX_ADC1_Init+0x164>)
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ee:	4b45      	ldr	r3, [pc, #276]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80024f4:	4b43      	ldr	r3, [pc, #268]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024f6:	2208      	movs	r2, #8
 80024f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80024fa:	4b42      	ldr	r3, [pc, #264]	; (8002604 <MX_ADC1_Init+0x15c>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002502:	4b40      	ldr	r3, [pc, #256]	; (8002604 <MX_ADC1_Init+0x15c>)
 8002504:	2200      	movs	r2, #0
 8002506:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002508:	483e      	ldr	r0, [pc, #248]	; (8002604 <MX_ADC1_Init+0x15c>)
 800250a:	f000 fd3d 	bl	8002f88 <HAL_ADC_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002514:	f000 fa42 	bl	800299c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002518:	2300      	movs	r3, #0
 800251a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800251c:	2301      	movs	r3, #1
 800251e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002520:	2301      	movs	r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002524:	463b      	mov	r3, r7
 8002526:	4619      	mov	r1, r3
 8002528:	4836      	ldr	r0, [pc, #216]	; (8002604 <MX_ADC1_Init+0x15c>)
 800252a:	f000 ff8f 	bl	800344c <HAL_ADC_ConfigChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002534:	f000 fa32 	bl	800299c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002538:	2301      	movs	r3, #1
 800253a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800253c:	2302      	movs	r3, #2
 800253e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002540:	463b      	mov	r3, r7
 8002542:	4619      	mov	r1, r3
 8002544:	482f      	ldr	r0, [pc, #188]	; (8002604 <MX_ADC1_Init+0x15c>)
 8002546:	f000 ff81 	bl	800344c <HAL_ADC_ConfigChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002550:	f000 fa24 	bl	800299c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002554:	2304      	movs	r3, #4
 8002556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002558:	2303      	movs	r3, #3
 800255a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800255c:	463b      	mov	r3, r7
 800255e:	4619      	mov	r1, r3
 8002560:	4828      	ldr	r0, [pc, #160]	; (8002604 <MX_ADC1_Init+0x15c>)
 8002562:	f000 ff73 	bl	800344c <HAL_ADC_ConfigChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800256c:	f000 fa16 	bl	800299c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002570:	2308      	movs	r3, #8
 8002572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002574:	2304      	movs	r3, #4
 8002576:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002578:	463b      	mov	r3, r7
 800257a:	4619      	mov	r1, r3
 800257c:	4821      	ldr	r0, [pc, #132]	; (8002604 <MX_ADC1_Init+0x15c>)
 800257e:	f000 ff65 	bl	800344c <HAL_ADC_ConfigChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002588:	f000 fa08 	bl	800299c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800258c:	230a      	movs	r3, #10
 800258e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002590:	2305      	movs	r3, #5
 8002592:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002594:	463b      	mov	r3, r7
 8002596:	4619      	mov	r1, r3
 8002598:	481a      	ldr	r0, [pc, #104]	; (8002604 <MX_ADC1_Init+0x15c>)
 800259a:	f000 ff57 	bl	800344c <HAL_ADC_ConfigChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80025a4:	f000 f9fa 	bl	800299c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80025a8:	230b      	movs	r3, #11
 80025aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80025ac:	2306      	movs	r3, #6
 80025ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025b0:	463b      	mov	r3, r7
 80025b2:	4619      	mov	r1, r3
 80025b4:	4813      	ldr	r0, [pc, #76]	; (8002604 <MX_ADC1_Init+0x15c>)
 80025b6:	f000 ff49 	bl	800344c <HAL_ADC_ConfigChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80025c0:	f000 f9ec 	bl	800299c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80025c4:	230c      	movs	r3, #12
 80025c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80025c8:	2307      	movs	r3, #7
 80025ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025cc:	463b      	mov	r3, r7
 80025ce:	4619      	mov	r1, r3
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <MX_ADC1_Init+0x15c>)
 80025d2:	f000 ff3b 	bl	800344c <HAL_ADC_ConfigChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80025dc:	f000 f9de 	bl	800299c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80025e0:	230d      	movs	r3, #13
 80025e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80025e4:	2308      	movs	r3, #8
 80025e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e8:	463b      	mov	r3, r7
 80025ea:	4619      	mov	r1, r3
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_ADC1_Init+0x15c>)
 80025ee:	f000 ff2d 	bl	800344c <HAL_ADC_ConfigChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80025f8:	f000 f9d0 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000002c 	.word	0x2000002c
 8002608:	40012000 	.word	0x40012000
 800260c:	0f000001 	.word	0x0f000001

08002610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	; 0x38
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	f107 0320 	add.w	r3, r7, #32
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
 800263c:	615a      	str	r2, [r3, #20]
 800263e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002640:	4b3c      	ldr	r3, [pc, #240]	; (8002734 <MX_TIM3_Init+0x124>)
 8002642:	4a3d      	ldr	r2, [pc, #244]	; (8002738 <MX_TIM3_Init+0x128>)
 8002644:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <MX_TIM3_Init+0x124>)
 8002648:	2263      	movs	r2, #99	; 0x63
 800264a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264c:	4b39      	ldr	r3, [pc, #228]	; (8002734 <MX_TIM3_Init+0x124>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 210;
 8002652:	4b38      	ldr	r3, [pc, #224]	; (8002734 <MX_TIM3_Init+0x124>)
 8002654:	22d2      	movs	r2, #210	; 0xd2
 8002656:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002658:	4b36      	ldr	r3, [pc, #216]	; (8002734 <MX_TIM3_Init+0x124>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <MX_TIM3_Init+0x124>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002664:	4833      	ldr	r0, [pc, #204]	; (8002734 <MX_TIM3_Init+0x124>)
 8002666:	f002 fcff 	bl	8005068 <HAL_TIM_Base_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002670:	f000 f994 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800267a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800267e:	4619      	mov	r1, r3
 8002680:	482c      	ldr	r0, [pc, #176]	; (8002734 <MX_TIM3_Init+0x124>)
 8002682:	f003 f8d1 	bl	8005828 <HAL_TIM_ConfigClockSource>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800268c:	f000 f986 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002690:	4828      	ldr	r0, [pc, #160]	; (8002734 <MX_TIM3_Init+0x124>)
 8002692:	f002 fdf5 	bl	8005280 <HAL_TIM_PWM_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800269c:	f000 f97e 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026a8:	f107 0320 	add.w	r3, r7, #32
 80026ac:	4619      	mov	r1, r3
 80026ae:	4821      	ldr	r0, [pc, #132]	; (8002734 <MX_TIM3_Init+0x124>)
 80026b0:	f003 fc76 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80026ba:	f000 f96f 	bl	800299c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026be:	2360      	movs	r3, #96	; 0x60
 80026c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2200      	movs	r2, #0
 80026d2:	4619      	mov	r1, r3
 80026d4:	4817      	ldr	r0, [pc, #92]	; (8002734 <MX_TIM3_Init+0x124>)
 80026d6:	f002 ffe5 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80026e0:	f000 f95c 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2204      	movs	r2, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4812      	ldr	r0, [pc, #72]	; (8002734 <MX_TIM3_Init+0x124>)
 80026ec:	f002 ffda 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80026f6:	f000 f951 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2208      	movs	r2, #8
 80026fe:	4619      	mov	r1, r3
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <MX_TIM3_Init+0x124>)
 8002702:	f002 ffcf 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 800270c:	f000 f946 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	220c      	movs	r2, #12
 8002714:	4619      	mov	r1, r3
 8002716:	4807      	ldr	r0, [pc, #28]	; (8002734 <MX_TIM3_Init+0x124>)
 8002718:	f002 ffc4 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8002722:	f000 f93b 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002726:	4803      	ldr	r0, [pc, #12]	; (8002734 <MX_TIM3_Init+0x124>)
 8002728:	f000 fa66 	bl	8002bf8 <HAL_TIM_MspPostInit>

}
 800272c:	bf00      	nop
 800272e:	3738      	adds	r7, #56	; 0x38
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200000d4 	.word	0x200000d4
 8002738:	40000400 	.word	0x40000400

0800273c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002750:	463b      	mov	r3, r7
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <MX_TIM4_Init+0x94>)
 800275a:	4a1e      	ldr	r2, [pc, #120]	; (80027d4 <MX_TIM4_Init+0x98>)
 800275c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 800275e:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <MX_TIM4_Init+0x94>)
 8002760:	2264      	movs	r2, #100	; 0x64
 8002762:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <MX_TIM4_Init+0x94>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 800276a:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <MX_TIM4_Init+0x94>)
 800276c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002770:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <MX_TIM4_Init+0x94>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <MX_TIM4_Init+0x94>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800277e:	4814      	ldr	r0, [pc, #80]	; (80027d0 <MX_TIM4_Init+0x94>)
 8002780:	f002 fc72 	bl	8005068 <HAL_TIM_Base_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800278a:	f000 f907 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800278e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002794:	f107 0308 	add.w	r3, r7, #8
 8002798:	4619      	mov	r1, r3
 800279a:	480d      	ldr	r0, [pc, #52]	; (80027d0 <MX_TIM4_Init+0x94>)
 800279c:	f003 f844 	bl	8005828 <HAL_TIM_ConfigClockSource>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80027a6:	f000 f8f9 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027b2:	463b      	mov	r3, r7
 80027b4:	4619      	mov	r1, r3
 80027b6:	4806      	ldr	r0, [pc, #24]	; (80027d0 <MX_TIM4_Init+0x94>)
 80027b8:	f003 fbf2 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80027c2:	f000 f8eb 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000011c 	.word	0x2000011c
 80027d4:	40000800 	.word	0x40000800

080027d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <MX_USART1_UART_Init+0x4c>)
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <MX_USART1_UART_Init+0x50>)
 80027e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <MX_USART1_UART_Init+0x4c>)
 80027e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <MX_USART1_UART_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <MX_USART1_UART_Init+0x4c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <MX_USART1_UART_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <MX_USART1_UART_Init+0x4c>)
 80027fe:	220c      	movs	r2, #12
 8002800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <MX_USART1_UART_Init+0x4c>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_USART1_UART_Init+0x4c>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800280e:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_USART1_UART_Init+0x4c>)
 8002810:	f003 fc48 	bl	80060a4 <HAL_UART_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800281a:	f000 f8bf 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000164 	.word	0x20000164
 8002828:	40011000 	.word	0x40011000

0800282c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_USART2_UART_Init+0x4c>)
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <MX_USART2_UART_Init+0x50>)
 8002834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <MX_USART2_UART_Init+0x4c>)
 8002838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800283c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <MX_USART2_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_USART2_UART_Init+0x4c>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <MX_USART2_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <MX_USART2_UART_Init+0x4c>)
 8002852:	220c      	movs	r2, #12
 8002854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <MX_USART2_UART_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_USART2_UART_Init+0x4c>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002862:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_USART2_UART_Init+0x4c>)
 8002864:	f003 fc1e 	bl	80060a4 <HAL_UART_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800286e:	f000 f895 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200001a8 	.word	0x200001a8
 800287c:	40004400 	.word	0x40004400

08002880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <MX_DMA_Init+0x3c>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <MX_DMA_Init+0x3c>)
 8002890:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MX_DMA_Init+0x3c>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2100      	movs	r1, #0
 80028a6:	2038      	movs	r0, #56	; 0x38
 80028a8:	f001 f955 	bl	8003b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80028ac:	2038      	movs	r0, #56	; 0x38
 80028ae:	f001 f96e 	bl	8003b8e <HAL_NVIC_EnableIRQ>

}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800

080028c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	60da      	str	r2, [r3, #12]
 80028d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <MX_GPIO_Init+0xd0>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a2c      	ldr	r2, [pc, #176]	; (8002990 <MX_GPIO_Init+0xd0>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <MX_GPIO_Init+0xd0>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <MX_GPIO_Init+0xd0>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a25      	ldr	r2, [pc, #148]	; (8002990 <MX_GPIO_Init+0xd0>)
 80028fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b23      	ldr	r3, [pc, #140]	; (8002990 <MX_GPIO_Init+0xd0>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <MX_GPIO_Init+0xd0>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <MX_GPIO_Init+0xd0>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <MX_GPIO_Init+0xd0>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_GPIO_Init+0xd0>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a17      	ldr	r2, [pc, #92]	; (8002990 <MX_GPIO_Init+0xd0>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <MX_GPIO_Init+0xd0>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002946:	2200      	movs	r2, #0
 8002948:	2120      	movs	r1, #32
 800294a:	4812      	ldr	r0, [pc, #72]	; (8002994 <MX_GPIO_Init+0xd4>)
 800294c:	f001 fec0 	bl	80046d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002956:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800295a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4619      	mov	r1, r3
 8002966:	480c      	ldr	r0, [pc, #48]	; (8002998 <MX_GPIO_Init+0xd8>)
 8002968:	f001 fd2e 	bl	80043c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800296c:	2320      	movs	r3, #32
 800296e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002970:	2301      	movs	r3, #1
 8002972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4619      	mov	r1, r3
 8002982:	4804      	ldr	r0, [pc, #16]	; (8002994 <MX_GPIO_Init+0xd4>)
 8002984:	f001 fd20 	bl	80043c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002988:	bf00      	nop
 800298a:	3728      	adds	r7, #40	; 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	40020000 	.word	0x40020000
 8002998:	40020800 	.word	0x40020800

0800299c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a0:	b672      	cpsid	i
}
 80029a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a4:	e7fe      	b.n	80029a4 <Error_Handler+0x8>
	...

080029a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_MspInit+0x4c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <HAL_MspInit+0x4c>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <HAL_MspInit+0x4c>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_MspInit+0x4c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <HAL_MspInit+0x4c>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_MspInit+0x4c>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029e6:	2007      	movs	r0, #7
 80029e8:	f001 f8aa 	bl	8003b40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800

080029f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	; 0x30
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 031c 	add.w	r3, r7, #28
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a4e      	ldr	r2, [pc, #312]	; (8002b50 <HAL_ADC_MspInit+0x158>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	f040 8095 	bne.w	8002b46 <HAL_ADC_MspInit+0x14e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	4b4c      	ldr	r3, [pc, #304]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	4a4b      	ldr	r2, [pc, #300]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2c:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	4b45      	ldr	r3, [pc, #276]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	4a44      	ldr	r2, [pc, #272]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	6313      	str	r3, [r2, #48]	; 0x30
 8002a48:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	4a3d      	ldr	r2, [pc, #244]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6313      	str	r3, [r2, #48]	; 0x30
 8002a64:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	4a36      	ldr	r2, [pc, #216]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a7a:	f043 0302 	orr.w	r3, r3, #2
 8002a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a80:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <HAL_ADC_MspInit+0x15c>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a90:	2303      	movs	r3, #3
 8002a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	482e      	ldr	r0, [pc, #184]	; (8002b58 <HAL_ADC_MspInit+0x160>)
 8002aa0:	f001 fc92 	bl	80043c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002aa4:	2313      	movs	r3, #19
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4829      	ldr	r0, [pc, #164]	; (8002b5c <HAL_ADC_MspInit+0x164>)
 8002ab8:	f001 fc86 	bl	80043c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002abc:	2301      	movs	r3, #1
 8002abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	4824      	ldr	r0, [pc, #144]	; (8002b60 <HAL_ADC_MspInit+0x168>)
 8002ad0:	f001 fc7a 	bl	80043c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002ad6:	4a24      	ldr	r2, [pc, #144]	; (8002b68 <HAL_ADC_MspInit+0x170>)
 8002ad8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ada:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002af2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002afa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b02:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b0a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002b0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b1a:	4812      	ldr	r0, [pc, #72]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002b1c:	f001 f852 	bl	8003bc4 <HAL_DMA_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8002b26:	f7ff ff39 	bl	800299c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38
 8002b30:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_ADC_MspInit+0x16c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2012      	movs	r0, #18
 8002b3c:	f001 f80b 	bl	8003b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002b40:	2012      	movs	r0, #18
 8002b42:	f001 f824 	bl	8003b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b46:	bf00      	nop
 8002b48:	3730      	adds	r7, #48	; 0x30
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40012000 	.word	0x40012000
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400
 8002b64:	20000074 	.word	0x20000074
 8002b68:	40026410 	.word	0x40026410

08002b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <HAL_TIM_Base_MspInit+0x80>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d116      	bne.n	8002bac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_TIM_Base_MspInit+0x84>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <HAL_TIM_Base_MspInit+0x84>)
 8002b88:	f043 0302 	orr.w	r3, r3, #2
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_TIM_Base_MspInit+0x84>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	201d      	movs	r0, #29
 8002ba0:	f000 ffd9 	bl	8003b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ba4:	201d      	movs	r0, #29
 8002ba6:	f000 fff2 	bl	8003b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002baa:	e01a      	b.n	8002be2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <HAL_TIM_Base_MspInit+0x88>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d115      	bne.n	8002be2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_TIM_Base_MspInit+0x84>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <HAL_TIM_Base_MspInit+0x84>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_TIM_Base_MspInit+0x84>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	201e      	movs	r0, #30
 8002bd8:	f000 ffbd 	bl	8003b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bdc:	201e      	movs	r0, #30
 8002bde:	f000 ffd6 	bl	8003b8e <HAL_NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40000800 	.word	0x40000800

08002bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 030c 	add.w	r3, r7, #12
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <HAL_TIM_MspPostInit+0x68>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d11e      	bne.n	8002c58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_TIM_MspPostInit+0x6c>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <HAL_TIM_MspPostInit+0x6c>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_TIM_MspPostInit+0x6c>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c36:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002c3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	4619      	mov	r1, r3
 8002c52:	4805      	ldr	r0, [pc, #20]	; (8002c68 <HAL_TIM_MspPostInit+0x70>)
 8002c54:	f001 fbb8 	bl	80043c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c58:	bf00      	nop
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020800 	.word	0x40020800

08002c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	; 0x30
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a36      	ldr	r2, [pc, #216]	; (8002d64 <HAL_UART_MspInit+0xf8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d135      	bne.n	8002cfa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002c98:	f043 0310 	orr.w	r3, r3, #16
 8002c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cd8:	2307      	movs	r3, #7
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	f107 031c 	add.w	r3, r7, #28
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4822      	ldr	r0, [pc, #136]	; (8002d6c <HAL_UART_MspInit+0x100>)
 8002ce4:	f001 fb70 	bl	80043c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2100      	movs	r1, #0
 8002cec:	2025      	movs	r0, #37	; 0x25
 8002cee:	f000 ff32 	bl	8003b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cf2:	2025      	movs	r0, #37	; 0x25
 8002cf4:	f000 ff4b 	bl	8003b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cf8:	e030      	b.n	8002d5c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_UART_MspInit+0x104>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d12b      	bne.n	8002d5c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d12:	6413      	str	r3, [r2, #64]	; 0x40
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4a0f      	ldr	r2, [pc, #60]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_UART_MspInit+0xfc>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d3c:	230c      	movs	r3, #12
 8002d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d4c:	2307      	movs	r3, #7
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	4619      	mov	r1, r3
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <HAL_UART_MspInit+0x100>)
 8002d58:	f001 fb36 	bl	80043c8 <HAL_GPIO_Init>
}
 8002d5c:	bf00      	nop
 8002d5e:	3730      	adds	r7, #48	; 0x30
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40011000 	.word	0x40011000
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40004400 	.word	0x40004400

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <NMI_Handler+0x4>

08002d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <HardFault_Handler+0x4>

08002d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <MemManage_Handler+0x4>

08002d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <BusFault_Handler+0x4>

08002d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <UsageFault_Handler+0x4>

08002d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc0:	f000 f8c2 	bl	8002f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <ADC_IRQHandler+0x10>)
 8002dce:	f000 f91e 	bl	800300e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	2000002c 	.word	0x2000002c

08002ddc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <TIM3_IRQHandler+0x10>)
 8002de2:	f002 fb57 	bl	8005494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200000d4 	.word	0x200000d4

08002df0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <TIM4_IRQHandler+0x10>)
 8002df6:	f002 fb4d 	bl	8005494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	2000011c 	.word	0x2000011c

08002e04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <USART1_IRQHandler+0x10>)
 8002e0a:	f003 f9c9 	bl	80061a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000164 	.word	0x20000164

08002e18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <DMA2_Stream0_IRQHandler+0x10>)
 8002e1e:	f001 f869 	bl	8003ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000074 	.word	0x20000074

08002e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <SystemInit+0x20>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <SystemInit+0x20>)
 8002e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e54:	480d      	ldr	r0, [pc, #52]	; (8002e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e56:	490e      	ldr	r1, [pc, #56]	; (8002e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e58:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e5c:	e002      	b.n	8002e64 <LoopCopyDataInit>

08002e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e62:	3304      	adds	r3, #4

08002e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e68:	d3f9      	bcc.n	8002e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6a:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e6c:	4c0b      	ldr	r4, [pc, #44]	; (8002e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e70:	e001      	b.n	8002e76 <LoopFillZerobss>

08002e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e74:	3204      	adds	r2, #4

08002e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e78:	d3fb      	bcc.n	8002e72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e7a:	f7ff ffd7 	bl	8002e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e7e:	f004 f889 	bl	8006f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e82:	f7ff f8e3 	bl	800204c <main>
  bx  lr    
 8002e86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002e94:	08007248 	.word	0x08007248
  ldr r2, =_sbss
 8002e98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002e9c:	200006c8 	.word	0x200006c8

08002ea0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea0:	e7fe      	b.n	8002ea0 <DMA1_Stream0_IRQHandler>
	...

08002ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <HAL_Init+0x40>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <HAL_Init+0x40>)
 8002eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_Init+0x40>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <HAL_Init+0x40>)
 8002eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_Init+0x40>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <HAL_Init+0x40>)
 8002ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ecc:	2003      	movs	r0, #3
 8002ece:	f000 fe37 	bl	8003b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f000 f808 	bl	8002ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed8:	f7ff fd66 	bl	80029a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00

08002ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_InitTick+0x54>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_InitTick+0x58>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fe4f 	bl	8003baa <HAL_SYSTICK_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00e      	b.n	8002f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b0f      	cmp	r3, #15
 8002f1a:	d80a      	bhi.n	8002f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f000 fe17 	bl	8003b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f28:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <HAL_InitTick+0x5c>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	2000000c 	.word	0x2000000c
 8002f44:	20000008 	.word	0x20000008

08002f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_IncTick+0x20>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_IncTick+0x24>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <HAL_IncTick+0x24>)
 8002f5a:	6013      	str	r3, [r2, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	2000000c 	.word	0x2000000c
 8002f6c:	200006c4 	.word	0x200006c4

08002f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return uwTick;
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_GetTick+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	200006c4 	.word	0x200006c4

08002f88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e033      	b.n	8003006 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fd26 	bl	80029f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fce:	f023 0302 	bic.w	r3, r3, #2
 8002fd2:	f043 0202 	orr.w	r2, r3, #2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fb58 	bl	8003690 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f023 0303 	bic.w	r3, r3, #3
 8002fee:	f043 0201 	orr.w	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff6:	e001      	b.n	8002ffc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d049      	beq.n	80030d8 <HAL_ADC_IRQHandler+0xca>
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d046      	beq.n	80030d8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d105      	bne.n	8003062 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d12b      	bne.n	80030c8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003074:	2b00      	cmp	r3, #0
 8003076:	d127      	bne.n	80030c8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003090:	2b00      	cmp	r3, #0
 8003092:	d119      	bne.n	80030c8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0220 	bic.w	r2, r2, #32
 80030a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fd fa25 	bl	8000518 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f06f 0212 	mvn.w	r2, #18
 80030d6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d057      	beq.n	800319e <HAL_ADC_IRQHandler+0x190>
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d054      	beq.n	800319e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d139      	bne.n	800318e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003124:	2b00      	cmp	r3, #0
 8003126:	d006      	beq.n	8003136 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003132:	2b00      	cmp	r3, #0
 8003134:	d12b      	bne.n	800318e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d124      	bne.n	800318e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800314e:	2b00      	cmp	r3, #0
 8003150:	d11d      	bne.n	800318e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003156:	2b00      	cmp	r3, #0
 8003158:	d119      	bne.n	800318e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003168:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0201 	orr.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fbfc 	bl	800398c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 020c 	mvn.w	r2, #12
 800319c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d017      	beq.n	80031e4 <HAL_ADC_IRQHandler+0x1d6>
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d014      	beq.n	80031e4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d10d      	bne.n	80031e4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f925 	bl	8003424 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 0201 	mvn.w	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031f2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d015      	beq.n	8003226 <HAL_ADC_IRQHandler+0x218>
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d012      	beq.n	8003226 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f043 0202 	orr.w	r2, r3, #2
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0220 	mvn.w	r2, #32
 8003214:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f90e 	bl	8003438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0220 	mvn.w	r2, #32
 8003224:	601a      	str	r2, [r3, #0]
  }
}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_ADC_Start_DMA+0x1e>
 800324a:	2302      	movs	r3, #2
 800324c:	e0ce      	b.n	80033ec <HAL_ADC_Start_DMA+0x1bc>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d018      	beq.n	8003296 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003274:	4b5f      	ldr	r3, [pc, #380]	; (80033f4 <HAL_ADC_Start_DMA+0x1c4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a5f      	ldr	r2, [pc, #380]	; (80033f8 <HAL_ADC_Start_DMA+0x1c8>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0c9a      	lsrs	r2, r3, #18
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003288:	e002      	b.n	8003290 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	3b01      	subs	r3, #1
 800328e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f9      	bne.n	800328a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a4:	d107      	bne.n	80032b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f040 8086 	bne.w	80033d2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d007      	beq.n	80032f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003304:	d106      	bne.n	8003314 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f023 0206 	bic.w	r2, r3, #6
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
 8003312:	e002      	b.n	800331a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_ADC_Start_DMA+0x1cc>)
 8003324:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	4a35      	ldr	r2, [pc, #212]	; (8003400 <HAL_ADC_Start_DMA+0x1d0>)
 800332c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	4a34      	ldr	r2, [pc, #208]	; (8003404 <HAL_ADC_Start_DMA+0x1d4>)
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	4a33      	ldr	r2, [pc, #204]	; (8003408 <HAL_ADC_Start_DMA+0x1d8>)
 800333c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003346:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003356:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003366:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	334c      	adds	r3, #76	; 0x4c
 8003372:	4619      	mov	r1, r3
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f000 fcd2 	bl	8003d20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10f      	bne.n	80033a8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d129      	bne.n	80033ea <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	e020      	b.n	80033ea <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a17      	ldr	r2, [pc, #92]	; (800340c <HAL_ADC_Start_DMA+0x1dc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d11b      	bne.n	80033ea <HAL_ADC_Start_DMA+0x1ba>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d114      	bne.n	80033ea <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	e00b      	b.n	80033ea <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f043 0210 	orr.w	r2, r3, #16
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f043 0201 	orr.w	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000004 	.word	0x20000004
 80033f8:	431bde83 	.word	0x431bde83
 80033fc:	40012300 	.word	0x40012300
 8003400:	08003889 	.word	0x08003889
 8003404:	08003943 	.word	0x08003943
 8003408:	0800395f 	.word	0x0800395f
 800340c:	40012000 	.word	0x40012000

08003410 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1c>
 8003464:	2302      	movs	r3, #2
 8003466:	e105      	b.n	8003674 <HAL_ADC_ConfigChannel+0x228>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b09      	cmp	r3, #9
 8003476:	d925      	bls.n	80034c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68d9      	ldr	r1, [r3, #12]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	3b1e      	subs	r3, #30
 800348e:	2207      	movs	r2, #7
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43da      	mvns	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	400a      	ands	r2, r1
 800349c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68d9      	ldr	r1, [r3, #12]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	4603      	mov	r3, r0
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4403      	add	r3, r0
 80034b6:	3b1e      	subs	r3, #30
 80034b8:	409a      	lsls	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	e022      	b.n	800350a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6919      	ldr	r1, [r3, #16]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	2207      	movs	r2, #7
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	400a      	ands	r2, r1
 80034e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6919      	ldr	r1, [r3, #16]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4403      	add	r3, r0
 8003500:	409a      	lsls	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d824      	bhi.n	800355c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	3b05      	subs	r3, #5
 8003524:	221f      	movs	r2, #31
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	400a      	ands	r2, r1
 8003532:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	4618      	mov	r0, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	3b05      	subs	r3, #5
 800354e:	fa00 f203 	lsl.w	r2, r0, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	635a      	str	r2, [r3, #52]	; 0x34
 800355a:	e04c      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d824      	bhi.n	80035ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	3b23      	subs	r3, #35	; 0x23
 8003576:	221f      	movs	r2, #31
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43da      	mvns	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	400a      	ands	r2, r1
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	4618      	mov	r0, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	3b23      	subs	r3, #35	; 0x23
 80035a0:	fa00 f203 	lsl.w	r2, r0, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
 80035ac:	e023      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	3b41      	subs	r3, #65	; 0x41
 80035c0:	221f      	movs	r2, #31
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	400a      	ands	r2, r1
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	4618      	mov	r0, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	3b41      	subs	r3, #65	; 0x41
 80035ea:	fa00 f203 	lsl.w	r2, r0, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_ADC_ConfigChannel+0x234>)
 80035f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a21      	ldr	r2, [pc, #132]	; (8003684 <HAL_ADC_ConfigChannel+0x238>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d109      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x1cc>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b12      	cmp	r3, #18
 800360a:	d105      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a19      	ldr	r2, [pc, #100]	; (8003684 <HAL_ADC_ConfigChannel+0x238>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d123      	bne.n	800366a <HAL_ADC_ConfigChannel+0x21e>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b10      	cmp	r3, #16
 8003628:	d003      	beq.n	8003632 <HAL_ADC_ConfigChannel+0x1e6>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b11      	cmp	r3, #17
 8003630:	d11b      	bne.n	800366a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b10      	cmp	r3, #16
 8003644:	d111      	bne.n	800366a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_ADC_ConfigChannel+0x23c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <HAL_ADC_ConfigChannel+0x240>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	0c9a      	lsrs	r2, r3, #18
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800365c:	e002      	b.n	8003664 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3b01      	subs	r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f9      	bne.n	800365e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40012300 	.word	0x40012300
 8003684:	40012000 	.word	0x40012000
 8003688:	20000004 	.word	0x20000004
 800368c:	431bde83 	.word	0x431bde83

08003690 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003698:	4b79      	ldr	r3, [pc, #484]	; (8003880 <ADC_Init+0x1f0>)
 800369a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	021a      	lsls	r2, r3, #8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	4a58      	ldr	r2, [pc, #352]	; (8003884 <ADC_Init+0x1f4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d022      	beq.n	800376e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003736:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6899      	ldr	r1, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6899      	ldr	r1, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	e00f      	b.n	800378e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800377c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800378c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0202 	bic.w	r2, r2, #2
 800379c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	7e1b      	ldrb	r3, [r3, #24]
 80037a8:	005a      	lsls	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	3b01      	subs	r3, #1
 80037e8:	035a      	lsls	r2, r3, #13
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	e007      	b.n	8003804 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003802:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	3b01      	subs	r3, #1
 8003820:	051a      	lsls	r2, r3, #20
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6899      	ldr	r1, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003846:	025a      	lsls	r2, r3, #9
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6899      	ldr	r1, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	029a      	lsls	r2, r3, #10
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40012300 	.word	0x40012300
 8003884:	0f000001 	.word	0x0f000001

08003888 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d13c      	bne.n	800391c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d12b      	bne.n	8003914 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d127      	bne.n	8003914 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d119      	bne.n	8003914 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0220 	bic.w	r2, r2, #32
 80038ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f7fc fdff 	bl	8000518 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800391a:	e00e      	b.n	800393a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff fd85 	bl	8003438 <HAL_ADC_ErrorCallback>
}
 800392e:	e004      	b.n	800393a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff fd5d 	bl	8003410 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7ff fd5a 	bl	8003438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <__NVIC_SetPriorityGrouping+0x44>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039bc:	4013      	ands	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039d2:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <__NVIC_SetPriorityGrouping+0x44>)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	60d3      	str	r3, [r2, #12]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <__NVIC_GetPriorityGrouping+0x18>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	f003 0307 	and.w	r3, r3, #7
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	db0b      	blt.n	8003a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	f003 021f 	and.w	r2, r3, #31
 8003a1c:	4907      	ldr	r1, [pc, #28]	; (8003a3c <__NVIC_EnableIRQ+0x38>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2001      	movs	r0, #1
 8003a26:	fa00 f202 	lsl.w	r2, r0, r2
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	e000e100 	.word	0xe000e100

08003a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	db0a      	blt.n	8003a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	490c      	ldr	r1, [pc, #48]	; (8003a8c <__NVIC_SetPriority+0x4c>)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	0112      	lsls	r2, r2, #4
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	440b      	add	r3, r1
 8003a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a68:	e00a      	b.n	8003a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4908      	ldr	r1, [pc, #32]	; (8003a90 <__NVIC_SetPriority+0x50>)
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	3b04      	subs	r3, #4
 8003a78:	0112      	lsls	r2, r2, #4
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	761a      	strb	r2, [r3, #24]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	e000e100 	.word	0xe000e100
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f1c3 0307 	rsb	r3, r3, #7
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	bf28      	it	cs
 8003ab2:	2304      	movcs	r3, #4
 8003ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d902      	bls.n	8003ac4 <NVIC_EncodePriority+0x30>
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3b03      	subs	r3, #3
 8003ac2:	e000      	b.n	8003ac6 <NVIC_EncodePriority+0x32>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003adc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	43d9      	mvns	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	4313      	orrs	r3, r2
         );
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3724      	adds	r7, #36	; 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b0c:	d301      	bcc.n	8003b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00f      	b.n	8003b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b12:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <SysTick_Config+0x40>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b1a:	210f      	movs	r1, #15
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b20:	f7ff ff8e 	bl	8003a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <SysTick_Config+0x40>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <SysTick_Config+0x40>)
 8003b2c:	2207      	movs	r2, #7
 8003b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	e000e010 	.word	0xe000e010

08003b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff29 	bl	80039a0 <__NVIC_SetPriorityGrouping>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b68:	f7ff ff3e 	bl	80039e8 <__NVIC_GetPriorityGrouping>
 8003b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	6978      	ldr	r0, [r7, #20]
 8003b74:	f7ff ff8e 	bl	8003a94 <NVIC_EncodePriority>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff5d 	bl	8003a40 <__NVIC_SetPriority>
}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff ff31 	bl	8003a04 <__NVIC_EnableIRQ>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ffa2 	bl	8003afc <SysTick_Config>
 8003bb8:	4603      	mov	r3, r0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bd0:	f7ff f9ce 	bl	8002f70 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e099      	b.n	8003d14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c00:	e00f      	b.n	8003c22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c02:	f7ff f9b5 	bl	8002f70 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d908      	bls.n	8003c22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2203      	movs	r2, #3
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e078      	b.n	8003d14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e8      	bne.n	8003c02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4b38      	ldr	r3, [pc, #224]	; (8003d1c <HAL_DMA_Init+0x158>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d107      	bne.n	8003c8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	4313      	orrs	r3, r2
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 0307 	bic.w	r3, r3, #7
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d117      	bne.n	8003ce6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fb01 	bl	80042d0 <DMA_CheckFifoParam>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2240      	movs	r2, #64	; 0x40
 8003cd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e016      	b.n	8003d14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fab8 	bl	8004264 <DMA_CalcBaseAndBitshift>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfc:	223f      	movs	r2, #63	; 0x3f
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	f010803f 	.word	0xf010803f

08003d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_DMA_Start_IT+0x26>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e040      	b.n	8003dc8 <HAL_DMA_Start_IT+0xa8>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d12f      	bne.n	8003dba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fa4a 	bl	8004208 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	223f      	movs	r2, #63	; 0x3f
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0216 	orr.w	r2, r2, #22
 8003d8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0208 	orr.w	r2, r2, #8
 8003da6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e005      	b.n	8003dc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ddc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dde:	f7ff f8c7 	bl	8002f70 <HAL_GetTick>
 8003de2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d008      	beq.n	8003e02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e052      	b.n	8003ea8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0216 	bic.w	r2, r2, #22
 8003e10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d103      	bne.n	8003e32 <HAL_DMA_Abort+0x62>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0208 	bic.w	r2, r2, #8
 8003e40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e52:	e013      	b.n	8003e7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e54:	f7ff f88c 	bl	8002f70 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d90c      	bls.n	8003e7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e015      	b.n	8003ea8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e4      	bne.n	8003e54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	223f      	movs	r2, #63	; 0x3f
 8003e90:	409a      	lsls	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d004      	beq.n	8003ece <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2280      	movs	r2, #128	; 0x80
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00c      	b.n	8003ee8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2205      	movs	r2, #5
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f00:	4b8e      	ldr	r3, [pc, #568]	; (800413c <HAL_DMA_IRQHandler+0x248>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a8e      	ldr	r2, [pc, #568]	; (8004140 <HAL_DMA_IRQHandler+0x24c>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	0a9b      	lsrs	r3, r3, #10
 8003f0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	2208      	movs	r2, #8
 8003f20:	409a      	lsls	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01a      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0204 	bic.w	r2, r2, #4
 8003f46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f043 0201 	orr.w	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	2201      	movs	r2, #1
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f82:	2201      	movs	r2, #1
 8003f84:	409a      	lsls	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	f043 0202 	orr.w	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	2204      	movs	r2, #4
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f043 0204 	orr.w	r2, r3, #4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d043      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d03c      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	2210      	movs	r2, #16
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d018      	beq.n	8004036 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d108      	bne.n	8004024 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d024      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
 8004022:	e01f      	b.n	8004064 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01b      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
 8004034:	e016      	b.n	8004064 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0208 	bic.w	r2, r2, #8
 8004052:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	2220      	movs	r2, #32
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 808f 	beq.w	8004194 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8087 	beq.w	8004194 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	2220      	movs	r2, #32
 800408c:	409a      	lsls	r2, r3
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b05      	cmp	r3, #5
 800409c:	d136      	bne.n	800410c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0216 	bic.w	r2, r2, #22
 80040ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <HAL_DMA_IRQHandler+0x1da>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0208 	bic.w	r2, r2, #8
 80040dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	223f      	movs	r2, #63	; 0x3f
 80040e4:	409a      	lsls	r2, r3
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d07e      	beq.n	8004200 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
        }
        return;
 800410a:	e079      	b.n	8004200 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01d      	beq.n	8004156 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10d      	bne.n	8004144 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	2b00      	cmp	r3, #0
 800412e:	d031      	beq.n	8004194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
 8004138:	e02c      	b.n	8004194 <HAL_DMA_IRQHandler+0x2a0>
 800413a:	bf00      	nop
 800413c:	20000004 	.word	0x20000004
 8004140:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d023      	beq.n	8004194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
 8004154:	e01e      	b.n	8004194 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10f      	bne.n	8004184 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0210 	bic.w	r2, r2, #16
 8004172:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	2b00      	cmp	r3, #0
 800419a:	d032      	beq.n	8004202 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d022      	beq.n	80041ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2205      	movs	r2, #5
 80041ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d307      	bcc.n	80041dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f2      	bne.n	80041c0 <HAL_DMA_IRQHandler+0x2cc>
 80041da:	e000      	b.n	80041de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80041dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
 80041fe:	e000      	b.n	8004202 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004200:	bf00      	nop
    }
  }
}
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004224:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d108      	bne.n	8004248 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004246:	e007      	b.n	8004258 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	3b10      	subs	r3, #16
 8004274:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800427e:	4a13      	ldr	r2, [pc, #76]	; (80042cc <DMA_CalcBaseAndBitshift+0x68>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b03      	cmp	r3, #3
 8004290:	d909      	bls.n	80042a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	1d1a      	adds	r2, r3, #4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58
 80042a4:	e007      	b.n	80042b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	aaaaaaab 	.word	0xaaaaaaab
 80042cc:	08007230 	.word	0x08007230

080042d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d11f      	bne.n	800432a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d856      	bhi.n	800439e <DMA_CheckFifoParam+0xce>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <DMA_CheckFifoParam+0x28>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004309 	.word	0x08004309
 80042fc:	0800431b 	.word	0x0800431b
 8004300:	08004309 	.word	0x08004309
 8004304:	0800439f 	.word	0x0800439f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d046      	beq.n	80043a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004318:	e043      	b.n	80043a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004322:	d140      	bne.n	80043a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004328:	e03d      	b.n	80043a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004332:	d121      	bne.n	8004378 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b03      	cmp	r3, #3
 8004338:	d837      	bhi.n	80043aa <DMA_CheckFifoParam+0xda>
 800433a:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <DMA_CheckFifoParam+0x70>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	08004351 	.word	0x08004351
 8004344:	08004357 	.word	0x08004357
 8004348:	08004351 	.word	0x08004351
 800434c:	08004369 	.word	0x08004369
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      break;
 8004354:	e030      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d025      	beq.n	80043ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004366:	e022      	b.n	80043ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004370:	d11f      	bne.n	80043b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004376:	e01c      	b.n	80043b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d903      	bls.n	8004386 <DMA_CheckFifoParam+0xb6>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d003      	beq.n	800438c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004384:	e018      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
      break;
 800438a:	e015      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
      break;
 800439c:	e00b      	b.n	80043b6 <DMA_CheckFifoParam+0xe6>
      break;
 800439e:	bf00      	nop
 80043a0:	e00a      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;
 80043a2:	bf00      	nop
 80043a4:	e008      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;
 80043a6:	bf00      	nop
 80043a8:	e006      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;
 80043aa:	bf00      	nop
 80043ac:	e004      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;
 80043ae:	bf00      	nop
 80043b0:	e002      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <DMA_CheckFifoParam+0xe8>
      break;
 80043b6:	bf00      	nop
    }
  } 
  
  return status; 
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop

080043c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	e159      	b.n	8004698 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043e4:	2201      	movs	r2, #1
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4013      	ands	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	f040 8148 	bne.w	8004692 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b01      	cmp	r3, #1
 800440c:	d005      	beq.n	800441a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004416:	2b02      	cmp	r3, #2
 8004418:	d130      	bne.n	800447c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	2203      	movs	r2, #3
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004450:	2201      	movs	r2, #1
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 0201 	and.w	r2, r3, #1
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b03      	cmp	r3, #3
 8004486:	d017      	beq.n	80044b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	2203      	movs	r2, #3
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d123      	bne.n	800450c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	08da      	lsrs	r2, r3, #3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3208      	adds	r2, #8
 80044cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	220f      	movs	r2, #15
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	08da      	lsrs	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3208      	adds	r2, #8
 8004506:	69b9      	ldr	r1, [r7, #24]
 8004508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2203      	movs	r2, #3
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0203 	and.w	r2, r3, #3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80a2 	beq.w	8004692 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4b57      	ldr	r3, [pc, #348]	; (80046b0 <HAL_GPIO_Init+0x2e8>)
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	4a56      	ldr	r2, [pc, #344]	; (80046b0 <HAL_GPIO_Init+0x2e8>)
 8004558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800455c:	6453      	str	r3, [r2, #68]	; 0x44
 800455e:	4b54      	ldr	r3, [pc, #336]	; (80046b0 <HAL_GPIO_Init+0x2e8>)
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800456a:	4a52      	ldr	r2, [pc, #328]	; (80046b4 <HAL_GPIO_Init+0x2ec>)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	3302      	adds	r3, #2
 8004572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	220f      	movs	r2, #15
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a49      	ldr	r2, [pc, #292]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d019      	beq.n	80045ca <HAL_GPIO_Init+0x202>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a48      	ldr	r2, [pc, #288]	; (80046bc <HAL_GPIO_Init+0x2f4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <HAL_GPIO_Init+0x1fe>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a47      	ldr	r2, [pc, #284]	; (80046c0 <HAL_GPIO_Init+0x2f8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00d      	beq.n	80045c2 <HAL_GPIO_Init+0x1fa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a46      	ldr	r2, [pc, #280]	; (80046c4 <HAL_GPIO_Init+0x2fc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <HAL_GPIO_Init+0x1f6>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a45      	ldr	r2, [pc, #276]	; (80046c8 <HAL_GPIO_Init+0x300>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_GPIO_Init+0x1f2>
 80045b6:	2304      	movs	r3, #4
 80045b8:	e008      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045ba:	2307      	movs	r3, #7
 80045bc:	e006      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045be:	2303      	movs	r3, #3
 80045c0:	e004      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e002      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045ca:	2300      	movs	r3, #0
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	f002 0203 	and.w	r2, r2, #3
 80045d2:	0092      	lsls	r2, r2, #2
 80045d4:	4093      	lsls	r3, r2
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045dc:	4935      	ldr	r1, [pc, #212]	; (80046b4 <HAL_GPIO_Init+0x2ec>)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	3302      	adds	r3, #2
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ea:	4b38      	ldr	r3, [pc, #224]	; (80046cc <HAL_GPIO_Init+0x304>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800460e:	4a2f      	ldr	r2, [pc, #188]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004614:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004638:	4a24      	ldr	r2, [pc, #144]	; (80046cc <HAL_GPIO_Init+0x304>)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800463e:	4b23      	ldr	r3, [pc, #140]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004662:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004668:	4b18      	ldr	r3, [pc, #96]	; (80046cc <HAL_GPIO_Init+0x304>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800468c:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <HAL_GPIO_Init+0x304>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3301      	adds	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b0f      	cmp	r3, #15
 800469c:	f67f aea2 	bls.w	80043e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	3724      	adds	r7, #36	; 0x24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40013800 	.word	0x40013800
 80046b8:	40020000 	.word	0x40020000
 80046bc:	40020400 	.word	0x40020400
 80046c0:	40020800 	.word	0x40020800
 80046c4:	40020c00 	.word	0x40020c00
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40013c00 	.word	0x40013c00

080046d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	807b      	strh	r3, [r7, #2]
 80046dc:	4613      	mov	r3, r2
 80046de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e0:	787b      	ldrb	r3, [r7, #1]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046ec:	e003      	b.n	80046f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ee:	887b      	ldrh	r3, [r7, #2]
 80046f0:	041a      	lsls	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	619a      	str	r2, [r3, #24]
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004714:	887a      	ldrh	r2, [r7, #2]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4013      	ands	r3, r2
 800471a:	041a      	lsls	r2, r3, #16
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	43d9      	mvns	r1, r3
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	400b      	ands	r3, r1
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	619a      	str	r2, [r3, #24]
}
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e267      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d075      	beq.n	8004842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004756:	4b88      	ldr	r3, [pc, #544]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b04      	cmp	r3, #4
 8004760:	d00c      	beq.n	800477c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004762:	4b85      	ldr	r3, [pc, #532]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800476a:	2b08      	cmp	r3, #8
 800476c:	d112      	bne.n	8004794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800476e:	4b82      	ldr	r3, [pc, #520]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477a:	d10b      	bne.n	8004794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800477c:	4b7e      	ldr	r3, [pc, #504]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d05b      	beq.n	8004840 <HAL_RCC_OscConfig+0x108>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d157      	bne.n	8004840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e242      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479c:	d106      	bne.n	80047ac <HAL_RCC_OscConfig+0x74>
 800479e:	4b76      	ldr	r3, [pc, #472]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a75      	ldr	r2, [pc, #468]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e01d      	b.n	80047e8 <HAL_RCC_OscConfig+0xb0>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x98>
 80047b6:	4b70      	ldr	r3, [pc, #448]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6f      	ldr	r2, [pc, #444]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80047bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	4b6d      	ldr	r3, [pc, #436]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a6c      	ldr	r2, [pc, #432]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80047c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e00b      	b.n	80047e8 <HAL_RCC_OscConfig+0xb0>
 80047d0:	4b69      	ldr	r3, [pc, #420]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a68      	ldr	r2, [pc, #416]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80047d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	4b66      	ldr	r3, [pc, #408]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a65      	ldr	r2, [pc, #404]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80047e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f0:	f7fe fbbe 	bl	8002f70 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f8:	f7fe fbba 	bl	8002f70 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	; 0x64
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e207      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b5b      	ldr	r3, [pc, #364]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0xc0>
 8004816:	e014      	b.n	8004842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fe fbaa 	bl	8002f70 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004820:	f7fe fba6 	bl	8002f70 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e1f3      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004832:	4b51      	ldr	r3, [pc, #324]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0xe8>
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d063      	beq.n	8004916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800484e:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485a:	4b47      	ldr	r3, [pc, #284]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004862:	2b08      	cmp	r3, #8
 8004864:	d11c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004866:	4b44      	ldr	r3, [pc, #272]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d116      	bne.n	80048a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004872:	4b41      	ldr	r3, [pc, #260]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_RCC_OscConfig+0x152>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d001      	beq.n	800488a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e1c7      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488a:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4937      	ldr	r1, [pc, #220]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 800489a:	4313      	orrs	r3, r2
 800489c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489e:	e03a      	b.n	8004916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a8:	4b34      	ldr	r3, [pc, #208]	; (800497c <HAL_RCC_OscConfig+0x244>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ae:	f7fe fb5f 	bl	8002f70 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b6:	f7fe fb5b 	bl	8002f70 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e1a8      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c8:	4b2b      	ldr	r3, [pc, #172]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d4:	4b28      	ldr	r3, [pc, #160]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4925      	ldr	r1, [pc, #148]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
 80048e8:	e015      	b.n	8004916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ea:	4b24      	ldr	r3, [pc, #144]	; (800497c <HAL_RCC_OscConfig+0x244>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fe fb3e 	bl	8002f70 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f8:	f7fe fb3a 	bl	8002f70 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e187      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d036      	beq.n	8004990 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d016      	beq.n	8004958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HAL_RCC_OscConfig+0x248>)
 800492c:	2201      	movs	r2, #1
 800492e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004930:	f7fe fb1e 	bl	8002f70 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004938:	f7fe fb1a 	bl	8002f70 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e167      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494a:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCC_OscConfig+0x240>)
 800494c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x200>
 8004956:	e01b      	b.n	8004990 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004958:	4b09      	ldr	r3, [pc, #36]	; (8004980 <HAL_RCC_OscConfig+0x248>)
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495e:	f7fe fb07 	bl	8002f70 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004964:	e00e      	b.n	8004984 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004966:	f7fe fb03 	bl	8002f70 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d907      	bls.n	8004984 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e150      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
 8004978:	40023800 	.word	0x40023800
 800497c:	42470000 	.word	0x42470000
 8004980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004984:	4b88      	ldr	r3, [pc, #544]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1ea      	bne.n	8004966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8097 	beq.w	8004acc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800499e:	2300      	movs	r3, #0
 80049a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a2:	4b81      	ldr	r3, [pc, #516]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10f      	bne.n	80049ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	4b7d      	ldr	r3, [pc, #500]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	4a7c      	ldr	r2, [pc, #496]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 80049b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049bc:	6413      	str	r3, [r2, #64]	; 0x40
 80049be:	4b7a      	ldr	r3, [pc, #488]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ca:	2301      	movs	r3, #1
 80049cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ce:	4b77      	ldr	r3, [pc, #476]	; (8004bac <HAL_RCC_OscConfig+0x474>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d118      	bne.n	8004a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049da:	4b74      	ldr	r3, [pc, #464]	; (8004bac <HAL_RCC_OscConfig+0x474>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a73      	ldr	r2, [pc, #460]	; (8004bac <HAL_RCC_OscConfig+0x474>)
 80049e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049e6:	f7fe fac3 	bl	8002f70 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ee:	f7fe fabf 	bl	8002f70 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e10c      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a00:	4b6a      	ldr	r3, [pc, #424]	; (8004bac <HAL_RCC_OscConfig+0x474>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d106      	bne.n	8004a22 <HAL_RCC_OscConfig+0x2ea>
 8004a14:	4b64      	ldr	r3, [pc, #400]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a63      	ldr	r2, [pc, #396]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	e01c      	b.n	8004a5c <HAL_RCC_OscConfig+0x324>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b05      	cmp	r3, #5
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x30c>
 8004a2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	4a5e      	ldr	r2, [pc, #376]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a30:	f043 0304 	orr.w	r3, r3, #4
 8004a34:	6713      	str	r3, [r2, #112]	; 0x70
 8004a36:	4b5c      	ldr	r3, [pc, #368]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	4a5b      	ldr	r2, [pc, #364]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	6713      	str	r3, [r2, #112]	; 0x70
 8004a42:	e00b      	b.n	8004a5c <HAL_RCC_OscConfig+0x324>
 8004a44:	4b58      	ldr	r3, [pc, #352]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	4a57      	ldr	r2, [pc, #348]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a50:	4b55      	ldr	r3, [pc, #340]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	4a54      	ldr	r2, [pc, #336]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a56:	f023 0304 	bic.w	r3, r3, #4
 8004a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d015      	beq.n	8004a90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a64:	f7fe fa84 	bl	8002f70 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6c:	f7fe fa80 	bl	8002f70 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e0cb      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a82:	4b49      	ldr	r3, [pc, #292]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0ee      	beq.n	8004a6c <HAL_RCC_OscConfig+0x334>
 8004a8e:	e014      	b.n	8004aba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a90:	f7fe fa6e 	bl	8002f70 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a98:	f7fe fa6a 	bl	8002f70 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e0b5      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aae:	4b3e      	ldr	r3, [pc, #248]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1ee      	bne.n	8004a98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d105      	bne.n	8004acc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac0:	4b39      	ldr	r3, [pc, #228]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	4a38      	ldr	r2, [pc, #224]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80a1 	beq.w	8004c18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ad6:	4b34      	ldr	r3, [pc, #208]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d05c      	beq.n	8004b9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d141      	bne.n	8004b6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aea:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <HAL_RCC_OscConfig+0x478>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fe fa3e 	bl	8002f70 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fe fa3a 	bl	8002f70 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e087      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0a:	4b27      	ldr	r3, [pc, #156]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	019b      	lsls	r3, r3, #6
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	041b      	lsls	r3, r3, #16
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	061b      	lsls	r3, r3, #24
 8004b3a:	491b      	ldr	r1, [pc, #108]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b40:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <HAL_RCC_OscConfig+0x478>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b46:	f7fe fa13 	bl	8002f70 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4e:	f7fe fa0f 	bl	8002f70 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e05c      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x416>
 8004b6c:	e054      	b.n	8004c18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <HAL_RCC_OscConfig+0x478>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fe f9fc 	bl	8002f70 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fe f9f8 	bl	8002f70 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e045      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_RCC_OscConfig+0x470>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x444>
 8004b9a:	e03d      	b.n	8004c18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e038      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	40007000 	.word	0x40007000
 8004bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bb4:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <HAL_RCC_OscConfig+0x4ec>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d028      	beq.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d121      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d11a      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004be4:	4013      	ands	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d111      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d107      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800

08004c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0cc      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b68      	ldr	r3, [pc, #416]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d90c      	bls.n	8004c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b65      	ldr	r3, [pc, #404]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b63      	ldr	r3, [pc, #396]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0b8      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c7c:	4b59      	ldr	r3, [pc, #356]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4a58      	ldr	r2, [pc, #352]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c94:	4b53      	ldr	r3, [pc, #332]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4a52      	ldr	r2, [pc, #328]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca0:	4b50      	ldr	r3, [pc, #320]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	494d      	ldr	r1, [pc, #308]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d044      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc6:	4b47      	ldr	r3, [pc, #284]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d119      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e07f      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d003      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce6:	4b3f      	ldr	r3, [pc, #252]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e06f      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf6:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e067      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d06:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f023 0203 	bic.w	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4934      	ldr	r1, [pc, #208]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d18:	f7fe f92a 	bl	8002f70 <HAL_GetTick>
 8004d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d20:	f7fe f926 	bl	8002f70 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e04f      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d36:	4b2b      	ldr	r3, [pc, #172]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 020c 	and.w	r2, r3, #12
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d1eb      	bne.n	8004d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d48:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d20c      	bcs.n	8004d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b22      	ldr	r3, [pc, #136]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e032      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d7c:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4916      	ldr	r1, [pc, #88]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	490e      	ldr	r1, [pc, #56]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dae:	f000 f821 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004db2:	4602      	mov	r2, r0
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	490a      	ldr	r1, [pc, #40]	; (8004de8 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc0:	5ccb      	ldrb	r3, [r1, r3]
 8004dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc6:	4a09      	ldr	r2, [pc, #36]	; (8004dec <HAL_RCC_ClockConfig+0x1c4>)
 8004dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe f88a 	bl	8002ee8 <HAL_InitTick>

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40023c00 	.word	0x40023c00
 8004de4:	40023800 	.word	0x40023800
 8004de8:	08007218 	.word	0x08007218
 8004dec:	20000004 	.word	0x20000004
 8004df0:	20000008 	.word	0x20000008

08004df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df8:	b094      	sub	sp, #80	; 0x50
 8004dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8004e00:	2300      	movs	r3, #0
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e04:	2300      	movs	r3, #0
 8004e06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e0c:	4b79      	ldr	r3, [pc, #484]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d00d      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x40>
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	f200 80e1 	bhi.w	8004fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x34>
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d003      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e26:	e0db      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e28:	4b73      	ldr	r3, [pc, #460]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e2c:	e0db      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e2e:	4b73      	ldr	r3, [pc, #460]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x208>)
 8004e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e32:	e0d8      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e34:	4b6f      	ldr	r3, [pc, #444]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e3e:	4b6d      	ldr	r3, [pc, #436]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d063      	beq.n	8004f12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4a:	4b6a      	ldr	r3, [pc, #424]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	099b      	lsrs	r3, r3, #6
 8004e50:	2200      	movs	r2, #0
 8004e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e5e:	2300      	movs	r3, #0
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
 8004e62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e66:	4622      	mov	r2, r4
 8004e68:	462b      	mov	r3, r5
 8004e6a:	f04f 0000 	mov.w	r0, #0
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	0159      	lsls	r1, r3, #5
 8004e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e78:	0150      	lsls	r0, r2, #5
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4621      	mov	r1, r4
 8004e80:	1a51      	subs	r1, r2, r1
 8004e82:	6139      	str	r1, [r7, #16]
 8004e84:	4629      	mov	r1, r5
 8004e86:	eb63 0301 	sbc.w	r3, r3, r1
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e98:	4659      	mov	r1, fp
 8004e9a:	018b      	lsls	r3, r1, #6
 8004e9c:	4651      	mov	r1, sl
 8004e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ea2:	4651      	mov	r1, sl
 8004ea4:	018a      	lsls	r2, r1, #6
 8004ea6:	4651      	mov	r1, sl
 8004ea8:	ebb2 0801 	subs.w	r8, r2, r1
 8004eac:	4659      	mov	r1, fp
 8004eae:	eb63 0901 	sbc.w	r9, r3, r1
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec6:	4690      	mov	r8, r2
 8004ec8:	4699      	mov	r9, r3
 8004eca:	4623      	mov	r3, r4
 8004ecc:	eb18 0303 	adds.w	r3, r8, r3
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	462b      	mov	r3, r5
 8004ed4:	eb49 0303 	adc.w	r3, r9, r3
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	024b      	lsls	r3, r1, #9
 8004eea:	4621      	mov	r1, r4
 8004eec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	024a      	lsls	r2, r1, #9
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efa:	2200      	movs	r2, #0
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004efe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f04:	f7fb f966 	bl	80001d4 <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f10:	e058      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f12:	4b38      	ldr	r3, [pc, #224]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	2200      	movs	r2, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f22:	623b      	str	r3, [r7, #32]
 8004f24:	2300      	movs	r3, #0
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
 8004f28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	f04f 0000 	mov.w	r0, #0
 8004f34:	f04f 0100 	mov.w	r1, #0
 8004f38:	0159      	lsls	r1, r3, #5
 8004f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f3e:	0150      	lsls	r0, r2, #5
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4641      	mov	r1, r8
 8004f46:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f64:	ebb2 040a 	subs.w	r4, r2, sl
 8004f68:	eb63 050b 	sbc.w	r5, r3, fp
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	00eb      	lsls	r3, r5, #3
 8004f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f7a:	00e2      	lsls	r2, r4, #3
 8004f7c:	4614      	mov	r4, r2
 8004f7e:	461d      	mov	r5, r3
 8004f80:	4643      	mov	r3, r8
 8004f82:	18e3      	adds	r3, r4, r3
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	464b      	mov	r3, r9
 8004f88:	eb45 0303 	adc.w	r3, r5, r3
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	028b      	lsls	r3, r1, #10
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	028a      	lsls	r2, r1, #10
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4619      	mov	r1, r3
 8004fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fae:	2200      	movs	r2, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	61fa      	str	r2, [r7, #28]
 8004fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fb8:	f7fb f90c 	bl	80001d4 <__aeabi_uldivmod>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	0c1b      	lsrs	r3, r3, #16
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	3301      	adds	r3, #1
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fde:	e002      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fe2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3750      	adds	r7, #80	; 0x50
 8004fec:	46bd      	mov	sp, r7
 8004fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	00f42400 	.word	0x00f42400
 8004ffc:	007a1200 	.word	0x007a1200

08005000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <HAL_RCC_GetHCLKFreq+0x14>)
 8005006:	681b      	ldr	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000004 	.word	0x20000004

08005018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800501c:	f7ff fff0 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 8005020:	4602      	mov	r2, r0
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	0a9b      	lsrs	r3, r3, #10
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	4903      	ldr	r1, [pc, #12]	; (800503c <HAL_RCC_GetPCLK1Freq+0x24>)
 800502e:	5ccb      	ldrb	r3, [r1, r3]
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40023800 	.word	0x40023800
 800503c:	08007228 	.word	0x08007228

08005040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005044:	f7ff ffdc 	bl	8005000 <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0b5b      	lsrs	r3, r3, #13
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4903      	ldr	r1, [pc, #12]	; (8005064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40023800 	.word	0x40023800
 8005064:	08007228 	.word	0x08007228

08005068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e041      	b.n	80050fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fd fd6c 	bl	8002b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f000 fcae 	bl	8005a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d001      	beq.n	8005120 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e03c      	b.n	800519a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_TIM_Base_Start+0xa0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <HAL_TIM_Base_Start+0x5c>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513a:	d013      	beq.n	8005164 <HAL_TIM_Base_Start+0x5c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1a      	ldr	r2, [pc, #104]	; (80051ac <HAL_TIM_Base_Start+0xa4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_TIM_Base_Start+0x5c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <HAL_TIM_Base_Start+0xa8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_TIM_Base_Start+0x5c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <HAL_TIM_Base_Start+0xac>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_TIM_Base_Start+0x5c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a16      	ldr	r2, [pc, #88]	; (80051b8 <HAL_TIM_Base_Start+0xb0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d111      	bne.n	8005188 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b06      	cmp	r3, #6
 8005174:	d010      	beq.n	8005198 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	e007      	b.n	8005198 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40014000 	.word	0x40014000

080051bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d001      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e044      	b.n	800525e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1e      	ldr	r2, [pc, #120]	; (800526c <HAL_TIM_Base_Start_IT+0xb0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d018      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x6c>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fe:	d013      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x6c>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1a      	ldr	r2, [pc, #104]	; (8005270 <HAL_TIM_Base_Start_IT+0xb4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00e      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x6c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a19      	ldr	r2, [pc, #100]	; (8005274 <HAL_TIM_Base_Start_IT+0xb8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x6c>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a17      	ldr	r2, [pc, #92]	; (8005278 <HAL_TIM_Base_Start_IT+0xbc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x6c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a16      	ldr	r2, [pc, #88]	; (800527c <HAL_TIM_Base_Start_IT+0xc0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d111      	bne.n	800524c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b06      	cmp	r3, #6
 8005238:	d010      	beq.n	800525c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524a:	e007      	b.n	800525c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40010000 	.word	0x40010000
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00
 800527c:	40014000 	.word	0x40014000

08005280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e041      	b.n	8005316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f839 	bl	800531e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f000 fba2 	bl	8005a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <HAL_TIM_PWM_Start+0x24>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b01      	cmp	r3, #1
 800534e:	bf14      	ite	ne
 8005350:	2301      	movne	r3, #1
 8005352:	2300      	moveq	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	e022      	b.n	800539e <HAL_TIM_PWM_Start+0x6a>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b04      	cmp	r3, #4
 800535c:	d109      	bne.n	8005372 <HAL_TIM_PWM_Start+0x3e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b01      	cmp	r3, #1
 8005368:	bf14      	ite	ne
 800536a:	2301      	movne	r3, #1
 800536c:	2300      	moveq	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e015      	b.n	800539e <HAL_TIM_PWM_Start+0x6a>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d109      	bne.n	800538c <HAL_TIM_PWM_Start+0x58>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	bf14      	ite	ne
 8005384:	2301      	movne	r3, #1
 8005386:	2300      	moveq	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	e008      	b.n	800539e <HAL_TIM_PWM_Start+0x6a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e068      	b.n	8005478 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Start+0x82>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b4:	e013      	b.n	80053de <HAL_TIM_PWM_Start+0xaa>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Start+0x92>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c4:	e00b      	b.n	80053de <HAL_TIM_PWM_Start+0xaa>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d4:	e003      	b.n	80053de <HAL_TIM_PWM_Start+0xaa>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2202      	movs	r2, #2
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2201      	movs	r2, #1
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fdb4 	bl	8005f54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a23      	ldr	r2, [pc, #140]	; (8005480 <HAL_TIM_PWM_Start+0x14c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d107      	bne.n	8005406 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005404:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <HAL_TIM_PWM_Start+0x14c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d018      	beq.n	8005442 <HAL_TIM_PWM_Start+0x10e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005418:	d013      	beq.n	8005442 <HAL_TIM_PWM_Start+0x10e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a19      	ldr	r2, [pc, #100]	; (8005484 <HAL_TIM_PWM_Start+0x150>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00e      	beq.n	8005442 <HAL_TIM_PWM_Start+0x10e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a17      	ldr	r2, [pc, #92]	; (8005488 <HAL_TIM_PWM_Start+0x154>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d009      	beq.n	8005442 <HAL_TIM_PWM_Start+0x10e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a16      	ldr	r2, [pc, #88]	; (800548c <HAL_TIM_PWM_Start+0x158>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <HAL_TIM_PWM_Start+0x10e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a14      	ldr	r2, [pc, #80]	; (8005490 <HAL_TIM_PWM_Start+0x15c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d111      	bne.n	8005466 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b06      	cmp	r3, #6
 8005452:	d010      	beq.n	8005476 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005464:	e007      	b.n	8005476 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40010000 	.word	0x40010000
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40014000 	.word	0x40014000

08005494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0202 	mvn.w	r2, #2
 80054c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fa77 	bl	80059ca <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa69 	bl	80059b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa7a 	bl	80059de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d122      	bne.n	8005544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b04      	cmp	r3, #4
 800550a:	d11b      	bne.n	8005544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0204 	mvn.w	r2, #4
 8005514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fa4d 	bl	80059ca <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa3f 	bl	80059b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fa50 	bl	80059de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b08      	cmp	r3, #8
 8005550:	d122      	bne.n	8005598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b08      	cmp	r3, #8
 800555e:	d11b      	bne.n	8005598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0208 	mvn.w	r2, #8
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2204      	movs	r2, #4
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fa23 	bl	80059ca <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa15 	bl	80059b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa26 	bl	80059de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d122      	bne.n	80055ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d11b      	bne.n	80055ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0210 	mvn.w	r2, #16
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2208      	movs	r2, #8
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f9f9 	bl	80059ca <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f9eb 	bl	80059b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f9fc 	bl	80059de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d10e      	bne.n	8005618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d107      	bne.n	8005618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0201 	mvn.w	r2, #1
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fa ff94 	bl	8000540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b80      	cmp	r3, #128	; 0x80
 8005624:	d10e      	bne.n	8005644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d107      	bne.n	8005644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800563c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fd26 	bl	8006090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d10e      	bne.n	8005670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d107      	bne.n	8005670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f9c1 	bl	80059f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b20      	cmp	r3, #32
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b20      	cmp	r3, #32
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0220 	mvn.w	r2, #32
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fcf0 	bl	800607c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056be:	2302      	movs	r3, #2
 80056c0:	e0ae      	b.n	8005820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b0c      	cmp	r3, #12
 80056ce:	f200 809f 	bhi.w	8005810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056d2:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	0800570d 	.word	0x0800570d
 80056dc:	08005811 	.word	0x08005811
 80056e0:	08005811 	.word	0x08005811
 80056e4:	08005811 	.word	0x08005811
 80056e8:	0800574d 	.word	0x0800574d
 80056ec:	08005811 	.word	0x08005811
 80056f0:	08005811 	.word	0x08005811
 80056f4:	08005811 	.word	0x08005811
 80056f8:	0800578f 	.word	0x0800578f
 80056fc:	08005811 	.word	0x08005811
 8005700:	08005811 	.word	0x08005811
 8005704:	08005811 	.word	0x08005811
 8005708:	080057cf 	.word	0x080057cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f9f8 	bl	8005b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0208 	orr.w	r2, r2, #8
 8005726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0204 	bic.w	r2, r2, #4
 8005736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6999      	ldr	r1, [r3, #24]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	619a      	str	r2, [r3, #24]
      break;
 800574a:	e064      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fa3e 	bl	8005bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6999      	ldr	r1, [r3, #24]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	619a      	str	r2, [r3, #24]
      break;
 800578c:	e043      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fa89 	bl	8005cac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0208 	orr.w	r2, r2, #8
 80057a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0204 	bic.w	r2, r2, #4
 80057b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69d9      	ldr	r1, [r3, #28]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	61da      	str	r2, [r3, #28]
      break;
 80057cc:	e023      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fad3 	bl	8005d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69d9      	ldr	r1, [r3, #28]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	021a      	lsls	r2, r3, #8
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	61da      	str	r2, [r3, #28]
      break;
 800580e:	e002      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	75fb      	strb	r3, [r7, #23]
      break;
 8005814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800581e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIM_ConfigClockSource+0x1c>
 8005840:	2302      	movs	r3, #2
 8005842:	e0b4      	b.n	80059ae <HAL_TIM_ConfigClockSource+0x186>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800586a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587c:	d03e      	beq.n	80058fc <HAL_TIM_ConfigClockSource+0xd4>
 800587e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005882:	f200 8087 	bhi.w	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588a:	f000 8086 	beq.w	800599a <HAL_TIM_ConfigClockSource+0x172>
 800588e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005892:	d87f      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b70      	cmp	r3, #112	; 0x70
 8005896:	d01a      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0xa6>
 8005898:	2b70      	cmp	r3, #112	; 0x70
 800589a:	d87b      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b60      	cmp	r3, #96	; 0x60
 800589e:	d050      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x11a>
 80058a0:	2b60      	cmp	r3, #96	; 0x60
 80058a2:	d877      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b50      	cmp	r3, #80	; 0x50
 80058a6:	d03c      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0xfa>
 80058a8:	2b50      	cmp	r3, #80	; 0x50
 80058aa:	d873      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d058      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x13a>
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d86f      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b30      	cmp	r3, #48	; 0x30
 80058b6:	d064      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x15a>
 80058b8:	2b30      	cmp	r3, #48	; 0x30
 80058ba:	d86b      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d060      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x15a>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d867      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d05c      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x15a>
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d05a      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x15a>
 80058cc:	e062      	b.n	8005994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6899      	ldr	r1, [r3, #8]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f000 fb19 	bl	8005f14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	609a      	str	r2, [r3, #8]
      break;
 80058fa:	e04f      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6899      	ldr	r1, [r3, #8]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f000 fb02 	bl	8005f14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591e:	609a      	str	r2, [r3, #8]
      break;
 8005920:	e03c      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	461a      	mov	r2, r3
 8005930:	f000 fa76 	bl	8005e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2150      	movs	r1, #80	; 0x50
 800593a:	4618      	mov	r0, r3
 800593c:	f000 facf 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005940:	e02c      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	461a      	mov	r2, r3
 8005950:	f000 fa95 	bl	8005e7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2160      	movs	r1, #96	; 0x60
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fabf 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005960:	e01c      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	461a      	mov	r2, r3
 8005970:	f000 fa56 	bl	8005e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2140      	movs	r1, #64	; 0x40
 800597a:	4618      	mov	r0, r3
 800597c:	f000 faaf 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005980:	e00c      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f000 faa6 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005992:	e003      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
      break;
 8005998:	e000      	b.n	800599c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800599a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a34      	ldr	r2, [pc, #208]	; (8005aec <TIM_Base_SetConfig+0xe4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00f      	beq.n	8005a40 <TIM_Base_SetConfig+0x38>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a26:	d00b      	beq.n	8005a40 <TIM_Base_SetConfig+0x38>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a31      	ldr	r2, [pc, #196]	; (8005af0 <TIM_Base_SetConfig+0xe8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d007      	beq.n	8005a40 <TIM_Base_SetConfig+0x38>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a30      	ldr	r2, [pc, #192]	; (8005af4 <TIM_Base_SetConfig+0xec>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_Base_SetConfig+0x38>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a2f      	ldr	r2, [pc, #188]	; (8005af8 <TIM_Base_SetConfig+0xf0>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d108      	bne.n	8005a52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a25      	ldr	r2, [pc, #148]	; (8005aec <TIM_Base_SetConfig+0xe4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01b      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a60:	d017      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a22      	ldr	r2, [pc, #136]	; (8005af0 <TIM_Base_SetConfig+0xe8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d013      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <TIM_Base_SetConfig+0xec>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00f      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <TIM_Base_SetConfig+0xf0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00b      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <TIM_Base_SetConfig+0xf4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d007      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <TIM_Base_SetConfig+0xf8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_Base_SetConfig+0x8a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1d      	ldr	r2, [pc, #116]	; (8005b04 <TIM_Base_SetConfig+0xfc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d108      	bne.n	8005aa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a08      	ldr	r2, [pc, #32]	; (8005aec <TIM_Base_SetConfig+0xe4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d103      	bne.n	8005ad8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	615a      	str	r2, [r3, #20]
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800

08005b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f023 0201 	bic.w	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f023 0302 	bic.w	r3, r3, #2
 8005b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <TIM_OC1_SetConfig+0xc8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10c      	bne.n	8005b7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0308 	bic.w	r3, r3, #8
 8005b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 0304 	bic.w	r3, r3, #4
 8005b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <TIM_OC1_SetConfig+0xc8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d111      	bne.n	8005baa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	621a      	str	r2, [r3, #32]
}
 8005bc4:	bf00      	nop
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	40010000 	.word	0x40010000

08005bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f023 0210 	bic.w	r2, r3, #16
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 0320 	bic.w	r3, r3, #32
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ca8 <TIM_OC2_SetConfig+0xd4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d10d      	bne.n	8005c50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a15      	ldr	r2, [pc, #84]	; (8005ca8 <TIM_OC2_SetConfig+0xd4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d113      	bne.n	8005c80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000

08005cac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <TIM_OC3_SetConfig+0xd0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d10d      	bne.n	8005d26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a14      	ldr	r2, [pc, #80]	; (8005d7c <TIM_OC3_SetConfig+0xd0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d113      	bne.n	8005d56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	621a      	str	r2, [r3, #32]
}
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	40010000 	.word	0x40010000

08005d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	031b      	lsls	r3, r3, #12
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a10      	ldr	r2, [pc, #64]	; (8005e1c <TIM_OC4_SetConfig+0x9c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d109      	bne.n	8005df4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005de6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	019b      	lsls	r3, r3, #6
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	621a      	str	r2, [r3, #32]
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40010000 	.word	0x40010000

08005e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f023 0201 	bic.w	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 030a 	bic.w	r3, r3, #10
 8005e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b087      	sub	sp, #28
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f023 0210 	bic.w	r2, r3, #16
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	031b      	lsls	r3, r3, #12
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f043 0307 	orr.w	r3, r3, #7
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	609a      	str	r2, [r3, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	021a      	lsls	r2, r3, #8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	609a      	str	r2, [r3, #8]
}
 8005f48:	bf00      	nop
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 031f 	and.w	r3, r3, #31
 8005f66:	2201      	movs	r2, #1
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1a      	ldr	r2, [r3, #32]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	43db      	mvns	r3, r3
 8005f76:	401a      	ands	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a1a      	ldr	r2, [r3, #32]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e050      	b.n	800605a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d018      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006004:	d013      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a18      	ldr	r2, [pc, #96]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00e      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a16      	ldr	r2, [pc, #88]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d009      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a15      	ldr	r2, [pc, #84]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a13      	ldr	r2, [pc, #76]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d10c      	bne.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	4313      	orrs	r3, r2
 800603e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40010000 	.word	0x40010000
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	40000c00 	.word	0x40000c00
 8006078:	40014000 	.word	0x40014000

0800607c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e03f      	b.n	8006136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fc fdce 	bl	8002c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fcdf 	bl	8006aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800610c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800611c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b20      	cmp	r3, #32
 8006156:	d11d      	bne.n	8006194 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_UART_Receive_IT+0x26>
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e016      	b.n	8006196 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_UART_Receive_IT+0x38>
 8006172:	2302      	movs	r3, #2
 8006174:	e00f      	b.n	8006196 <HAL_UART_Receive_IT+0x58>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	461a      	mov	r2, r3
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fab6 	bl	80066fc <UART_Start_Receive_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	e000      	b.n	8006196 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006194:	2302      	movs	r3, #2
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b0ba      	sub	sp, #232	; 0xe8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10f      	bne.n	8006206 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <HAL_UART_IRQHandler+0x66>
 80061f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fb99 	bl	8006936 <UART_Receive_IT>
      return;
 8006204:	e256      	b.n	80066b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 80de 	beq.w	80063cc <HAL_UART_IRQHandler+0x22c>
 8006210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800621c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006220:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80d1 	beq.w	80063cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800622a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <HAL_UART_IRQHandler+0xae>
 8006236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0201 	orr.w	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00b      	beq.n	8006272 <HAL_UART_IRQHandler+0xd2>
 800625a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	f043 0202 	orr.w	r2, r3, #2
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <HAL_UART_IRQHandler+0xf6>
 800627e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f043 0204 	orr.w	r2, r3, #4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d011      	beq.n	80062c6 <HAL_UART_IRQHandler+0x126>
 80062a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d105      	bne.n	80062ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0208 	orr.w	r2, r3, #8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 81ed 	beq.w	80066aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_UART_IRQHandler+0x14e>
 80062dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fb24 	bl	8006936 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	bf0c      	ite	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	2300      	movne	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <HAL_UART_IRQHandler+0x17a>
 8006312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006316:	2b00      	cmp	r3, #0
 8006318:	d04f      	beq.n	80063ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa2c 	bl	8006778 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632a:	2b40      	cmp	r3, #64	; 0x40
 800632c:	d141      	bne.n	80063b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3314      	adds	r3, #20
 8006334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800634c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3314      	adds	r3, #20
 8006356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800635a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800635e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1d9      	bne.n	800632e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	2b00      	cmp	r3, #0
 8006380:	d013      	beq.n	80063aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	4a7d      	ldr	r2, [pc, #500]	; (800657c <HAL_UART_IRQHandler+0x3dc>)
 8006388:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	4618      	mov	r0, r3
 8006390:	f7fd fd8e 	bl	8003eb0 <HAL_DMA_Abort_IT>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d016      	beq.n	80063c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	e00e      	b.n	80063c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f990 	bl	80066d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	e00a      	b.n	80063c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f98c 	bl	80066d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	e006      	b.n	80063c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f988 	bl	80066d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063c6:	e170      	b.n	80066aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c8:	bf00      	nop
    return;
 80063ca:	e16e      	b.n	80066aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	f040 814a 	bne.w	800666a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063da:	f003 0310 	and.w	r3, r3, #16
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8143 	beq.w	800666a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 813c 	beq.w	800666a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60bb      	str	r3, [r7, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	60bb      	str	r3, [r7, #8]
 8006406:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b40      	cmp	r3, #64	; 0x40
 8006414:	f040 80b4 	bne.w	8006580 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006424:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8140 	beq.w	80066ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006436:	429a      	cmp	r2, r3
 8006438:	f080 8139 	bcs.w	80066ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006442:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644e:	f000 8088 	beq.w	8006562 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800646c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800647e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800648a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1d9      	bne.n	8006452 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3314      	adds	r3, #20
 80064be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e1      	bne.n	800649e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3314      	adds	r3, #20
 80064e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3314      	adds	r3, #20
 80064fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006500:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006504:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800650c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e3      	bne.n	80064da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006532:	f023 0310 	bic.w	r3, r3, #16
 8006536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006544:	65ba      	str	r2, [r7, #88]	; 0x58
 8006546:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800654a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e3      	bne.n	8006520 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	4618      	mov	r0, r3
 800655e:	f7fd fc37 	bl	8003dd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800656a:	b29b      	uxth	r3, r3
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	b29b      	uxth	r3, r3
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f8b6 	bl	80066e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006578:	e099      	b.n	80066ae <HAL_UART_IRQHandler+0x50e>
 800657a:	bf00      	nop
 800657c:	0800683f 	.word	0x0800683f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006588:	b29b      	uxth	r3, r3
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 808b 	beq.w	80066b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800659c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8086 	beq.w	80066b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	330c      	adds	r3, #12
 80065ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065ca:	647a      	str	r2, [r7, #68]	; 0x44
 80065cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e3      	bne.n	80065a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3314      	adds	r3, #20
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	623b      	str	r3, [r7, #32]
   return(result);
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3314      	adds	r3, #20
 80065fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006602:	633a      	str	r2, [r7, #48]	; 0x30
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e3      	bne.n	80065de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	330c      	adds	r3, #12
 800662a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	60fb      	str	r3, [r7, #12]
   return(result);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0310 	bic.w	r3, r3, #16
 800663a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006648:	61fa      	str	r2, [r7, #28]
 800664a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	69b9      	ldr	r1, [r7, #24]
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	617b      	str	r3, [r7, #20]
   return(result);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e3      	bne.n	8006624 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800665c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f83e 	bl	80066e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006668:	e023      	b.n	80066b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800666a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <HAL_UART_IRQHandler+0x4ea>
 8006676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8ef 	bl	8006866 <UART_Transmit_IT>
    return;
 8006688:	e014      	b.n	80066b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00e      	beq.n	80066b4 <HAL_UART_IRQHandler+0x514>
 8006696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d008      	beq.n	80066b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f92f 	bl	8006906 <UART_EndTransmit_IT>
    return;
 80066a8:	e004      	b.n	80066b4 <HAL_UART_IRQHandler+0x514>
    return;
 80066aa:	bf00      	nop
 80066ac:	e002      	b.n	80066b4 <HAL_UART_IRQHandler+0x514>
      return;
 80066ae:	bf00      	nop
 80066b0:	e000      	b.n	80066b4 <HAL_UART_IRQHandler+0x514>
      return;
 80066b2:	bf00      	nop
  }
}
 80066b4:	37e8      	adds	r7, #232	; 0xe8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop

080066bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	88fa      	ldrh	r2, [r7, #6]
 800671a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2222      	movs	r2, #34	; 0x22
 8006726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d007      	beq.n	800674a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006748:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0201 	orr.w	r2, r2, #1
 8006758:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0220 	orr.w	r2, r2, #32
 8006768:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b095      	sub	sp, #84	; 0x54
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	330c      	adds	r3, #12
 8006786:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	330c      	adds	r3, #12
 800679e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067a0:	643a      	str	r2, [r7, #64]	; 0x40
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e5      	bne.n	8006780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3314      	adds	r3, #20
 80067ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3314      	adds	r3, #20
 80067d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067dc:	e841 2300 	strex	r3, r2, [r1]
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e5      	bne.n	80067b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d119      	bne.n	8006824 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	330c      	adds	r3, #12
 80067f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f023 0310 	bic.w	r3, r3, #16
 8006806:	647b      	str	r3, [r7, #68]	; 0x44
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006810:	61ba      	str	r2, [r7, #24]
 8006812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6979      	ldr	r1, [r7, #20]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	613b      	str	r3, [r7, #16]
   return(result);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e5      	bne.n	80067f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006832:	bf00      	nop
 8006834:	3754      	adds	r7, #84	; 0x54
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f7ff ff39 	bl	80066d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b21      	cmp	r3, #33	; 0x21
 8006878:	d13e      	bne.n	80068f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006882:	d114      	bne.n	80068ae <UART_Transmit_IT+0x48>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d110      	bne.n	80068ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	1c9a      	adds	r2, r3, #2
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	621a      	str	r2, [r3, #32]
 80068ac:	e008      	b.n	80068c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	1c59      	adds	r1, r3, #1
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6211      	str	r1, [r2, #32]
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	4619      	mov	r1, r3
 80068ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10f      	bne.n	80068f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	e000      	b.n	80068fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068f8:	2302      	movs	r3, #2
  }
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800691c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff fec8 	bl	80066bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b08c      	sub	sp, #48	; 0x30
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b22      	cmp	r3, #34	; 0x22
 8006948:	f040 80ab 	bne.w	8006aa2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006954:	d117      	bne.n	8006986 <UART_Receive_IT+0x50>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d113      	bne.n	8006986 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006974:	b29a      	uxth	r2, r3
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	1c9a      	adds	r2, r3, #2
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	629a      	str	r2, [r3, #40]	; 0x28
 8006984:	e026      	b.n	80069d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800698c:	2300      	movs	r3, #0
 800698e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006998:	d007      	beq.n	80069aa <UART_Receive_IT+0x74>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <UART_Receive_IT+0x82>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	e008      	b.n	80069ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29b      	uxth	r3, r3
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	4619      	mov	r1, r3
 80069e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d15a      	bne.n	8006a9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0220 	bic.w	r2, r2, #32
 80069f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695a      	ldr	r2, [r3, #20]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 0201 	bic.w	r2, r2, #1
 8006a16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d135      	bne.n	8006a94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f023 0310 	bic.w	r3, r3, #16
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	330c      	adds	r3, #12
 8006a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4e:	623a      	str	r2, [r7, #32]
 8006a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	69f9      	ldr	r1, [r7, #28]
 8006a54:	6a3a      	ldr	r2, [r7, #32]
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e5      	bne.n	8006a2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b10      	cmp	r3, #16
 8006a6e:	d10a      	bne.n	8006a86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a70:	2300      	movs	r3, #0
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff fe29 	bl	80066e4 <HAL_UARTEx_RxEventCallback>
 8006a92:	e002      	b.n	8006a9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7f9 fd1f 	bl	80004d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e002      	b.n	8006aa4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e000      	b.n	8006aa4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006aa2:	2302      	movs	r3, #2
  }
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3730      	adds	r7, #48	; 0x30
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab0:	b0c0      	sub	sp, #256	; 0x100
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac8:	68d9      	ldr	r1, [r3, #12]
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	ea40 0301 	orr.w	r3, r0, r1
 8006ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b04:	f021 010c 	bic.w	r1, r1, #12
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b12:	430b      	orrs	r3, r1
 8006b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b26:	6999      	ldr	r1, [r3, #24]
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	ea40 0301 	orr.w	r3, r0, r1
 8006b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b8f      	ldr	r3, [pc, #572]	; (8006d78 <UART_SetConfig+0x2cc>)
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d005      	beq.n	8006b4c <UART_SetConfig+0xa0>
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	4b8d      	ldr	r3, [pc, #564]	; (8006d7c <UART_SetConfig+0x2d0>)
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d104      	bne.n	8006b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b4c:	f7fe fa78 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 8006b50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b54:	e003      	b.n	8006b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b56:	f7fe fa5f 	bl	8005018 <HAL_RCC_GetPCLK1Freq>
 8006b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b68:	f040 810c 	bne.w	8006d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b7e:	4622      	mov	r2, r4
 8006b80:	462b      	mov	r3, r5
 8006b82:	1891      	adds	r1, r2, r2
 8006b84:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b86:	415b      	adcs	r3, r3
 8006b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b8e:	4621      	mov	r1, r4
 8006b90:	eb12 0801 	adds.w	r8, r2, r1
 8006b94:	4629      	mov	r1, r5
 8006b96:	eb43 0901 	adc.w	r9, r3, r1
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bae:	4690      	mov	r8, r2
 8006bb0:	4699      	mov	r9, r3
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	eb18 0303 	adds.w	r3, r8, r3
 8006bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	eb49 0303 	adc.w	r3, r9, r3
 8006bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bda:	460b      	mov	r3, r1
 8006bdc:	18db      	adds	r3, r3, r3
 8006bde:	653b      	str	r3, [r7, #80]	; 0x50
 8006be0:	4613      	mov	r3, r2
 8006be2:	eb42 0303 	adc.w	r3, r2, r3
 8006be6:	657b      	str	r3, [r7, #84]	; 0x54
 8006be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bf0:	f7f9 faf0 	bl	80001d4 <__aeabi_uldivmod>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4b61      	ldr	r3, [pc, #388]	; (8006d80 <UART_SetConfig+0x2d4>)
 8006bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	011c      	lsls	r4, r3, #4
 8006c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c14:	4642      	mov	r2, r8
 8006c16:	464b      	mov	r3, r9
 8006c18:	1891      	adds	r1, r2, r2
 8006c1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c1c:	415b      	adcs	r3, r3
 8006c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c24:	4641      	mov	r1, r8
 8006c26:	eb12 0a01 	adds.w	sl, r2, r1
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	f04f 0300 	mov.w	r3, #0
 8006c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c44:	4692      	mov	sl, r2
 8006c46:	469b      	mov	fp, r3
 8006c48:	4643      	mov	r3, r8
 8006c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8006c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c52:	464b      	mov	r3, r9
 8006c54:	eb4b 0303 	adc.w	r3, fp, r3
 8006c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c70:	460b      	mov	r3, r1
 8006c72:	18db      	adds	r3, r3, r3
 8006c74:	643b      	str	r3, [r7, #64]	; 0x40
 8006c76:	4613      	mov	r3, r2
 8006c78:	eb42 0303 	adc.w	r3, r2, r3
 8006c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c86:	f7f9 faa5 	bl	80001d4 <__aeabi_uldivmod>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4b3b      	ldr	r3, [pc, #236]	; (8006d80 <UART_SetConfig+0x2d4>)
 8006c92:	fba3 2301 	umull	r2, r3, r3, r1
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	2264      	movs	r2, #100	; 0x64
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	1acb      	subs	r3, r1, r3
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ca6:	4b36      	ldr	r3, [pc, #216]	; (8006d80 <UART_SetConfig+0x2d4>)
 8006ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cb4:	441c      	add	r4, r3
 8006cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006cc8:	4642      	mov	r2, r8
 8006cca:	464b      	mov	r3, r9
 8006ccc:	1891      	adds	r1, r2, r2
 8006cce:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cd0:	415b      	adcs	r3, r3
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cd8:	4641      	mov	r1, r8
 8006cda:	1851      	adds	r1, r2, r1
 8006cdc:	6339      	str	r1, [r7, #48]	; 0x30
 8006cde:	4649      	mov	r1, r9
 8006ce0:	414b      	adcs	r3, r1
 8006ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006cf0:	4659      	mov	r1, fp
 8006cf2:	00cb      	lsls	r3, r1, #3
 8006cf4:	4651      	mov	r1, sl
 8006cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cfa:	4651      	mov	r1, sl
 8006cfc:	00ca      	lsls	r2, r1, #3
 8006cfe:	4610      	mov	r0, r2
 8006d00:	4619      	mov	r1, r3
 8006d02:	4603      	mov	r3, r0
 8006d04:	4642      	mov	r2, r8
 8006d06:	189b      	adds	r3, r3, r2
 8006d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d0c:	464b      	mov	r3, r9
 8006d0e:	460a      	mov	r2, r1
 8006d10:	eb42 0303 	adc.w	r3, r2, r3
 8006d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	18db      	adds	r3, r3, r3
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d32:	4613      	mov	r3, r2
 8006d34:	eb42 0303 	adc.w	r3, r2, r3
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d42:	f7f9 fa47 	bl	80001d4 <__aeabi_uldivmod>
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <UART_SetConfig+0x2d4>)
 8006d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	2164      	movs	r1, #100	; 0x64
 8006d54:	fb01 f303 	mul.w	r3, r1, r3
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	3332      	adds	r3, #50	; 0x32
 8006d5e:	4a08      	ldr	r2, [pc, #32]	; (8006d80 <UART_SetConfig+0x2d4>)
 8006d60:	fba2 2303 	umull	r2, r3, r2, r3
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	f003 0207 	and.w	r2, r3, #7
 8006d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4422      	add	r2, r4
 8006d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d74:	e105      	b.n	8006f82 <UART_SetConfig+0x4d6>
 8006d76:	bf00      	nop
 8006d78:	40011000 	.word	0x40011000
 8006d7c:	40011400 	.word	0x40011400
 8006d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d96:	4642      	mov	r2, r8
 8006d98:	464b      	mov	r3, r9
 8006d9a:	1891      	adds	r1, r2, r2
 8006d9c:	6239      	str	r1, [r7, #32]
 8006d9e:	415b      	adcs	r3, r3
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
 8006da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006da6:	4641      	mov	r1, r8
 8006da8:	1854      	adds	r4, r2, r1
 8006daa:	4649      	mov	r1, r9
 8006dac:	eb43 0501 	adc.w	r5, r3, r1
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	00eb      	lsls	r3, r5, #3
 8006dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dbe:	00e2      	lsls	r2, r4, #3
 8006dc0:	4614      	mov	r4, r2
 8006dc2:	461d      	mov	r5, r3
 8006dc4:	4643      	mov	r3, r8
 8006dc6:	18e3      	adds	r3, r4, r3
 8006dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dcc:	464b      	mov	r3, r9
 8006dce:	eb45 0303 	adc.w	r3, r5, r3
 8006dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006de2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006de6:	f04f 0200 	mov.w	r2, #0
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006df2:	4629      	mov	r1, r5
 8006df4:	008b      	lsls	r3, r1, #2
 8006df6:	4621      	mov	r1, r4
 8006df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	008a      	lsls	r2, r1, #2
 8006e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e04:	f7f9 f9e6 	bl	80001d4 <__aeabi_uldivmod>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4b60      	ldr	r3, [pc, #384]	; (8006f90 <UART_SetConfig+0x4e4>)
 8006e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	011c      	lsls	r4, r3, #4
 8006e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e28:	4642      	mov	r2, r8
 8006e2a:	464b      	mov	r3, r9
 8006e2c:	1891      	adds	r1, r2, r2
 8006e2e:	61b9      	str	r1, [r7, #24]
 8006e30:	415b      	adcs	r3, r3
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e38:	4641      	mov	r1, r8
 8006e3a:	1851      	adds	r1, r2, r1
 8006e3c:	6139      	str	r1, [r7, #16]
 8006e3e:	4649      	mov	r1, r9
 8006e40:	414b      	adcs	r3, r1
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e50:	4659      	mov	r1, fp
 8006e52:	00cb      	lsls	r3, r1, #3
 8006e54:	4651      	mov	r1, sl
 8006e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e5a:	4651      	mov	r1, sl
 8006e5c:	00ca      	lsls	r2, r1, #3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	4619      	mov	r1, r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	4642      	mov	r2, r8
 8006e66:	189b      	adds	r3, r3, r2
 8006e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e6c:	464b      	mov	r3, r9
 8006e6e:	460a      	mov	r2, r1
 8006e70:	eb42 0303 	adc.w	r3, r2, r3
 8006e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e90:	4649      	mov	r1, r9
 8006e92:	008b      	lsls	r3, r1, #2
 8006e94:	4641      	mov	r1, r8
 8006e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e9a:	4641      	mov	r1, r8
 8006e9c:	008a      	lsls	r2, r1, #2
 8006e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ea2:	f7f9 f997 	bl	80001d4 <__aeabi_uldivmod>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4b39      	ldr	r3, [pc, #228]	; (8006f90 <UART_SetConfig+0x4e4>)
 8006eac:	fba3 1302 	umull	r1, r3, r3, r2
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	2164      	movs	r1, #100	; 0x64
 8006eb4:	fb01 f303 	mul.w	r3, r1, r3
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	3332      	adds	r3, #50	; 0x32
 8006ebe:	4a34      	ldr	r2, [pc, #208]	; (8006f90 <UART_SetConfig+0x4e4>)
 8006ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eca:	441c      	add	r4, r3
 8006ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ed4:	677a      	str	r2, [r7, #116]	; 0x74
 8006ed6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006eda:	4642      	mov	r2, r8
 8006edc:	464b      	mov	r3, r9
 8006ede:	1891      	adds	r1, r2, r2
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	415b      	adcs	r3, r3
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eea:	4641      	mov	r1, r8
 8006eec:	1851      	adds	r1, r2, r1
 8006eee:	6039      	str	r1, [r7, #0]
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	414b      	adcs	r3, r1
 8006ef4:	607b      	str	r3, [r7, #4]
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f02:	4659      	mov	r1, fp
 8006f04:	00cb      	lsls	r3, r1, #3
 8006f06:	4651      	mov	r1, sl
 8006f08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f0c:	4651      	mov	r1, sl
 8006f0e:	00ca      	lsls	r2, r1, #3
 8006f10:	4610      	mov	r0, r2
 8006f12:	4619      	mov	r1, r3
 8006f14:	4603      	mov	r3, r0
 8006f16:	4642      	mov	r2, r8
 8006f18:	189b      	adds	r3, r3, r2
 8006f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	460a      	mov	r2, r1
 8006f20:	eb42 0303 	adc.w	r3, r2, r3
 8006f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8006f30:	667a      	str	r2, [r7, #100]	; 0x64
 8006f32:	f04f 0200 	mov.w	r2, #0
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f3e:	4649      	mov	r1, r9
 8006f40:	008b      	lsls	r3, r1, #2
 8006f42:	4641      	mov	r1, r8
 8006f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f48:	4641      	mov	r1, r8
 8006f4a:	008a      	lsls	r2, r1, #2
 8006f4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f50:	f7f9 f940 	bl	80001d4 <__aeabi_uldivmod>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4b0d      	ldr	r3, [pc, #52]	; (8006f90 <UART_SetConfig+0x4e4>)
 8006f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	2164      	movs	r1, #100	; 0x64
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	3332      	adds	r3, #50	; 0x32
 8006f6c:	4a08      	ldr	r2, [pc, #32]	; (8006f90 <UART_SetConfig+0x4e4>)
 8006f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4422      	add	r2, r4
 8006f80:	609a      	str	r2, [r3, #8]
}
 8006f82:	bf00      	nop
 8006f84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f8e:	bf00      	nop
 8006f90:	51eb851f 	.word	0x51eb851f

08006f94 <__libc_init_array>:
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	4d0d      	ldr	r5, [pc, #52]	; (8006fcc <__libc_init_array+0x38>)
 8006f98:	4c0d      	ldr	r4, [pc, #52]	; (8006fd0 <__libc_init_array+0x3c>)
 8006f9a:	1b64      	subs	r4, r4, r5
 8006f9c:	10a4      	asrs	r4, r4, #2
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	42a6      	cmp	r6, r4
 8006fa2:	d109      	bne.n	8006fb8 <__libc_init_array+0x24>
 8006fa4:	4d0b      	ldr	r5, [pc, #44]	; (8006fd4 <__libc_init_array+0x40>)
 8006fa6:	4c0c      	ldr	r4, [pc, #48]	; (8006fd8 <__libc_init_array+0x44>)
 8006fa8:	f000 f82e 	bl	8007008 <_init>
 8006fac:	1b64      	subs	r4, r4, r5
 8006fae:	10a4      	asrs	r4, r4, #2
 8006fb0:	2600      	movs	r6, #0
 8006fb2:	42a6      	cmp	r6, r4
 8006fb4:	d105      	bne.n	8006fc2 <__libc_init_array+0x2e>
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fbc:	4798      	blx	r3
 8006fbe:	3601      	adds	r6, #1
 8006fc0:	e7ee      	b.n	8006fa0 <__libc_init_array+0xc>
 8006fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc6:	4798      	blx	r3
 8006fc8:	3601      	adds	r6, #1
 8006fca:	e7f2      	b.n	8006fb2 <__libc_init_array+0x1e>
 8006fcc:	08007240 	.word	0x08007240
 8006fd0:	08007240 	.word	0x08007240
 8006fd4:	08007240 	.word	0x08007240
 8006fd8:	08007244 	.word	0x08007244

08006fdc <memcpy>:
 8006fdc:	440a      	add	r2, r1
 8006fde:	4291      	cmp	r1, r2
 8006fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fe4:	d100      	bne.n	8006fe8 <memcpy+0xc>
 8006fe6:	4770      	bx	lr
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ff2:	4291      	cmp	r1, r2
 8006ff4:	d1f9      	bne.n	8006fea <memcpy+0xe>
 8006ff6:	bd10      	pop	{r4, pc}

08006ff8 <memset>:
 8006ff8:	4402      	add	r2, r0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d100      	bne.n	8007002 <memset+0xa>
 8007000:	4770      	bx	lr
 8007002:	f803 1b01 	strb.w	r1, [r3], #1
 8007006:	e7f9      	b.n	8006ffc <memset+0x4>

08007008 <_init>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	bf00      	nop
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr

08007014 <_fini>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr
